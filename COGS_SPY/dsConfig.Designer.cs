//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.42
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace COGSD {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsConfig")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsConfig : System.Data.DataSet {
        
        private FloorHeightDataTable tableFloorHeight;
        
        private SqcUpperDataTable tableSqcUpper;
        
        private SqcLowerDataTable tableSqcLower;
        
        private ocss_infoDataTable tableocss_info;
        
        private environmentDataTable tableenvironment;
        
        private trafficDataTable tabletraffic;
        
        private HoistWayDataTable tableHoistWay;
        
        private CarInfoDataTable tableCarInfo;
        
        private ParameterDataTable tableParameter;
        
        private TSADelayDataTable tableTSADelay;
        
        private TSACompressDataTable tableTSACompress;
        
        private TSARestoreDataTable tableTSARestore;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsConfig() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsConfig(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FloorHeight"] != null)) {
                    base.Tables.Add(new FloorHeightDataTable(ds.Tables["FloorHeight"]));
                }
                if ((ds.Tables["SqcUpper"] != null)) {
                    base.Tables.Add(new SqcUpperDataTable(ds.Tables["SqcUpper"]));
                }
                if ((ds.Tables["SqcLower"] != null)) {
                    base.Tables.Add(new SqcLowerDataTable(ds.Tables["SqcLower"]));
                }
                if ((ds.Tables["ocss_info"] != null)) {
                    base.Tables.Add(new ocss_infoDataTable(ds.Tables["ocss_info"]));
                }
                if ((ds.Tables["environment"] != null)) {
                    base.Tables.Add(new environmentDataTable(ds.Tables["environment"]));
                }
                if ((ds.Tables["traffic"] != null)) {
                    base.Tables.Add(new trafficDataTable(ds.Tables["traffic"]));
                }
                if ((ds.Tables["HoistWay"] != null)) {
                    base.Tables.Add(new HoistWayDataTable(ds.Tables["HoistWay"]));
                }
                if ((ds.Tables["CarInfo"] != null)) {
                    base.Tables.Add(new CarInfoDataTable(ds.Tables["CarInfo"]));
                }
                if ((ds.Tables["Parameter"] != null)) {
                    base.Tables.Add(new ParameterDataTable(ds.Tables["Parameter"]));
                }
                if ((ds.Tables["TSADelay"] != null)) {
                    base.Tables.Add(new TSADelayDataTable(ds.Tables["TSADelay"]));
                }
                if ((ds.Tables["TSACompress"] != null)) {
                    base.Tables.Add(new TSACompressDataTable(ds.Tables["TSACompress"]));
                }
                if ((ds.Tables["TSARestore"] != null)) {
                    base.Tables.Add(new TSARestoreDataTable(ds.Tables["TSARestore"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FloorHeightDataTable FloorHeight {
            get {
                return this.tableFloorHeight;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SqcUpperDataTable SqcUpper {
            get {
                return this.tableSqcUpper;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SqcLowerDataTable SqcLower {
            get {
                return this.tableSqcLower;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ocss_infoDataTable ocss_info {
            get {
                return this.tableocss_info;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public environmentDataTable environment {
            get {
                return this.tableenvironment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public trafficDataTable traffic {
            get {
                return this.tabletraffic;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoistWayDataTable HoistWay {
            get {
                return this.tableHoistWay;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CarInfoDataTable CarInfo {
            get {
                return this.tableCarInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParameterDataTable Parameter {
            get {
                return this.tableParameter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSADelayDataTable TSADelay {
            get {
                return this.tableTSADelay;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSACompressDataTable TSACompress {
            get {
                return this.tableTSACompress;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSARestoreDataTable TSARestore {
            get {
                return this.tableTSARestore;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsConfig cln = ((dsConfig)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FloorHeight"] != null)) {
                    base.Tables.Add(new FloorHeightDataTable(ds.Tables["FloorHeight"]));
                }
                if ((ds.Tables["SqcUpper"] != null)) {
                    base.Tables.Add(new SqcUpperDataTable(ds.Tables["SqcUpper"]));
                }
                if ((ds.Tables["SqcLower"] != null)) {
                    base.Tables.Add(new SqcLowerDataTable(ds.Tables["SqcLower"]));
                }
                if ((ds.Tables["ocss_info"] != null)) {
                    base.Tables.Add(new ocss_infoDataTable(ds.Tables["ocss_info"]));
                }
                if ((ds.Tables["environment"] != null)) {
                    base.Tables.Add(new environmentDataTable(ds.Tables["environment"]));
                }
                if ((ds.Tables["traffic"] != null)) {
                    base.Tables.Add(new trafficDataTable(ds.Tables["traffic"]));
                }
                if ((ds.Tables["HoistWay"] != null)) {
                    base.Tables.Add(new HoistWayDataTable(ds.Tables["HoistWay"]));
                }
                if ((ds.Tables["CarInfo"] != null)) {
                    base.Tables.Add(new CarInfoDataTable(ds.Tables["CarInfo"]));
                }
                if ((ds.Tables["Parameter"] != null)) {
                    base.Tables.Add(new ParameterDataTable(ds.Tables["Parameter"]));
                }
                if ((ds.Tables["TSADelay"] != null)) {
                    base.Tables.Add(new TSADelayDataTable(ds.Tables["TSADelay"]));
                }
                if ((ds.Tables["TSACompress"] != null)) {
                    base.Tables.Add(new TSACompressDataTable(ds.Tables["TSACompress"]));
                }
                if ((ds.Tables["TSARestore"] != null)) {
                    base.Tables.Add(new TSARestoreDataTable(ds.Tables["TSARestore"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFloorHeight = ((FloorHeightDataTable)(base.Tables["FloorHeight"]));
            if ((initTable == true)) {
                if ((this.tableFloorHeight != null)) {
                    this.tableFloorHeight.InitVars();
                }
            }
            this.tableSqcUpper = ((SqcUpperDataTable)(base.Tables["SqcUpper"]));
            if ((initTable == true)) {
                if ((this.tableSqcUpper != null)) {
                    this.tableSqcUpper.InitVars();
                }
            }
            this.tableSqcLower = ((SqcLowerDataTable)(base.Tables["SqcLower"]));
            if ((initTable == true)) {
                if ((this.tableSqcLower != null)) {
                    this.tableSqcLower.InitVars();
                }
            }
            this.tableocss_info = ((ocss_infoDataTable)(base.Tables["ocss_info"]));
            if ((initTable == true)) {
                if ((this.tableocss_info != null)) {
                    this.tableocss_info.InitVars();
                }
            }
            this.tableenvironment = ((environmentDataTable)(base.Tables["environment"]));
            if ((initTable == true)) {
                if ((this.tableenvironment != null)) {
                    this.tableenvironment.InitVars();
                }
            }
            this.tabletraffic = ((trafficDataTable)(base.Tables["traffic"]));
            if ((initTable == true)) {
                if ((this.tabletraffic != null)) {
                    this.tabletraffic.InitVars();
                }
            }
            this.tableHoistWay = ((HoistWayDataTable)(base.Tables["HoistWay"]));
            if ((initTable == true)) {
                if ((this.tableHoistWay != null)) {
                    this.tableHoistWay.InitVars();
                }
            }
            this.tableCarInfo = ((CarInfoDataTable)(base.Tables["CarInfo"]));
            if ((initTable == true)) {
                if ((this.tableCarInfo != null)) {
                    this.tableCarInfo.InitVars();
                }
            }
            this.tableParameter = ((ParameterDataTable)(base.Tables["Parameter"]));
            if ((initTable == true)) {
                if ((this.tableParameter != null)) {
                    this.tableParameter.InitVars();
                }
            }
            this.tableTSADelay = ((TSADelayDataTable)(base.Tables["TSADelay"]));
            if ((initTable == true)) {
                if ((this.tableTSADelay != null)) {
                    this.tableTSADelay.InitVars();
                }
            }
            this.tableTSACompress = ((TSACompressDataTable)(base.Tables["TSACompress"]));
            if ((initTable == true)) {
                if ((this.tableTSACompress != null)) {
                    this.tableTSACompress.InitVars();
                }
            }
            this.tableTSARestore = ((TSARestoreDataTable)(base.Tables["TSARestore"]));
            if ((initTable == true)) {
                if ((this.tableTSARestore != null)) {
                    this.tableTSARestore.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsConfig";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsConfig.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFloorHeight = new FloorHeightDataTable();
            base.Tables.Add(this.tableFloorHeight);
            this.tableSqcUpper = new SqcUpperDataTable();
            base.Tables.Add(this.tableSqcUpper);
            this.tableSqcLower = new SqcLowerDataTable();
            base.Tables.Add(this.tableSqcLower);
            this.tableocss_info = new ocss_infoDataTable();
            base.Tables.Add(this.tableocss_info);
            this.tableenvironment = new environmentDataTable();
            base.Tables.Add(this.tableenvironment);
            this.tabletraffic = new trafficDataTable();
            base.Tables.Add(this.tabletraffic);
            this.tableHoistWay = new HoistWayDataTable();
            base.Tables.Add(this.tableHoistWay);
            this.tableCarInfo = new CarInfoDataTable();
            base.Tables.Add(this.tableCarInfo);
            this.tableParameter = new ParameterDataTable();
            base.Tables.Add(this.tableParameter);
            this.tableTSADelay = new TSADelayDataTable();
            base.Tables.Add(this.tableTSADelay);
            this.tableTSACompress = new TSACompressDataTable();
            base.Tables.Add(this.tableTSACompress);
            this.tableTSARestore = new TSARestoreDataTable();
            base.Tables.Add(this.tableTSARestore);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFloorHeight() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSqcUpper() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSqcLower() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeocss_info() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeenvironment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetraffic() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHoistWay() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCarInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParameter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTSADelay() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTSACompress() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTSARestore() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsConfig ds = new dsConfig();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void FloorHeightRowChangeEventHandler(object sender, FloorHeightRowChangeEvent e);
        
        public delegate void SqcUpperRowChangeEventHandler(object sender, SqcUpperRowChangeEvent e);
        
        public delegate void SqcLowerRowChangeEventHandler(object sender, SqcLowerRowChangeEvent e);
        
        public delegate void ocss_infoRowChangeEventHandler(object sender, ocss_infoRowChangeEvent e);
        
        public delegate void environmentRowChangeEventHandler(object sender, environmentRowChangeEvent e);
        
        public delegate void trafficRowChangeEventHandler(object sender, trafficRowChangeEvent e);
        
        public delegate void HoistWayRowChangeEventHandler(object sender, HoistWayRowChangeEvent e);
        
        public delegate void CarInfoRowChangeEventHandler(object sender, CarInfoRowChangeEvent e);
        
        public delegate void ParameterRowChangeEventHandler(object sender, ParameterRowChangeEvent e);
        
        public delegate void TSADelayRowChangeEventHandler(object sender, TSADelayRowChangeEvent e);
        
        public delegate void TSACompressRowChangeEventHandler(object sender, TSACompressRowChangeEvent e);
        
        public delegate void TSARestoreRowChangeEventHandler(object sender, TSARestoreRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FloorHeightDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLabel;
            
            private System.Data.DataColumn columnHeight;
            
            private System.Data.DataColumn columnPosition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FloorHeightDataTable() {
                this.TableName = "FloorHeight";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FloorHeightDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FloorHeightDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FloorHeightRow this[int index] {
                get {
                    return ((FloorHeightRow)(this.Rows[index]));
                }
            }
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowChanging;
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowChanged;
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowDeleting;
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFloorHeightRow(FloorHeightRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FloorHeightRow AddFloorHeightRow(string Label, int Height, int Position) {
                FloorHeightRow rowFloorHeightRow = ((FloorHeightRow)(this.NewRow()));
                rowFloorHeightRow.ItemArray = new object[] {
                        Label,
                        Height,
                        Position};
                this.Rows.Add(rowFloorHeightRow);
                return rowFloorHeightRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FloorHeightDataTable cln = ((FloorHeightDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FloorHeightDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel = base.Columns["Label"];
                this.columnHeight = base.Columns["Height"];
                this.columnPosition = base.Columns["Position"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel = new System.Data.DataColumn("Label", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabel);
                this.columnHeight = new System.Data.DataColumn("Height", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnPosition = new System.Data.DataColumn("Position", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FloorHeightRow NewFloorHeightRow() {
                return ((FloorHeightRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FloorHeightRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FloorHeightRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FloorHeightRowChanged != null)) {
                    this.FloorHeightRowChanged(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FloorHeightRowChanging != null)) {
                    this.FloorHeightRowChanging(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FloorHeightRowDeleted != null)) {
                    this.FloorHeightRowDeleted(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FloorHeightRowDeleting != null)) {
                    this.FloorHeightRowDeleting(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFloorHeightRow(FloorHeightRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FloorHeightDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SqcUpperDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFloor;
            
            private System.Data.DataColumn columnTimeOffset;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcUpperDataTable() {
                this.TableName = "SqcUpper";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SqcUpperDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SqcUpperDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FloorColumn {
                get {
                    return this.columnFloor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeOffsetColumn {
                get {
                    return this.columnTimeOffset;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcUpperRow this[int index] {
                get {
                    return ((SqcUpperRow)(this.Rows[index]));
                }
            }
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowChanging;
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowChanged;
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowDeleting;
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSqcUpperRow(SqcUpperRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcUpperRow AddSqcUpperRow(string Floor, string TimeOffset) {
                SqcUpperRow rowSqcUpperRow = ((SqcUpperRow)(this.NewRow()));
                rowSqcUpperRow.ItemArray = new object[] {
                        Floor,
                        TimeOffset};
                this.Rows.Add(rowSqcUpperRow);
                return rowSqcUpperRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SqcUpperDataTable cln = ((SqcUpperDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SqcUpperDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFloor = base.Columns["Floor"];
                this.columnTimeOffset = base.Columns["TimeOffset"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFloor = new System.Data.DataColumn("Floor", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloor);
                this.columnTimeOffset = new System.Data.DataColumn("TimeOffset", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOffset);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcUpperRow NewSqcUpperRow() {
                return ((SqcUpperRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SqcUpperRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SqcUpperRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SqcUpperRowChanged != null)) {
                    this.SqcUpperRowChanged(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SqcUpperRowChanging != null)) {
                    this.SqcUpperRowChanging(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SqcUpperRowDeleted != null)) {
                    this.SqcUpperRowDeleted(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SqcUpperRowDeleting != null)) {
                    this.SqcUpperRowDeleting(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSqcUpperRow(SqcUpperRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SqcUpperDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SqcLowerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFloor;
            
            private System.Data.DataColumn columnTimeOffset;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcLowerDataTable() {
                this.TableName = "SqcLower";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SqcLowerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SqcLowerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FloorColumn {
                get {
                    return this.columnFloor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeOffsetColumn {
                get {
                    return this.columnTimeOffset;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcLowerRow this[int index] {
                get {
                    return ((SqcLowerRow)(this.Rows[index]));
                }
            }
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowChanging;
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowChanged;
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowDeleting;
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSqcLowerRow(SqcLowerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcLowerRow AddSqcLowerRow(string Floor, string TimeOffset) {
                SqcLowerRow rowSqcLowerRow = ((SqcLowerRow)(this.NewRow()));
                rowSqcLowerRow.ItemArray = new object[] {
                        Floor,
                        TimeOffset};
                this.Rows.Add(rowSqcLowerRow);
                return rowSqcLowerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SqcLowerDataTable cln = ((SqcLowerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SqcLowerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFloor = base.Columns["Floor"];
                this.columnTimeOffset = base.Columns["TimeOffset"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFloor = new System.Data.DataColumn("Floor", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloor);
                this.columnTimeOffset = new System.Data.DataColumn("TimeOffset", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOffset);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcLowerRow NewSqcLowerRow() {
                return ((SqcLowerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SqcLowerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SqcLowerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SqcLowerRowChanged != null)) {
                    this.SqcLowerRowChanged(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SqcLowerRowChanging != null)) {
                    this.SqcLowerRowChanging(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SqcLowerRowDeleted != null)) {
                    this.SqcLowerRowDeleted(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SqcLowerRowDeleting != null)) {
                    this.SqcLowerRowDeleting(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSqcLowerRow(SqcLowerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SqcLowerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ocss_infoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVel;
            
            private System.Data.DataColumn columnAcc;
            
            private System.Data.DataColumn columnJerk;
            
            private System.Data.DataColumn columnSafeG;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocss_infoDataTable() {
                this.TableName = "ocss_info";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ocss_infoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ocss_infoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VelColumn {
                get {
                    return this.columnVel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccColumn {
                get {
                    return this.columnAcc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JerkColumn {
                get {
                    return this.columnJerk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SafeGColumn {
                get {
                    return this.columnSafeG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocss_infoRow this[int index] {
                get {
                    return ((ocss_infoRow)(this.Rows[index]));
                }
            }
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowChanging;
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowChanged;
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowDeleting;
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addocss_infoRow(ocss_infoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocss_infoRow Addocss_infoRow(string Vel, string Acc, string Jerk, string SafeG) {
                ocss_infoRow rowocss_infoRow = ((ocss_infoRow)(this.NewRow()));
                rowocss_infoRow.ItemArray = new object[] {
                        Vel,
                        Acc,
                        Jerk,
                        SafeG};
                this.Rows.Add(rowocss_infoRow);
                return rowocss_infoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ocss_infoDataTable cln = ((ocss_infoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ocss_infoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVel = base.Columns["Vel"];
                this.columnAcc = base.Columns["Acc"];
                this.columnJerk = base.Columns["Jerk"];
                this.columnSafeG = base.Columns["SafeG"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVel = new System.Data.DataColumn("Vel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVel);
                this.columnAcc = new System.Data.DataColumn("Acc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc);
                this.columnJerk = new System.Data.DataColumn("Jerk", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJerk);
                this.columnSafeG = new System.Data.DataColumn("SafeG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSafeG);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocss_infoRow Newocss_infoRow() {
                return ((ocss_infoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ocss_infoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ocss_infoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ocss_infoRowChanged != null)) {
                    this.ocss_infoRowChanged(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ocss_infoRowChanging != null)) {
                    this.ocss_infoRowChanging(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ocss_infoRowDeleted != null)) {
                    this.ocss_infoRowDeleted(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ocss_infoRowDeleting != null)) {
                    this.ocss_infoRowDeleting(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeocss_infoRow(ocss_infoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ocss_infoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class environmentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncarId;
            
            private System.Data.DataColumn columnisChecked;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public environmentDataTable() {
                this.TableName = "environment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal environmentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected environmentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn carIdColumn {
                get {
                    return this.columncarId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isCheckedColumn {
                get {
                    return this.columnisChecked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public environmentRow this[int index] {
                get {
                    return ((environmentRow)(this.Rows[index]));
                }
            }
            
            public event environmentRowChangeEventHandler environmentRowChanging;
            
            public event environmentRowChangeEventHandler environmentRowChanged;
            
            public event environmentRowChangeEventHandler environmentRowDeleting;
            
            public event environmentRowChangeEventHandler environmentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddenvironmentRow(environmentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public environmentRow AddenvironmentRow(int carId, bool isChecked) {
                environmentRow rowenvironmentRow = ((environmentRow)(this.NewRow()));
                rowenvironmentRow.ItemArray = new object[] {
                        carId,
                        isChecked};
                this.Rows.Add(rowenvironmentRow);
                return rowenvironmentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                environmentDataTable cln = ((environmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new environmentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncarId = base.Columns["carId"];
                this.columnisChecked = base.Columns["isChecked"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncarId = new System.Data.DataColumn("carId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncarId);
                this.columnisChecked = new System.Data.DataColumn("isChecked", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisChecked);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public environmentRow NewenvironmentRow() {
                return ((environmentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new environmentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(environmentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.environmentRowChanged != null)) {
                    this.environmentRowChanged(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.environmentRowChanging != null)) {
                    this.environmentRowChanging(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.environmentRowDeleted != null)) {
                    this.environmentRowDeleted(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.environmentRowDeleting != null)) {
                    this.environmentRowDeleting(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveenvironmentRow(environmentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "environmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class trafficDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntime;
            
            private System.Data.DataColumn columnpos;
            
            private System.Data.DataColumn columndst;
            
            private System.Data.DataColumn columncar;
            
            private System.Data.DataColumn columnw_t;
            
            private System.Data.DataColumn columns_t;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public trafficDataTable() {
                this.TableName = "traffic";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal trafficDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected trafficDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn posColumn {
                get {
                    return this.columnpos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dstColumn {
                get {
                    return this.columndst;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn carColumn {
                get {
                    return this.columncar;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn w_tColumn {
                get {
                    return this.columnw_t;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s_tColumn {
                get {
                    return this.columns_t;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public trafficRow this[int index] {
                get {
                    return ((trafficRow)(this.Rows[index]));
                }
            }
            
            public event trafficRowChangeEventHandler trafficRowChanging;
            
            public event trafficRowChangeEventHandler trafficRowChanged;
            
            public event trafficRowChangeEventHandler trafficRowDeleting;
            
            public event trafficRowChangeEventHandler trafficRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtrafficRow(trafficRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public trafficRow AddtrafficRow(double time, int pos, int dst, int car, double w_t, double s_t) {
                trafficRow rowtrafficRow = ((trafficRow)(this.NewRow()));
                rowtrafficRow.ItemArray = new object[] {
                        time,
                        pos,
                        dst,
                        car,
                        w_t,
                        s_t};
                this.Rows.Add(rowtrafficRow);
                return rowtrafficRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                trafficDataTable cln = ((trafficDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new trafficDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntime = base.Columns["time"];
                this.columnpos = base.Columns["pos"];
                this.columndst = base.Columns["dst"];
                this.columncar = base.Columns["car"];
                this.columnw_t = base.Columns["w_t"];
                this.columns_t = base.Columns["s_t"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntime = new System.Data.DataColumn("time", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnpos = new System.Data.DataColumn("pos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpos);
                this.columndst = new System.Data.DataColumn("dst", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndst);
                this.columncar = new System.Data.DataColumn("car", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncar);
                this.columnw_t = new System.Data.DataColumn("w_t", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnw_t);
                this.columns_t = new System.Data.DataColumn("s_t", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns_t);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public trafficRow NewtrafficRow() {
                return ((trafficRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new trafficRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(trafficRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.trafficRowChanged != null)) {
                    this.trafficRowChanged(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.trafficRowChanging != null)) {
                    this.trafficRowChanging(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.trafficRowDeleted != null)) {
                    this.trafficRowDeleted(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.trafficRowDeleting != null)) {
                    this.trafficRowDeleting(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetrafficRow(trafficRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "trafficDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HoistWayDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlowerCarId;
            
            private System.Data.DataColumn columnupperCarId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoistWayDataTable() {
                this.TableName = "HoistWay";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoistWayDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HoistWayDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lowerCarIdColumn {
                get {
                    return this.columnlowerCarId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn upperCarIdColumn {
                get {
                    return this.columnupperCarId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoistWayRow this[int index] {
                get {
                    return ((HoistWayRow)(this.Rows[index]));
                }
            }
            
            public event HoistWayRowChangeEventHandler HoistWayRowChanging;
            
            public event HoistWayRowChangeEventHandler HoistWayRowChanged;
            
            public event HoistWayRowChangeEventHandler HoistWayRowDeleting;
            
            public event HoistWayRowChangeEventHandler HoistWayRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHoistWayRow(HoistWayRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoistWayRow AddHoistWayRow(int lowerCarId, int upperCarId) {
                HoistWayRow rowHoistWayRow = ((HoistWayRow)(this.NewRow()));
                rowHoistWayRow.ItemArray = new object[] {
                        lowerCarId,
                        upperCarId};
                this.Rows.Add(rowHoistWayRow);
                return rowHoistWayRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HoistWayDataTable cln = ((HoistWayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HoistWayDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlowerCarId = base.Columns["lowerCarId"];
                this.columnupperCarId = base.Columns["upperCarId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlowerCarId = new System.Data.DataColumn("lowerCarId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlowerCarId);
                this.columnupperCarId = new System.Data.DataColumn("upperCarId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnupperCarId);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoistWayRow NewHoistWayRow() {
                return ((HoistWayRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HoistWayRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HoistWayRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HoistWayRowChanged != null)) {
                    this.HoistWayRowChanged(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HoistWayRowChanging != null)) {
                    this.HoistWayRowChanging(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HoistWayRowDeleted != null)) {
                    this.HoistWayRowDeleted(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HoistWayRowDeleting != null)) {
                    this.HoistWayRowDeleting(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHoistWayRow(HoistWayRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HoistWayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CarInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmaxJerk;
            
            private System.Data.DataColumn columnmaxAcceleration;
            
            private System.Data.DataColumn columnmaxVelocity;
            
            private System.Data.DataColumn columntDoorOpening;
            
            private System.Data.DataColumn columntDoorClosing;
            
            private System.Data.DataColumn columnboardingRatio;
            
            private System.Data.DataColumn columncapacity;
            
            private System.Data.DataColumn columnnDoors;
            
            private System.Data.DataColumn columndoorWidth;
            
            private System.Data.DataColumn columntStartDelay;
            
            private System.Data.DataColumn columntStopDelay;
            
            private System.Data.DataColumn columnAfd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CarInfoDataTable() {
                this.TableName = "CarInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CarInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CarInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn maxJerkColumn {
                get {
                    return this.columnmaxJerk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn maxAccelerationColumn {
                get {
                    return this.columnmaxAcceleration;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn maxVelocityColumn {
                get {
                    return this.columnmaxVelocity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tDoorOpeningColumn {
                get {
                    return this.columntDoorOpening;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tDoorClosingColumn {
                get {
                    return this.columntDoorClosing;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn boardingRatioColumn {
                get {
                    return this.columnboardingRatio;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn capacityColumn {
                get {
                    return this.columncapacity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nDoorsColumn {
                get {
                    return this.columnnDoors;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorWidthColumn {
                get {
                    return this.columndoorWidth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tStartDelayColumn {
                get {
                    return this.columntStartDelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tStopDelayColumn {
                get {
                    return this.columntStopDelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AfdColumn {
                get {
                    return this.columnAfd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CarInfoRow this[int index] {
                get {
                    return ((CarInfoRow)(this.Rows[index]));
                }
            }
            
            public event CarInfoRowChangeEventHandler CarInfoRowChanging;
            
            public event CarInfoRowChangeEventHandler CarInfoRowChanged;
            
            public event CarInfoRowChangeEventHandler CarInfoRowDeleting;
            
            public event CarInfoRowChangeEventHandler CarInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCarInfoRow(CarInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CarInfoRow AddCarInfoRow(ushort maxJerk, ushort maxAcceleration, ushort maxVelocity, int tDoorOpening, int tDoorClosing, ushort boardingRatio, ushort capacity, byte nDoors, ushort doorWidth, int tStartDelay, int tStopDelay, ushort Afd) {
                CarInfoRow rowCarInfoRow = ((CarInfoRow)(this.NewRow()));
                rowCarInfoRow.ItemArray = new object[] {
                        maxJerk,
                        maxAcceleration,
                        maxVelocity,
                        tDoorOpening,
                        tDoorClosing,
                        boardingRatio,
                        capacity,
                        nDoors,
                        doorWidth,
                        tStartDelay,
                        tStopDelay,
                        Afd};
                this.Rows.Add(rowCarInfoRow);
                return rowCarInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CarInfoDataTable cln = ((CarInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CarInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmaxJerk = base.Columns["maxJerk"];
                this.columnmaxAcceleration = base.Columns["maxAcceleration"];
                this.columnmaxVelocity = base.Columns["maxVelocity"];
                this.columntDoorOpening = base.Columns["tDoorOpening"];
                this.columntDoorClosing = base.Columns["tDoorClosing"];
                this.columnboardingRatio = base.Columns["boardingRatio"];
                this.columncapacity = base.Columns["capacity"];
                this.columnnDoors = base.Columns["nDoors"];
                this.columndoorWidth = base.Columns["doorWidth"];
                this.columntStartDelay = base.Columns["tStartDelay"];
                this.columntStopDelay = base.Columns["tStopDelay"];
                this.columnAfd = base.Columns["Afd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmaxJerk = new System.Data.DataColumn("maxJerk", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxJerk);
                this.columnmaxAcceleration = new System.Data.DataColumn("maxAcceleration", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxAcceleration);
                this.columnmaxVelocity = new System.Data.DataColumn("maxVelocity", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxVelocity);
                this.columntDoorOpening = new System.Data.DataColumn("tDoorOpening", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntDoorOpening);
                this.columntDoorClosing = new System.Data.DataColumn("tDoorClosing", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntDoorClosing);
                this.columnboardingRatio = new System.Data.DataColumn("boardingRatio", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnboardingRatio);
                this.columncapacity = new System.Data.DataColumn("capacity", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncapacity);
                this.columnnDoors = new System.Data.DataColumn("nDoors", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnDoors);
                this.columndoorWidth = new System.Data.DataColumn("doorWidth", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorWidth);
                this.columntStartDelay = new System.Data.DataColumn("tStartDelay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntStartDelay);
                this.columntStopDelay = new System.Data.DataColumn("tStopDelay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntStopDelay);
                this.columnAfd = new System.Data.DataColumn("Afd", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAfd);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CarInfoRow NewCarInfoRow() {
                return ((CarInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CarInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CarInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CarInfoRowChanged != null)) {
                    this.CarInfoRowChanged(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CarInfoRowChanging != null)) {
                    this.CarInfoRowChanging(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CarInfoRowDeleted != null)) {
                    this.CarInfoRowDeleted(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CarInfoRowDeleting != null)) {
                    this.CarInfoRowDeleting(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCarInfoRow(CarInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CarInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParameterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntCarMinDwell;
            
            private System.Data.DataColumn columntHallMinDwell;
            
            private System.Data.DataColumn columntHallMaxDwell;
            
            private System.Data.DataColumn columntLobbyDwell;
            
            private System.Data.DataColumn columntBoardingDeboardingTime;
            
            private System.Data.DataColumn columnbReopenEnabled;
            
            private System.Data.DataColumn columnLobby1Floor;
            
            private System.Data.DataColumn columnLobby2Floor;
            
            private System.Data.DataColumn columnLobby3Floor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterDataTable() {
                this.TableName = "Parameter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParameterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParameterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tCarMinDwellColumn {
                get {
                    return this.columntCarMinDwell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tHallMinDwellColumn {
                get {
                    return this.columntHallMinDwell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tHallMaxDwellColumn {
                get {
                    return this.columntHallMaxDwell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tLobbyDwellColumn {
                get {
                    return this.columntLobbyDwell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tBoardingDeboardingTimeColumn {
                get {
                    return this.columntBoardingDeboardingTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bReopenEnabledColumn {
                get {
                    return this.columnbReopenEnabled;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lobby1FloorColumn {
                get {
                    return this.columnLobby1Floor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lobby2FloorColumn {
                get {
                    return this.columnLobby2Floor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lobby3FloorColumn {
                get {
                    return this.columnLobby3Floor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterRow this[int index] {
                get {
                    return ((ParameterRow)(this.Rows[index]));
                }
            }
            
            public event ParameterRowChangeEventHandler ParameterRowChanging;
            
            public event ParameterRowChangeEventHandler ParameterRowChanged;
            
            public event ParameterRowChangeEventHandler ParameterRowDeleting;
            
            public event ParameterRowChangeEventHandler ParameterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParameterRow(ParameterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterRow AddParameterRow(int tCarMinDwell, int tHallMinDwell, int tHallMaxDwell, int tLobbyDwell, int tBoardingDeboardingTime, bool bReopenEnabled, sbyte Lobby1Floor, byte Lobby2Floor, byte Lobby3Floor) {
                ParameterRow rowParameterRow = ((ParameterRow)(this.NewRow()));
                rowParameterRow.ItemArray = new object[] {
                        tCarMinDwell,
                        tHallMinDwell,
                        tHallMaxDwell,
                        tLobbyDwell,
                        tBoardingDeboardingTime,
                        bReopenEnabled,
                        Lobby1Floor,
                        Lobby2Floor,
                        Lobby3Floor};
                this.Rows.Add(rowParameterRow);
                return rowParameterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ParameterDataTable cln = ((ParameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ParameterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntCarMinDwell = base.Columns["tCarMinDwell"];
                this.columntHallMinDwell = base.Columns["tHallMinDwell"];
                this.columntHallMaxDwell = base.Columns["tHallMaxDwell"];
                this.columntLobbyDwell = base.Columns["tLobbyDwell"];
                this.columntBoardingDeboardingTime = base.Columns["tBoardingDeboardingTime"];
                this.columnbReopenEnabled = base.Columns["bReopenEnabled"];
                this.columnLobby1Floor = base.Columns["Lobby1Floor"];
                this.columnLobby2Floor = base.Columns["Lobby2Floor"];
                this.columnLobby3Floor = base.Columns["Lobby3Floor"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntCarMinDwell = new System.Data.DataColumn("tCarMinDwell", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntCarMinDwell);
                this.columntHallMinDwell = new System.Data.DataColumn("tHallMinDwell", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntHallMinDwell);
                this.columntHallMaxDwell = new System.Data.DataColumn("tHallMaxDwell", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntHallMaxDwell);
                this.columntLobbyDwell = new System.Data.DataColumn("tLobbyDwell", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntLobbyDwell);
                this.columntBoardingDeboardingTime = new System.Data.DataColumn("tBoardingDeboardingTime", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntBoardingDeboardingTime);
                this.columnbReopenEnabled = new System.Data.DataColumn("bReopenEnabled", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbReopenEnabled);
                this.columnLobby1Floor = new System.Data.DataColumn("Lobby1Floor", typeof(sbyte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLobby1Floor);
                this.columnLobby2Floor = new System.Data.DataColumn("Lobby2Floor", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLobby2Floor);
                this.columnLobby3Floor = new System.Data.DataColumn("Lobby3Floor", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLobby3Floor);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterRow NewParameterRow() {
                return ((ParameterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ParameterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ParameterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParameterRowChanged != null)) {
                    this.ParameterRowChanged(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParameterRowChanging != null)) {
                    this.ParameterRowChanging(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParameterRowDeleted != null)) {
                    this.ParameterRowDeleted(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParameterRowDeleting != null)) {
                    this.ParameterRowDeleting(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParameterRow(ParameterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParameterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TSADelayDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTDLODist;
            
            private System.Data.DataColumn columnleadTrv;
            
            private System.Data.DataColumn columntrailTrv;
            
            private System.Data.DataColumn columndelay;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSADelayDataTable() {
                this.TableName = "TSADelay";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSADelayDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TSADelayDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TDLODistColumn {
                get {
                    return this.columnTDLODist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn leadTrvColumn {
                get {
                    return this.columnleadTrv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn trailTrvColumn {
                get {
                    return this.columntrailTrv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn delayColumn {
                get {
                    return this.columndelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSADelayRow this[int index] {
                get {
                    return ((TSADelayRow)(this.Rows[index]));
                }
            }
            
            public event TSADelayRowChangeEventHandler TSADelayRowChanging;
            
            public event TSADelayRowChangeEventHandler TSADelayRowChanged;
            
            public event TSADelayRowChangeEventHandler TSADelayRowDeleting;
            
            public event TSADelayRowChangeEventHandler TSADelayRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTSADelayRow(TSADelayRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSADelayRow AddTSADelayRow(int TDLODist, int leadTrv, int trailTrv, int delay) {
                TSADelayRow rowTSADelayRow = ((TSADelayRow)(this.NewRow()));
                rowTSADelayRow.ItemArray = new object[] {
                        TDLODist,
                        leadTrv,
                        trailTrv,
                        delay};
                this.Rows.Add(rowTSADelayRow);
                return rowTSADelayRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TSADelayDataTable cln = ((TSADelayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TSADelayDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTDLODist = base.Columns["TDLODist"];
                this.columnleadTrv = base.Columns["leadTrv"];
                this.columntrailTrv = base.Columns["trailTrv"];
                this.columndelay = base.Columns["delay"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTDLODist = new System.Data.DataColumn("TDLODist", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTDLODist);
                this.columnleadTrv = new System.Data.DataColumn("leadTrv", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnleadTrv);
                this.columntrailTrv = new System.Data.DataColumn("trailTrv", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntrailTrv);
                this.columndelay = new System.Data.DataColumn("delay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndelay);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSADelayRow NewTSADelayRow() {
                return ((TSADelayRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TSADelayRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TSADelayRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSADelayRowChanged != null)) {
                    this.TSADelayRowChanged(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSADelayRowChanging != null)) {
                    this.TSADelayRowChanging(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSADelayRowDeleted != null)) {
                    this.TSADelayRowDeleted(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSADelayRowDeleting != null)) {
                    this.TSADelayRowDeleting(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTSADelayRow(TSADelayRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TSADelayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TSACompressDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTDLODist;
            
            private System.Data.DataColumn columnleadTrv;
            
            private System.Data.DataColumn columntrailTrv;
            
            private System.Data.DataColumn columndelay;
            
            private System.Data.DataColumn columntype;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSACompressDataTable() {
                this.TableName = "TSACompress";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSACompressDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TSACompressDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TDLODistColumn {
                get {
                    return this.columnTDLODist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn leadTrvColumn {
                get {
                    return this.columnleadTrv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn trailTrvColumn {
                get {
                    return this.columntrailTrv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn delayColumn {
                get {
                    return this.columndelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSACompressRow this[int index] {
                get {
                    return ((TSACompressRow)(this.Rows[index]));
                }
            }
            
            public event TSACompressRowChangeEventHandler TSACompressRowChanging;
            
            public event TSACompressRowChangeEventHandler TSACompressRowChanged;
            
            public event TSACompressRowChangeEventHandler TSACompressRowDeleting;
            
            public event TSACompressRowChangeEventHandler TSACompressRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTSACompressRow(TSACompressRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSACompressRow AddTSACompressRow(int TDLODist, int leadTrv, int trailTrv, int delay, int type) {
                TSACompressRow rowTSACompressRow = ((TSACompressRow)(this.NewRow()));
                rowTSACompressRow.ItemArray = new object[] {
                        TDLODist,
                        leadTrv,
                        trailTrv,
                        delay,
                        type};
                this.Rows.Add(rowTSACompressRow);
                return rowTSACompressRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TSACompressDataTable cln = ((TSACompressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TSACompressDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTDLODist = base.Columns["TDLODist"];
                this.columnleadTrv = base.Columns["leadTrv"];
                this.columntrailTrv = base.Columns["trailTrv"];
                this.columndelay = base.Columns["delay"];
                this.columntype = base.Columns["type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTDLODist = new System.Data.DataColumn("TDLODist", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTDLODist);
                this.columnleadTrv = new System.Data.DataColumn("leadTrv", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnleadTrv);
                this.columntrailTrv = new System.Data.DataColumn("trailTrv", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntrailTrv);
                this.columndelay = new System.Data.DataColumn("delay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndelay);
                this.columntype = new System.Data.DataColumn("type", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSACompressRow NewTSACompressRow() {
                return ((TSACompressRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TSACompressRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TSACompressRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSACompressRowChanged != null)) {
                    this.TSACompressRowChanged(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSACompressRowChanging != null)) {
                    this.TSACompressRowChanging(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSACompressRowDeleted != null)) {
                    this.TSACompressRowDeleted(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSACompressRowDeleting != null)) {
                    this.TSACompressRowDeleting(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTSACompressRow(TSACompressRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TSACompressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TSARestoreDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTDLODist;
            
            private System.Data.DataColumn columnleadTrv;
            
            private System.Data.DataColumn columntrailTrv;
            
            private System.Data.DataColumn columndelay;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSARestoreDataTable() {
                this.TableName = "TSARestore";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSARestoreDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TSARestoreDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TDLODistColumn {
                get {
                    return this.columnTDLODist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn leadTrvColumn {
                get {
                    return this.columnleadTrv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn trailTrvColumn {
                get {
                    return this.columntrailTrv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn delayColumn {
                get {
                    return this.columndelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSARestoreRow this[int index] {
                get {
                    return ((TSARestoreRow)(this.Rows[index]));
                }
            }
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowChanging;
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowChanged;
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowDeleting;
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTSARestoreRow(TSARestoreRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSARestoreRow AddTSARestoreRow(int TDLODist, int leadTrv, int trailTrv, int delay) {
                TSARestoreRow rowTSARestoreRow = ((TSARestoreRow)(this.NewRow()));
                rowTSARestoreRow.ItemArray = new object[] {
                        TDLODist,
                        leadTrv,
                        trailTrv,
                        delay};
                this.Rows.Add(rowTSARestoreRow);
                return rowTSARestoreRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TSARestoreDataTable cln = ((TSARestoreDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TSARestoreDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTDLODist = base.Columns["TDLODist"];
                this.columnleadTrv = base.Columns["leadTrv"];
                this.columntrailTrv = base.Columns["trailTrv"];
                this.columndelay = base.Columns["delay"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTDLODist = new System.Data.DataColumn("TDLODist", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTDLODist);
                this.columnleadTrv = new System.Data.DataColumn("leadTrv", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnleadTrv);
                this.columntrailTrv = new System.Data.DataColumn("trailTrv", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntrailTrv);
                this.columndelay = new System.Data.DataColumn("delay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndelay);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSARestoreRow NewTSARestoreRow() {
                return ((TSARestoreRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TSARestoreRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TSARestoreRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSARestoreRowChanged != null)) {
                    this.TSARestoreRowChanged(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSARestoreRowChanging != null)) {
                    this.TSARestoreRowChanging(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSARestoreRowDeleted != null)) {
                    this.TSARestoreRowDeleted(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSARestoreRowDeleting != null)) {
                    this.TSARestoreRowDeleting(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTSARestoreRow(TSARestoreRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsConfig ds = new dsConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TSARestoreDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FloorHeightRow : System.Data.DataRow {
            
            private FloorHeightDataTable tableFloorHeight;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FloorHeightRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFloorHeight = ((FloorHeightDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    try {
                        return ((string)(this[this.tableFloorHeight.LabelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'FloorHeight\' 테이블의 \'Label\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorHeight.LabelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tableFloorHeight.HeightColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'FloorHeight\' 테이블의 \'Height\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorHeight.HeightColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Position {
                get {
                    try {
                        return ((int)(this[this.tableFloorHeight.PositionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'FloorHeight\' 테이블의 \'Position\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorHeight.PositionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelNull() {
                return this.IsNull(this.tableFloorHeight.LabelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelNull() {
                this[this.tableFloorHeight.LabelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableFloorHeight.HeightColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableFloorHeight.HeightColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNull() {
                return this.IsNull(this.tableFloorHeight.PositionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNull() {
                this[this.tableFloorHeight.PositionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SqcUpperRow : System.Data.DataRow {
            
            private SqcUpperDataTable tableSqcUpper;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SqcUpperRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSqcUpper = ((SqcUpperDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Floor {
                get {
                    try {
                        return ((string)(this[this.tableSqcUpper.FloorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'SqcUpper\' 테이블의 \'Floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSqcUpper.FloorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeOffset {
                get {
                    try {
                        return ((string)(this[this.tableSqcUpper.TimeOffsetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'SqcUpper\' 테이블의 \'TimeOffset\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSqcUpper.TimeOffsetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloorNull() {
                return this.IsNull(this.tableSqcUpper.FloorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloorNull() {
                this[this.tableSqcUpper.FloorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOffsetNull() {
                return this.IsNull(this.tableSqcUpper.TimeOffsetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOffsetNull() {
                this[this.tableSqcUpper.TimeOffsetColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SqcLowerRow : System.Data.DataRow {
            
            private SqcLowerDataTable tableSqcLower;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SqcLowerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSqcLower = ((SqcLowerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Floor {
                get {
                    try {
                        return ((string)(this[this.tableSqcLower.FloorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'SqcLower\' 테이블의 \'Floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSqcLower.FloorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeOffset {
                get {
                    try {
                        return ((string)(this[this.tableSqcLower.TimeOffsetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'SqcLower\' 테이블의 \'TimeOffset\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSqcLower.TimeOffsetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloorNull() {
                return this.IsNull(this.tableSqcLower.FloorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloorNull() {
                this[this.tableSqcLower.FloorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOffsetNull() {
                return this.IsNull(this.tableSqcLower.TimeOffsetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOffsetNull() {
                this[this.tableSqcLower.TimeOffsetColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ocss_infoRow : System.Data.DataRow {
            
            private ocss_infoDataTable tableocss_info;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ocss_infoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableocss_info = ((ocss_infoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Vel {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.VelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ocss_info\' 테이블의 \'Vel\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.VelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Acc {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.AccColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ocss_info\' 테이블의 \'Acc\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.AccColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Jerk {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.JerkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ocss_info\' 테이블의 \'Jerk\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.JerkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SafeG {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.SafeGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ocss_info\' 테이블의 \'SafeG\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.SafeGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVelNull() {
                return this.IsNull(this.tableocss_info.VelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVelNull() {
                this[this.tableocss_info.VelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccNull() {
                return this.IsNull(this.tableocss_info.AccColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccNull() {
                this[this.tableocss_info.AccColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJerkNull() {
                return this.IsNull(this.tableocss_info.JerkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJerkNull() {
                this[this.tableocss_info.JerkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSafeGNull() {
                return this.IsNull(this.tableocss_info.SafeGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSafeGNull() {
                this[this.tableocss_info.SafeGColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class environmentRow : System.Data.DataRow {
            
            private environmentDataTable tableenvironment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal environmentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableenvironment = ((environmentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int carId {
                get {
                    try {
                        return ((int)(this[this.tableenvironment.carIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'environment\' 테이블의 \'carId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableenvironment.carIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isChecked {
                get {
                    try {
                        return ((bool)(this[this.tableenvironment.isCheckedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'environment\' 테이블의 \'isChecked\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableenvironment.isCheckedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscarIdNull() {
                return this.IsNull(this.tableenvironment.carIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcarIdNull() {
                this[this.tableenvironment.carIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisCheckedNull() {
                return this.IsNull(this.tableenvironment.isCheckedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisCheckedNull() {
                this[this.tableenvironment.isCheckedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class trafficRow : System.Data.DataRow {
            
            private trafficDataTable tabletraffic;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal trafficRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletraffic = ((trafficDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double time {
                get {
                    try {
                        return ((double)(this[this.tabletraffic.timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'traffic\' 테이블의 \'time\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pos {
                get {
                    try {
                        return ((int)(this[this.tabletraffic.posColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'traffic\' 테이블의 \'pos\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.posColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dst {
                get {
                    try {
                        return ((int)(this[this.tabletraffic.dstColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'traffic\' 테이블의 \'dst\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.dstColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int car {
                get {
                    try {
                        return ((int)(this[this.tabletraffic.carColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'traffic\' 테이블의 \'car\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.carColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double w_t {
                get {
                    try {
                        return ((double)(this[this.tabletraffic.w_tColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'traffic\' 테이블의 \'w_t\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.w_tColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s_t {
                get {
                    try {
                        return ((double)(this[this.tabletraffic.s_tColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'traffic\' 테이블의 \'s_t\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.s_tColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.tabletraffic.timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.tabletraffic.timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsposNull() {
                return this.IsNull(this.tabletraffic.posColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetposNull() {
                this[this.tabletraffic.posColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstNull() {
                return this.IsNull(this.tabletraffic.dstColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstNull() {
                this[this.tabletraffic.dstColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscarNull() {
                return this.IsNull(this.tabletraffic.carColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcarNull() {
                this[this.tabletraffic.carColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isw_tNull() {
                return this.IsNull(this.tabletraffic.w_tColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setw_tNull() {
                this[this.tabletraffic.w_tColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss_tNull() {
                return this.IsNull(this.tabletraffic.s_tColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets_tNull() {
                this[this.tabletraffic.s_tColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HoistWayRow : System.Data.DataRow {
            
            private HoistWayDataTable tableHoistWay;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoistWayRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHoistWay = ((HoistWayDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int lowerCarId {
                get {
                    try {
                        return ((int)(this[this.tableHoistWay.lowerCarIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HoistWay\' 테이블의 \'lowerCarId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHoistWay.lowerCarIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int upperCarId {
                get {
                    try {
                        return ((int)(this[this.tableHoistWay.upperCarIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HoistWay\' 테이블의 \'upperCarId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHoistWay.upperCarIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslowerCarIdNull() {
                return this.IsNull(this.tableHoistWay.lowerCarIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlowerCarIdNull() {
                this[this.tableHoistWay.lowerCarIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupperCarIdNull() {
                return this.IsNull(this.tableHoistWay.upperCarIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupperCarIdNull() {
                this[this.tableHoistWay.upperCarIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CarInfoRow : System.Data.DataRow {
            
            private CarInfoDataTable tableCarInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CarInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCarInfo = ((CarInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort maxJerk {
                get {
                    try {
                        return ((ushort)(this[this.tableCarInfo.maxJerkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'maxJerk\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.maxJerkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort maxAcceleration {
                get {
                    try {
                        return ((ushort)(this[this.tableCarInfo.maxAccelerationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'maxAcceleration\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.maxAccelerationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort maxVelocity {
                get {
                    try {
                        return ((ushort)(this[this.tableCarInfo.maxVelocityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'maxVelocity\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.maxVelocityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tDoorOpening {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tDoorOpeningColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'tDoorOpening\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tDoorOpeningColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tDoorClosing {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tDoorClosingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'tDoorClosing\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tDoorClosingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort boardingRatio {
                get {
                    try {
                        return ((ushort)(this[this.tableCarInfo.boardingRatioColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'boardingRatio\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.boardingRatioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort capacity {
                get {
                    try {
                        return ((ushort)(this[this.tableCarInfo.capacityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'capacity\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.capacityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte nDoors {
                get {
                    try {
                        return ((byte)(this[this.tableCarInfo.nDoorsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'nDoors\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.nDoorsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort doorWidth {
                get {
                    try {
                        return ((ushort)(this[this.tableCarInfo.doorWidthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'doorWidth\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.doorWidthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tStartDelay {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tStartDelayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'tStartDelay\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tStartDelayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tStopDelay {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tStopDelayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'tStopDelay\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tStopDelayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort Afd {
                get {
                    try {
                        return ((ushort)(this[this.tableCarInfo.AfdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'CarInfo\' 테이블의 \'Afd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.AfdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxJerkNull() {
                return this.IsNull(this.tableCarInfo.maxJerkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxJerkNull() {
                this[this.tableCarInfo.maxJerkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxAccelerationNull() {
                return this.IsNull(this.tableCarInfo.maxAccelerationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxAccelerationNull() {
                this[this.tableCarInfo.maxAccelerationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxVelocityNull() {
                return this.IsNull(this.tableCarInfo.maxVelocityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxVelocityNull() {
                this[this.tableCarInfo.maxVelocityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstDoorOpeningNull() {
                return this.IsNull(this.tableCarInfo.tDoorOpeningColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettDoorOpeningNull() {
                this[this.tableCarInfo.tDoorOpeningColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstDoorClosingNull() {
                return this.IsNull(this.tableCarInfo.tDoorClosingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettDoorClosingNull() {
                this[this.tableCarInfo.tDoorClosingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsboardingRatioNull() {
                return this.IsNull(this.tableCarInfo.boardingRatioColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetboardingRatioNull() {
                this[this.tableCarInfo.boardingRatioColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscapacityNull() {
                return this.IsNull(this.tableCarInfo.capacityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcapacityNull() {
                this[this.tableCarInfo.capacityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnDoorsNull() {
                return this.IsNull(this.tableCarInfo.nDoorsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnDoorsNull() {
                this[this.tableCarInfo.nDoorsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorWidthNull() {
                return this.IsNull(this.tableCarInfo.doorWidthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorWidthNull() {
                this[this.tableCarInfo.doorWidthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstStartDelayNull() {
                return this.IsNull(this.tableCarInfo.tStartDelayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettStartDelayNull() {
                this[this.tableCarInfo.tStartDelayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstStopDelayNull() {
                return this.IsNull(this.tableCarInfo.tStopDelayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettStopDelayNull() {
                this[this.tableCarInfo.tStopDelayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAfdNull() {
                return this.IsNull(this.tableCarInfo.AfdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAfdNull() {
                this[this.tableCarInfo.AfdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParameterRow : System.Data.DataRow {
            
            private ParameterDataTable tableParameter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParameterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParameter = ((ParameterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tCarMinDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tCarMinDwellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'tCarMinDwell\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tCarMinDwellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tHallMinDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tHallMinDwellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'tHallMinDwell\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tHallMinDwellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tHallMaxDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tHallMaxDwellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'tHallMaxDwell\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tHallMaxDwellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tLobbyDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tLobbyDwellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'tLobbyDwell\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tLobbyDwellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tBoardingDeboardingTime {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tBoardingDeboardingTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'tBoardingDeboardingTime\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tBoardingDeboardingTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool bReopenEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableParameter.bReopenEnabledColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'bReopenEnabled\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.bReopenEnabledColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sbyte Lobby1Floor {
                get {
                    try {
                        return ((sbyte)(this[this.tableParameter.Lobby1FloorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'Lobby1Floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.Lobby1FloorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Lobby2Floor {
                get {
                    try {
                        return ((byte)(this[this.tableParameter.Lobby2FloorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'Lobby2Floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.Lobby2FloorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Lobby3Floor {
                get {
                    try {
                        return ((byte)(this[this.tableParameter.Lobby3FloorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Parameter\' 테이블의 \'Lobby3Floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.Lobby3FloorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstCarMinDwellNull() {
                return this.IsNull(this.tableParameter.tCarMinDwellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettCarMinDwellNull() {
                this[this.tableParameter.tCarMinDwellColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstHallMinDwellNull() {
                return this.IsNull(this.tableParameter.tHallMinDwellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettHallMinDwellNull() {
                this[this.tableParameter.tHallMinDwellColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstHallMaxDwellNull() {
                return this.IsNull(this.tableParameter.tHallMaxDwellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettHallMaxDwellNull() {
                this[this.tableParameter.tHallMaxDwellColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstLobbyDwellNull() {
                return this.IsNull(this.tableParameter.tLobbyDwellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettLobbyDwellNull() {
                this[this.tableParameter.tLobbyDwellColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstBoardingDeboardingTimeNull() {
                return this.IsNull(this.tableParameter.tBoardingDeboardingTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettBoardingDeboardingTimeNull() {
                this[this.tableParameter.tBoardingDeboardingTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbReopenEnabledNull() {
                return this.IsNull(this.tableParameter.bReopenEnabledColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbReopenEnabledNull() {
                this[this.tableParameter.bReopenEnabledColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLobby1FloorNull() {
                return this.IsNull(this.tableParameter.Lobby1FloorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLobby1FloorNull() {
                this[this.tableParameter.Lobby1FloorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLobby2FloorNull() {
                return this.IsNull(this.tableParameter.Lobby2FloorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLobby2FloorNull() {
                this[this.tableParameter.Lobby2FloorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLobby3FloorNull() {
                return this.IsNull(this.tableParameter.Lobby3FloorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLobby3FloorNull() {
                this[this.tableParameter.Lobby3FloorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TSADelayRow : System.Data.DataRow {
            
            private TSADelayDataTable tableTSADelay;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSADelayRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSADelay = ((TSADelayDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TDLODist {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.TDLODistColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSADelay\' 테이블의 \'TDLODist\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.TDLODistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int leadTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.leadTrvColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSADelay\' 테이블의 \'leadTrv\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.leadTrvColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int trailTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.trailTrvColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSADelay\' 테이블의 \'trailTrv\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.trailTrvColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int delay {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.delayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSADelay\' 테이블의 \'delay\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.delayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTDLODistNull() {
                return this.IsNull(this.tableTSADelay.TDLODistColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTDLODistNull() {
                this[this.tableTSADelay.TDLODistColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsleadTrvNull() {
                return this.IsNull(this.tableTSADelay.leadTrvColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetleadTrvNull() {
                this[this.tableTSADelay.leadTrvColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrailTrvNull() {
                return this.IsNull(this.tableTSADelay.trailTrvColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrailTrvNull() {
                this[this.tableTSADelay.trailTrvColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdelayNull() {
                return this.IsNull(this.tableTSADelay.delayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdelayNull() {
                this[this.tableTSADelay.delayColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TSACompressRow : System.Data.DataRow {
            
            private TSACompressDataTable tableTSACompress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSACompressRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSACompress = ((TSACompressDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TDLODist {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.TDLODistColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSACompress\' 테이블의 \'TDLODist\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.TDLODistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int leadTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.leadTrvColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSACompress\' 테이블의 \'leadTrv\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.leadTrvColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int trailTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.trailTrvColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSACompress\' 테이블의 \'trailTrv\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.trailTrvColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int delay {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.delayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSACompress\' 테이블의 \'delay\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.delayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int type {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSACompress\' 테이블의 \'type\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTDLODistNull() {
                return this.IsNull(this.tableTSACompress.TDLODistColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTDLODistNull() {
                this[this.tableTSACompress.TDLODistColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsleadTrvNull() {
                return this.IsNull(this.tableTSACompress.leadTrvColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetleadTrvNull() {
                this[this.tableTSACompress.leadTrvColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrailTrvNull() {
                return this.IsNull(this.tableTSACompress.trailTrvColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrailTrvNull() {
                this[this.tableTSACompress.trailTrvColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdelayNull() {
                return this.IsNull(this.tableTSACompress.delayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdelayNull() {
                this[this.tableTSACompress.delayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableTSACompress.typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableTSACompress.typeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TSARestoreRow : System.Data.DataRow {
            
            private TSARestoreDataTable tableTSARestore;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSARestoreRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSARestore = ((TSARestoreDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TDLODist {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.TDLODistColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSARestore\' 테이블의 \'TDLODist\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.TDLODistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int leadTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.leadTrvColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSARestore\' 테이블의 \'leadTrv\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.leadTrvColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int trailTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.trailTrvColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSARestore\' 테이블의 \'trailTrv\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.trailTrvColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int delay {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.delayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'TSARestore\' 테이블의 \'delay\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.delayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTDLODistNull() {
                return this.IsNull(this.tableTSARestore.TDLODistColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTDLODistNull() {
                this[this.tableTSARestore.TDLODistColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsleadTrvNull() {
                return this.IsNull(this.tableTSARestore.leadTrvColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetleadTrvNull() {
                this[this.tableTSARestore.leadTrvColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrailTrvNull() {
                return this.IsNull(this.tableTSARestore.trailTrvColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrailTrvNull() {
                this[this.tableTSARestore.trailTrvColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdelayNull() {
                return this.IsNull(this.tableTSARestore.delayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdelayNull() {
                this[this.tableTSARestore.delayColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FloorHeightRowChangeEvent : System.EventArgs {
            
            private FloorHeightRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FloorHeightRowChangeEvent(FloorHeightRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FloorHeightRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SqcUpperRowChangeEvent : System.EventArgs {
            
            private SqcUpperRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcUpperRowChangeEvent(SqcUpperRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcUpperRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SqcLowerRowChangeEvent : System.EventArgs {
            
            private SqcLowerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcLowerRowChangeEvent(SqcLowerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SqcLowerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ocss_infoRowChangeEvent : System.EventArgs {
            
            private ocss_infoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocss_infoRowChangeEvent(ocss_infoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocss_infoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class environmentRowChangeEvent : System.EventArgs {
            
            private environmentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public environmentRowChangeEvent(environmentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public environmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class trafficRowChangeEvent : System.EventArgs {
            
            private trafficRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public trafficRowChangeEvent(trafficRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public trafficRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HoistWayRowChangeEvent : System.EventArgs {
            
            private HoistWayRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoistWayRowChangeEvent(HoistWayRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoistWayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CarInfoRowChangeEvent : System.EventArgs {
            
            private CarInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CarInfoRowChangeEvent(CarInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CarInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParameterRowChangeEvent : System.EventArgs {
            
            private ParameterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterRowChangeEvent(ParameterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TSADelayRowChangeEvent : System.EventArgs {
            
            private TSADelayRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSADelayRowChangeEvent(TSADelayRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSADelayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TSACompressRowChangeEvent : System.EventArgs {
            
            private TSACompressRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSACompressRowChangeEvent(TSACompressRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSACompressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TSARestoreRowChangeEvent : System.EventArgs {
            
            private TSARestoreRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSARestoreRowChangeEvent(TSARestoreRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSARestoreRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591