//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace COGSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsConfig : DataSet {
        
        private FloorHeightDataTable tableFloorHeight;
        
        private SqcUpperDataTable tableSqcUpper;
        
        private SqcLowerDataTable tableSqcLower;
        
        private ocss_infoDataTable tableocss_info;
        
        private environmentDataTable tableenvironment;
        
        private trafficDataTable tabletraffic;
        
        private HoistWayDataTable tableHoistWay;
        
        private CarInfoDataTable tableCarInfo;
        
        private ParameterDataTable tableParameter;
        
        private TSADelayDataTable tableTSADelay;
        
        private TSACompressDataTable tableTSACompress;
        
        private TSARestoreDataTable tableTSARestore;
        
        public dsConfig() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsConfig(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FloorHeight"] != null)) {
                    this.Tables.Add(new FloorHeightDataTable(ds.Tables["FloorHeight"]));
                }
                if ((ds.Tables["SqcUpper"] != null)) {
                    this.Tables.Add(new SqcUpperDataTable(ds.Tables["SqcUpper"]));
                }
                if ((ds.Tables["SqcLower"] != null)) {
                    this.Tables.Add(new SqcLowerDataTable(ds.Tables["SqcLower"]));
                }
                if ((ds.Tables["ocss_info"] != null)) {
                    this.Tables.Add(new ocss_infoDataTable(ds.Tables["ocss_info"]));
                }
                if ((ds.Tables["environment"] != null)) {
                    this.Tables.Add(new environmentDataTable(ds.Tables["environment"]));
                }
                if ((ds.Tables["traffic"] != null)) {
                    this.Tables.Add(new trafficDataTable(ds.Tables["traffic"]));
                }
                if ((ds.Tables["HoistWay"] != null)) {
                    this.Tables.Add(new HoistWayDataTable(ds.Tables["HoistWay"]));
                }
                if ((ds.Tables["CarInfo"] != null)) {
                    this.Tables.Add(new CarInfoDataTable(ds.Tables["CarInfo"]));
                }
                if ((ds.Tables["Parameter"] != null)) {
                    this.Tables.Add(new ParameterDataTable(ds.Tables["Parameter"]));
                }
                if ((ds.Tables["TSADelay"] != null)) {
                    this.Tables.Add(new TSADelayDataTable(ds.Tables["TSADelay"]));
                }
                if ((ds.Tables["TSACompress"] != null)) {
                    this.Tables.Add(new TSACompressDataTable(ds.Tables["TSACompress"]));
                }
                if ((ds.Tables["TSARestore"] != null)) {
                    this.Tables.Add(new TSARestoreDataTable(ds.Tables["TSARestore"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FloorHeightDataTable FloorHeight {
            get {
                return this.tableFloorHeight;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SqcUpperDataTable SqcUpper {
            get {
                return this.tableSqcUpper;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SqcLowerDataTable SqcLower {
            get {
                return this.tableSqcLower;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ocss_infoDataTable ocss_info {
            get {
                return this.tableocss_info;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public environmentDataTable environment {
            get {
                return this.tableenvironment;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public trafficDataTable traffic {
            get {
                return this.tabletraffic;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoistWayDataTable HoistWay {
            get {
                return this.tableHoistWay;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CarInfoDataTable CarInfo {
            get {
                return this.tableCarInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParameterDataTable Parameter {
            get {
                return this.tableParameter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSADelayDataTable TSADelay {
            get {
                return this.tableTSADelay;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSACompressDataTable TSACompress {
            get {
                return this.tableTSACompress;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSARestoreDataTable TSARestore {
            get {
                return this.tableTSARestore;
            }
        }
        
        public override DataSet Clone() {
            dsConfig cln = ((dsConfig)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FloorHeight"] != null)) {
                this.Tables.Add(new FloorHeightDataTable(ds.Tables["FloorHeight"]));
            }
            if ((ds.Tables["SqcUpper"] != null)) {
                this.Tables.Add(new SqcUpperDataTable(ds.Tables["SqcUpper"]));
            }
            if ((ds.Tables["SqcLower"] != null)) {
                this.Tables.Add(new SqcLowerDataTable(ds.Tables["SqcLower"]));
            }
            if ((ds.Tables["ocss_info"] != null)) {
                this.Tables.Add(new ocss_infoDataTable(ds.Tables["ocss_info"]));
            }
            if ((ds.Tables["environment"] != null)) {
                this.Tables.Add(new environmentDataTable(ds.Tables["environment"]));
            }
            if ((ds.Tables["traffic"] != null)) {
                this.Tables.Add(new trafficDataTable(ds.Tables["traffic"]));
            }
            if ((ds.Tables["HoistWay"] != null)) {
                this.Tables.Add(new HoistWayDataTable(ds.Tables["HoistWay"]));
            }
            if ((ds.Tables["CarInfo"] != null)) {
                this.Tables.Add(new CarInfoDataTable(ds.Tables["CarInfo"]));
            }
            if ((ds.Tables["Parameter"] != null)) {
                this.Tables.Add(new ParameterDataTable(ds.Tables["Parameter"]));
            }
            if ((ds.Tables["TSADelay"] != null)) {
                this.Tables.Add(new TSADelayDataTable(ds.Tables["TSADelay"]));
            }
            if ((ds.Tables["TSACompress"] != null)) {
                this.Tables.Add(new TSACompressDataTable(ds.Tables["TSACompress"]));
            }
            if ((ds.Tables["TSARestore"] != null)) {
                this.Tables.Add(new TSARestoreDataTable(ds.Tables["TSARestore"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFloorHeight = ((FloorHeightDataTable)(this.Tables["FloorHeight"]));
            if ((this.tableFloorHeight != null)) {
                this.tableFloorHeight.InitVars();
            }
            this.tableSqcUpper = ((SqcUpperDataTable)(this.Tables["SqcUpper"]));
            if ((this.tableSqcUpper != null)) {
                this.tableSqcUpper.InitVars();
            }
            this.tableSqcLower = ((SqcLowerDataTable)(this.Tables["SqcLower"]));
            if ((this.tableSqcLower != null)) {
                this.tableSqcLower.InitVars();
            }
            this.tableocss_info = ((ocss_infoDataTable)(this.Tables["ocss_info"]));
            if ((this.tableocss_info != null)) {
                this.tableocss_info.InitVars();
            }
            this.tableenvironment = ((environmentDataTable)(this.Tables["environment"]));
            if ((this.tableenvironment != null)) {
                this.tableenvironment.InitVars();
            }
            this.tabletraffic = ((trafficDataTable)(this.Tables["traffic"]));
            if ((this.tabletraffic != null)) {
                this.tabletraffic.InitVars();
            }
            this.tableHoistWay = ((HoistWayDataTable)(this.Tables["HoistWay"]));
            if ((this.tableHoistWay != null)) {
                this.tableHoistWay.InitVars();
            }
            this.tableCarInfo = ((CarInfoDataTable)(this.Tables["CarInfo"]));
            if ((this.tableCarInfo != null)) {
                this.tableCarInfo.InitVars();
            }
            this.tableParameter = ((ParameterDataTable)(this.Tables["Parameter"]));
            if ((this.tableParameter != null)) {
                this.tableParameter.InitVars();
            }
            this.tableTSADelay = ((TSADelayDataTable)(this.Tables["TSADelay"]));
            if ((this.tableTSADelay != null)) {
                this.tableTSADelay.InitVars();
            }
            this.tableTSACompress = ((TSACompressDataTable)(this.Tables["TSACompress"]));
            if ((this.tableTSACompress != null)) {
                this.tableTSACompress.InitVars();
            }
            this.tableTSARestore = ((TSARestoreDataTable)(this.Tables["TSARestore"]));
            if ((this.tableTSARestore != null)) {
                this.tableTSARestore.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsConfig";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsConfig.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFloorHeight = new FloorHeightDataTable();
            this.Tables.Add(this.tableFloorHeight);
            this.tableSqcUpper = new SqcUpperDataTable();
            this.Tables.Add(this.tableSqcUpper);
            this.tableSqcLower = new SqcLowerDataTable();
            this.Tables.Add(this.tableSqcLower);
            this.tableocss_info = new ocss_infoDataTable();
            this.Tables.Add(this.tableocss_info);
            this.tableenvironment = new environmentDataTable();
            this.Tables.Add(this.tableenvironment);
            this.tabletraffic = new trafficDataTable();
            this.Tables.Add(this.tabletraffic);
            this.tableHoistWay = new HoistWayDataTable();
            this.Tables.Add(this.tableHoistWay);
            this.tableCarInfo = new CarInfoDataTable();
            this.Tables.Add(this.tableCarInfo);
            this.tableParameter = new ParameterDataTable();
            this.Tables.Add(this.tableParameter);
            this.tableTSADelay = new TSADelayDataTable();
            this.Tables.Add(this.tableTSADelay);
            this.tableTSACompress = new TSACompressDataTable();
            this.Tables.Add(this.tableTSACompress);
            this.tableTSARestore = new TSARestoreDataTable();
            this.Tables.Add(this.tableTSARestore);
        }
        
        private bool ShouldSerializeFloorHeight() {
            return false;
        }
        
        private bool ShouldSerializeSqcUpper() {
            return false;
        }
        
        private bool ShouldSerializeSqcLower() {
            return false;
        }
        
        private bool ShouldSerializeocss_info() {
            return false;
        }
        
        private bool ShouldSerializeenvironment() {
            return false;
        }
        
        private bool ShouldSerializetraffic() {
            return false;
        }
        
        private bool ShouldSerializeHoistWay() {
            return false;
        }
        
        private bool ShouldSerializeCarInfo() {
            return false;
        }
        
        private bool ShouldSerializeParameter() {
            return false;
        }
        
        private bool ShouldSerializeTSADelay() {
            return false;
        }
        
        private bool ShouldSerializeTSACompress() {
            return false;
        }
        
        private bool ShouldSerializeTSARestore() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FloorHeightRowChangeEventHandler(object sender, FloorHeightRowChangeEvent e);
        
        public delegate void SqcUpperRowChangeEventHandler(object sender, SqcUpperRowChangeEvent e);
        
        public delegate void SqcLowerRowChangeEventHandler(object sender, SqcLowerRowChangeEvent e);
        
        public delegate void ocss_infoRowChangeEventHandler(object sender, ocss_infoRowChangeEvent e);
        
        public delegate void environmentRowChangeEventHandler(object sender, environmentRowChangeEvent e);
        
        public delegate void trafficRowChangeEventHandler(object sender, trafficRowChangeEvent e);
        
        public delegate void HoistWayRowChangeEventHandler(object sender, HoistWayRowChangeEvent e);
        
        public delegate void CarInfoRowChangeEventHandler(object sender, CarInfoRowChangeEvent e);
        
        public delegate void ParameterRowChangeEventHandler(object sender, ParameterRowChangeEvent e);
        
        public delegate void TSADelayRowChangeEventHandler(object sender, TSADelayRowChangeEvent e);
        
        public delegate void TSACompressRowChangeEventHandler(object sender, TSACompressRowChangeEvent e);
        
        public delegate void TSARestoreRowChangeEventHandler(object sender, TSARestoreRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FloorHeightDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLabel;
            
            private DataColumn columnHeight;
            
            private DataColumn columnPosition;
            
            internal FloorHeightDataTable() : 
                    base("FloorHeight") {
                this.InitClass();
            }
            
            internal FloorHeightDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            internal DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            internal DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            public FloorHeightRow this[int index] {
                get {
                    return ((FloorHeightRow)(this.Rows[index]));
                }
            }
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowChanged;
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowChanging;
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowDeleted;
            
            public event FloorHeightRowChangeEventHandler FloorHeightRowDeleting;
            
            public void AddFloorHeightRow(FloorHeightRow row) {
                this.Rows.Add(row);
            }
            
            public FloorHeightRow AddFloorHeightRow(string Label, int Height, int Position) {
                FloorHeightRow rowFloorHeightRow = ((FloorHeightRow)(this.NewRow()));
                rowFloorHeightRow.ItemArray = new object[] {
                        Label,
                        Height,
                        Position};
                this.Rows.Add(rowFloorHeightRow);
                return rowFloorHeightRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FloorHeightDataTable cln = ((FloorHeightDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FloorHeightDataTable();
            }
            
            internal void InitVars() {
                this.columnLabel = this.Columns["Label"];
                this.columnHeight = this.Columns["Height"];
                this.columnPosition = this.Columns["Position"];
            }
            
            private void InitClass() {
                this.columnLabel = new DataColumn("Label", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabel);
                this.columnHeight = new DataColumn("Height", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeight);
                this.columnPosition = new DataColumn("Position", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPosition);
            }
            
            public FloorHeightRow NewFloorHeightRow() {
                return ((FloorHeightRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FloorHeightRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FloorHeightRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FloorHeightRowChanged != null)) {
                    this.FloorHeightRowChanged(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FloorHeightRowChanging != null)) {
                    this.FloorHeightRowChanging(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FloorHeightRowDeleted != null)) {
                    this.FloorHeightRowDeleted(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FloorHeightRowDeleting != null)) {
                    this.FloorHeightRowDeleting(this, new FloorHeightRowChangeEvent(((FloorHeightRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFloorHeightRow(FloorHeightRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FloorHeightRow : DataRow {
            
            private FloorHeightDataTable tableFloorHeight;
            
            internal FloorHeightRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFloorHeight = ((FloorHeightDataTable)(this.Table));
            }
            
            public string Label {
                get {
                    try {
                        return ((string)(this[this.tableFloorHeight.LabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableFloorHeight.LabelColumn] = value;
                }
            }
            
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tableFloorHeight.HeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableFloorHeight.HeightColumn] = value;
                }
            }
            
            public int Position {
                get {
                    try {
                        return ((int)(this[this.tableFloorHeight.PositionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableFloorHeight.PositionColumn] = value;
                }
            }
            
            public bool IsLabelNull() {
                return this.IsNull(this.tableFloorHeight.LabelColumn);
            }
            
            public void SetLabelNull() {
                this[this.tableFloorHeight.LabelColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeightNull() {
                return this.IsNull(this.tableFloorHeight.HeightColumn);
            }
            
            public void SetHeightNull() {
                this[this.tableFloorHeight.HeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsPositionNull() {
                return this.IsNull(this.tableFloorHeight.PositionColumn);
            }
            
            public void SetPositionNull() {
                this[this.tableFloorHeight.PositionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FloorHeightRowChangeEvent : EventArgs {
            
            private FloorHeightRow eventRow;
            
            private DataRowAction eventAction;
            
            public FloorHeightRowChangeEvent(FloorHeightRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FloorHeightRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqcUpperDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFloor;
            
            private DataColumn columnTimeOffset;
            
            internal SqcUpperDataTable() : 
                    base("SqcUpper") {
                this.InitClass();
            }
            
            internal SqcUpperDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FloorColumn {
                get {
                    return this.columnFloor;
                }
            }
            
            internal DataColumn TimeOffsetColumn {
                get {
                    return this.columnTimeOffset;
                }
            }
            
            public SqcUpperRow this[int index] {
                get {
                    return ((SqcUpperRow)(this.Rows[index]));
                }
            }
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowChanged;
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowChanging;
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowDeleted;
            
            public event SqcUpperRowChangeEventHandler SqcUpperRowDeleting;
            
            public void AddSqcUpperRow(SqcUpperRow row) {
                this.Rows.Add(row);
            }
            
            public SqcUpperRow AddSqcUpperRow(string Floor, string TimeOffset) {
                SqcUpperRow rowSqcUpperRow = ((SqcUpperRow)(this.NewRow()));
                rowSqcUpperRow.ItemArray = new object[] {
                        Floor,
                        TimeOffset};
                this.Rows.Add(rowSqcUpperRow);
                return rowSqcUpperRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SqcUpperDataTable cln = ((SqcUpperDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SqcUpperDataTable();
            }
            
            internal void InitVars() {
                this.columnFloor = this.Columns["Floor"];
                this.columnTimeOffset = this.Columns["TimeOffset"];
            }
            
            private void InitClass() {
                this.columnFloor = new DataColumn("Floor", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFloor);
                this.columnTimeOffset = new DataColumn("TimeOffset", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOffset);
            }
            
            public SqcUpperRow NewSqcUpperRow() {
                return ((SqcUpperRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SqcUpperRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SqcUpperRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SqcUpperRowChanged != null)) {
                    this.SqcUpperRowChanged(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SqcUpperRowChanging != null)) {
                    this.SqcUpperRowChanging(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SqcUpperRowDeleted != null)) {
                    this.SqcUpperRowDeleted(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SqcUpperRowDeleting != null)) {
                    this.SqcUpperRowDeleting(this, new SqcUpperRowChangeEvent(((SqcUpperRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSqcUpperRow(SqcUpperRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqcUpperRow : DataRow {
            
            private SqcUpperDataTable tableSqcUpper;
            
            internal SqcUpperRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSqcUpper = ((SqcUpperDataTable)(this.Table));
            }
            
            public string Floor {
                get {
                    try {
                        return ((string)(this[this.tableSqcUpper.FloorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableSqcUpper.FloorColumn] = value;
                }
            }
            
            public string TimeOffset {
                get {
                    try {
                        return ((string)(this[this.tableSqcUpper.TimeOffsetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableSqcUpper.TimeOffsetColumn] = value;
                }
            }
            
            public bool IsFloorNull() {
                return this.IsNull(this.tableSqcUpper.FloorColumn);
            }
            
            public void SetFloorNull() {
                this[this.tableSqcUpper.FloorColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOffsetNull() {
                return this.IsNull(this.tableSqcUpper.TimeOffsetColumn);
            }
            
            public void SetTimeOffsetNull() {
                this[this.tableSqcUpper.TimeOffsetColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqcUpperRowChangeEvent : EventArgs {
            
            private SqcUpperRow eventRow;
            
            private DataRowAction eventAction;
            
            public SqcUpperRowChangeEvent(SqcUpperRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SqcUpperRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqcLowerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFloor;
            
            private DataColumn columnTimeOffset;
            
            internal SqcLowerDataTable() : 
                    base("SqcLower") {
                this.InitClass();
            }
            
            internal SqcLowerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FloorColumn {
                get {
                    return this.columnFloor;
                }
            }
            
            internal DataColumn TimeOffsetColumn {
                get {
                    return this.columnTimeOffset;
                }
            }
            
            public SqcLowerRow this[int index] {
                get {
                    return ((SqcLowerRow)(this.Rows[index]));
                }
            }
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowChanged;
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowChanging;
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowDeleted;
            
            public event SqcLowerRowChangeEventHandler SqcLowerRowDeleting;
            
            public void AddSqcLowerRow(SqcLowerRow row) {
                this.Rows.Add(row);
            }
            
            public SqcLowerRow AddSqcLowerRow(string Floor, string TimeOffset) {
                SqcLowerRow rowSqcLowerRow = ((SqcLowerRow)(this.NewRow()));
                rowSqcLowerRow.ItemArray = new object[] {
                        Floor,
                        TimeOffset};
                this.Rows.Add(rowSqcLowerRow);
                return rowSqcLowerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SqcLowerDataTable cln = ((SqcLowerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SqcLowerDataTable();
            }
            
            internal void InitVars() {
                this.columnFloor = this.Columns["Floor"];
                this.columnTimeOffset = this.Columns["TimeOffset"];
            }
            
            private void InitClass() {
                this.columnFloor = new DataColumn("Floor", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFloor);
                this.columnTimeOffset = new DataColumn("TimeOffset", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOffset);
            }
            
            public SqcLowerRow NewSqcLowerRow() {
                return ((SqcLowerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SqcLowerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SqcLowerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SqcLowerRowChanged != null)) {
                    this.SqcLowerRowChanged(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SqcLowerRowChanging != null)) {
                    this.SqcLowerRowChanging(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SqcLowerRowDeleted != null)) {
                    this.SqcLowerRowDeleted(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SqcLowerRowDeleting != null)) {
                    this.SqcLowerRowDeleting(this, new SqcLowerRowChangeEvent(((SqcLowerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSqcLowerRow(SqcLowerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqcLowerRow : DataRow {
            
            private SqcLowerDataTable tableSqcLower;
            
            internal SqcLowerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSqcLower = ((SqcLowerDataTable)(this.Table));
            }
            
            public string Floor {
                get {
                    try {
                        return ((string)(this[this.tableSqcLower.FloorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableSqcLower.FloorColumn] = value;
                }
            }
            
            public string TimeOffset {
                get {
                    try {
                        return ((string)(this[this.tableSqcLower.TimeOffsetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableSqcLower.TimeOffsetColumn] = value;
                }
            }
            
            public bool IsFloorNull() {
                return this.IsNull(this.tableSqcLower.FloorColumn);
            }
            
            public void SetFloorNull() {
                this[this.tableSqcLower.FloorColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOffsetNull() {
                return this.IsNull(this.tableSqcLower.TimeOffsetColumn);
            }
            
            public void SetTimeOffsetNull() {
                this[this.tableSqcLower.TimeOffsetColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqcLowerRowChangeEvent : EventArgs {
            
            private SqcLowerRow eventRow;
            
            private DataRowAction eventAction;
            
            public SqcLowerRowChangeEvent(SqcLowerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SqcLowerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ocss_infoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVel;
            
            private DataColumn columnAcc;
            
            private DataColumn columnJerk;
            
            private DataColumn columnSafeG;
            
            internal ocss_infoDataTable() : 
                    base("ocss_info") {
                this.InitClass();
            }
            
            internal ocss_infoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VelColumn {
                get {
                    return this.columnVel;
                }
            }
            
            internal DataColumn AccColumn {
                get {
                    return this.columnAcc;
                }
            }
            
            internal DataColumn JerkColumn {
                get {
                    return this.columnJerk;
                }
            }
            
            internal DataColumn SafeGColumn {
                get {
                    return this.columnSafeG;
                }
            }
            
            public ocss_infoRow this[int index] {
                get {
                    return ((ocss_infoRow)(this.Rows[index]));
                }
            }
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowChanged;
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowChanging;
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowDeleted;
            
            public event ocss_infoRowChangeEventHandler ocss_infoRowDeleting;
            
            public void Addocss_infoRow(ocss_infoRow row) {
                this.Rows.Add(row);
            }
            
            public ocss_infoRow Addocss_infoRow(string Vel, string Acc, string Jerk, string SafeG) {
                ocss_infoRow rowocss_infoRow = ((ocss_infoRow)(this.NewRow()));
                rowocss_infoRow.ItemArray = new object[] {
                        Vel,
                        Acc,
                        Jerk,
                        SafeG};
                this.Rows.Add(rowocss_infoRow);
                return rowocss_infoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ocss_infoDataTable cln = ((ocss_infoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ocss_infoDataTable();
            }
            
            internal void InitVars() {
                this.columnVel = this.Columns["Vel"];
                this.columnAcc = this.Columns["Acc"];
                this.columnJerk = this.Columns["Jerk"];
                this.columnSafeG = this.Columns["SafeG"];
            }
            
            private void InitClass() {
                this.columnVel = new DataColumn("Vel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVel);
                this.columnAcc = new DataColumn("Acc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAcc);
                this.columnJerk = new DataColumn("Jerk", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJerk);
                this.columnSafeG = new DataColumn("SafeG", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSafeG);
            }
            
            public ocss_infoRow Newocss_infoRow() {
                return ((ocss_infoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ocss_infoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ocss_infoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ocss_infoRowChanged != null)) {
                    this.ocss_infoRowChanged(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ocss_infoRowChanging != null)) {
                    this.ocss_infoRowChanging(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ocss_infoRowDeleted != null)) {
                    this.ocss_infoRowDeleted(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ocss_infoRowDeleting != null)) {
                    this.ocss_infoRowDeleting(this, new ocss_infoRowChangeEvent(((ocss_infoRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeocss_infoRow(ocss_infoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ocss_infoRow : DataRow {
            
            private ocss_infoDataTable tableocss_info;
            
            internal ocss_infoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableocss_info = ((ocss_infoDataTable)(this.Table));
            }
            
            public string Vel {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.VelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.VelColumn] = value;
                }
            }
            
            public string Acc {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.AccColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.AccColumn] = value;
                }
            }
            
            public string Jerk {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.JerkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.JerkColumn] = value;
                }
            }
            
            public string SafeG {
                get {
                    try {
                        return ((string)(this[this.tableocss_info.SafeGColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableocss_info.SafeGColumn] = value;
                }
            }
            
            public bool IsVelNull() {
                return this.IsNull(this.tableocss_info.VelColumn);
            }
            
            public void SetVelNull() {
                this[this.tableocss_info.VelColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccNull() {
                return this.IsNull(this.tableocss_info.AccColumn);
            }
            
            public void SetAccNull() {
                this[this.tableocss_info.AccColumn] = System.Convert.DBNull;
            }
            
            public bool IsJerkNull() {
                return this.IsNull(this.tableocss_info.JerkColumn);
            }
            
            public void SetJerkNull() {
                this[this.tableocss_info.JerkColumn] = System.Convert.DBNull;
            }
            
            public bool IsSafeGNull() {
                return this.IsNull(this.tableocss_info.SafeGColumn);
            }
            
            public void SetSafeGNull() {
                this[this.tableocss_info.SafeGColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ocss_infoRowChangeEvent : EventArgs {
            
            private ocss_infoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ocss_infoRowChangeEvent(ocss_infoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ocss_infoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class environmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncarId;
            
            private DataColumn columnisChecked;
            
            internal environmentDataTable() : 
                    base("environment") {
                this.InitClass();
            }
            
            internal environmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn carIdColumn {
                get {
                    return this.columncarId;
                }
            }
            
            internal DataColumn isCheckedColumn {
                get {
                    return this.columnisChecked;
                }
            }
            
            public environmentRow this[int index] {
                get {
                    return ((environmentRow)(this.Rows[index]));
                }
            }
            
            public event environmentRowChangeEventHandler environmentRowChanged;
            
            public event environmentRowChangeEventHandler environmentRowChanging;
            
            public event environmentRowChangeEventHandler environmentRowDeleted;
            
            public event environmentRowChangeEventHandler environmentRowDeleting;
            
            public void AddenvironmentRow(environmentRow row) {
                this.Rows.Add(row);
            }
            
            public environmentRow AddenvironmentRow(int carId, bool isChecked) {
                environmentRow rowenvironmentRow = ((environmentRow)(this.NewRow()));
                rowenvironmentRow.ItemArray = new object[] {
                        carId,
                        isChecked};
                this.Rows.Add(rowenvironmentRow);
                return rowenvironmentRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                environmentDataTable cln = ((environmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new environmentDataTable();
            }
            
            internal void InitVars() {
                this.columncarId = this.Columns["carId"];
                this.columnisChecked = this.Columns["isChecked"];
            }
            
            private void InitClass() {
                this.columncarId = new DataColumn("carId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncarId);
                this.columnisChecked = new DataColumn("isChecked", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisChecked);
            }
            
            public environmentRow NewenvironmentRow() {
                return ((environmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new environmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(environmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.environmentRowChanged != null)) {
                    this.environmentRowChanged(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.environmentRowChanging != null)) {
                    this.environmentRowChanging(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.environmentRowDeleted != null)) {
                    this.environmentRowDeleted(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.environmentRowDeleting != null)) {
                    this.environmentRowDeleting(this, new environmentRowChangeEvent(((environmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveenvironmentRow(environmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class environmentRow : DataRow {
            
            private environmentDataTable tableenvironment;
            
            internal environmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableenvironment = ((environmentDataTable)(this.Table));
            }
            
            public int carId {
                get {
                    try {
                        return ((int)(this[this.tableenvironment.carIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableenvironment.carIdColumn] = value;
                }
            }
            
            public bool isChecked {
                get {
                    try {
                        return ((bool)(this[this.tableenvironment.isCheckedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableenvironment.isCheckedColumn] = value;
                }
            }
            
            public bool IscarIdNull() {
                return this.IsNull(this.tableenvironment.carIdColumn);
            }
            
            public void SetcarIdNull() {
                this[this.tableenvironment.carIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsisCheckedNull() {
                return this.IsNull(this.tableenvironment.isCheckedColumn);
            }
            
            public void SetisCheckedNull() {
                this[this.tableenvironment.isCheckedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class environmentRowChangeEvent : EventArgs {
            
            private environmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public environmentRowChangeEvent(environmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public environmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class trafficDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntime;
            
            private DataColumn columnpos;
            
            private DataColumn columndst;
            
            private DataColumn columncar;
            
            private DataColumn columnw_t;
            
            private DataColumn columns_t;
            
            internal trafficDataTable() : 
                    base("traffic") {
                this.InitClass();
            }
            
            internal trafficDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            internal DataColumn posColumn {
                get {
                    return this.columnpos;
                }
            }
            
            internal DataColumn dstColumn {
                get {
                    return this.columndst;
                }
            }
            
            internal DataColumn carColumn {
                get {
                    return this.columncar;
                }
            }
            
            internal DataColumn w_tColumn {
                get {
                    return this.columnw_t;
                }
            }
            
            internal DataColumn s_tColumn {
                get {
                    return this.columns_t;
                }
            }
            
            public trafficRow this[int index] {
                get {
                    return ((trafficRow)(this.Rows[index]));
                }
            }
            
            public event trafficRowChangeEventHandler trafficRowChanged;
            
            public event trafficRowChangeEventHandler trafficRowChanging;
            
            public event trafficRowChangeEventHandler trafficRowDeleted;
            
            public event trafficRowChangeEventHandler trafficRowDeleting;
            
            public void AddtrafficRow(trafficRow row) {
                this.Rows.Add(row);
            }
            
            public trafficRow AddtrafficRow(System.Double time, int pos, int dst, int car, System.Double w_t, System.Double s_t) {
                trafficRow rowtrafficRow = ((trafficRow)(this.NewRow()));
                rowtrafficRow.ItemArray = new object[] {
                        time,
                        pos,
                        dst,
                        car,
                        w_t,
                        s_t};
                this.Rows.Add(rowtrafficRow);
                return rowtrafficRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                trafficDataTable cln = ((trafficDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new trafficDataTable();
            }
            
            internal void InitVars() {
                this.columntime = this.Columns["time"];
                this.columnpos = this.Columns["pos"];
                this.columndst = this.Columns["dst"];
                this.columncar = this.Columns["car"];
                this.columnw_t = this.Columns["w_t"];
                this.columns_t = this.Columns["s_t"];
            }
            
            private void InitClass() {
                this.columntime = new DataColumn("time", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntime);
                this.columnpos = new DataColumn("pos", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpos);
                this.columndst = new DataColumn("dst", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndst);
                this.columncar = new DataColumn("car", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncar);
                this.columnw_t = new DataColumn("w_t", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnw_t);
                this.columns_t = new DataColumn("s_t", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columns_t);
            }
            
            public trafficRow NewtrafficRow() {
                return ((trafficRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new trafficRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(trafficRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.trafficRowChanged != null)) {
                    this.trafficRowChanged(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.trafficRowChanging != null)) {
                    this.trafficRowChanging(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.trafficRowDeleted != null)) {
                    this.trafficRowDeleted(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.trafficRowDeleting != null)) {
                    this.trafficRowDeleting(this, new trafficRowChangeEvent(((trafficRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetrafficRow(trafficRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class trafficRow : DataRow {
            
            private trafficDataTable tabletraffic;
            
            internal trafficRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletraffic = ((trafficDataTable)(this.Table));
            }
            
            public System.Double time {
                get {
                    try {
                        return ((System.Double)(this[this.tabletraffic.timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.timeColumn] = value;
                }
            }
            
            public int pos {
                get {
                    try {
                        return ((int)(this[this.tabletraffic.posColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.posColumn] = value;
                }
            }
            
            public int dst {
                get {
                    try {
                        return ((int)(this[this.tabletraffic.dstColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.dstColumn] = value;
                }
            }
            
            public int car {
                get {
                    try {
                        return ((int)(this[this.tabletraffic.carColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.carColumn] = value;
                }
            }
            
            public System.Double w_t {
                get {
                    try {
                        return ((System.Double)(this[this.tabletraffic.w_tColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.w_tColumn] = value;
                }
            }
            
            public System.Double s_t {
                get {
                    try {
                        return ((System.Double)(this[this.tabletraffic.s_tColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tabletraffic.s_tColumn] = value;
                }
            }
            
            public bool IstimeNull() {
                return this.IsNull(this.tabletraffic.timeColumn);
            }
            
            public void SettimeNull() {
                this[this.tabletraffic.timeColumn] = System.Convert.DBNull;
            }
            
            public bool IsposNull() {
                return this.IsNull(this.tabletraffic.posColumn);
            }
            
            public void SetposNull() {
                this[this.tabletraffic.posColumn] = System.Convert.DBNull;
            }
            
            public bool IsdstNull() {
                return this.IsNull(this.tabletraffic.dstColumn);
            }
            
            public void SetdstNull() {
                this[this.tabletraffic.dstColumn] = System.Convert.DBNull;
            }
            
            public bool IscarNull() {
                return this.IsNull(this.tabletraffic.carColumn);
            }
            
            public void SetcarNull() {
                this[this.tabletraffic.carColumn] = System.Convert.DBNull;
            }
            
            public bool Isw_tNull() {
                return this.IsNull(this.tabletraffic.w_tColumn);
            }
            
            public void Setw_tNull() {
                this[this.tabletraffic.w_tColumn] = System.Convert.DBNull;
            }
            
            public bool Iss_tNull() {
                return this.IsNull(this.tabletraffic.s_tColumn);
            }
            
            public void Sets_tNull() {
                this[this.tabletraffic.s_tColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class trafficRowChangeEvent : EventArgs {
            
            private trafficRow eventRow;
            
            private DataRowAction eventAction;
            
            public trafficRowChangeEvent(trafficRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public trafficRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HoistWayDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlowerCarId;
            
            private DataColumn columnupperCarId;
            
            internal HoistWayDataTable() : 
                    base("HoistWay") {
                this.InitClass();
            }
            
            internal HoistWayDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn lowerCarIdColumn {
                get {
                    return this.columnlowerCarId;
                }
            }
            
            internal DataColumn upperCarIdColumn {
                get {
                    return this.columnupperCarId;
                }
            }
            
            public HoistWayRow this[int index] {
                get {
                    return ((HoistWayRow)(this.Rows[index]));
                }
            }
            
            public event HoistWayRowChangeEventHandler HoistWayRowChanged;
            
            public event HoistWayRowChangeEventHandler HoistWayRowChanging;
            
            public event HoistWayRowChangeEventHandler HoistWayRowDeleted;
            
            public event HoistWayRowChangeEventHandler HoistWayRowDeleting;
            
            public void AddHoistWayRow(HoistWayRow row) {
                this.Rows.Add(row);
            }
            
            public HoistWayRow AddHoistWayRow(int lowerCarId, int upperCarId) {
                HoistWayRow rowHoistWayRow = ((HoistWayRow)(this.NewRow()));
                rowHoistWayRow.ItemArray = new object[] {
                        lowerCarId,
                        upperCarId};
                this.Rows.Add(rowHoistWayRow);
                return rowHoistWayRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HoistWayDataTable cln = ((HoistWayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HoistWayDataTable();
            }
            
            internal void InitVars() {
                this.columnlowerCarId = this.Columns["lowerCarId"];
                this.columnupperCarId = this.Columns["upperCarId"];
            }
            
            private void InitClass() {
                this.columnlowerCarId = new DataColumn("lowerCarId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlowerCarId);
                this.columnupperCarId = new DataColumn("upperCarId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnupperCarId);
            }
            
            public HoistWayRow NewHoistWayRow() {
                return ((HoistWayRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HoistWayRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HoistWayRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HoistWayRowChanged != null)) {
                    this.HoistWayRowChanged(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HoistWayRowChanging != null)) {
                    this.HoistWayRowChanging(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HoistWayRowDeleted != null)) {
                    this.HoistWayRowDeleted(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HoistWayRowDeleting != null)) {
                    this.HoistWayRowDeleting(this, new HoistWayRowChangeEvent(((HoistWayRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHoistWayRow(HoistWayRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HoistWayRow : DataRow {
            
            private HoistWayDataTable tableHoistWay;
            
            internal HoistWayRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHoistWay = ((HoistWayDataTable)(this.Table));
            }
            
            public int lowerCarId {
                get {
                    try {
                        return ((int)(this[this.tableHoistWay.lowerCarIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHoistWay.lowerCarIdColumn] = value;
                }
            }
            
            public int upperCarId {
                get {
                    try {
                        return ((int)(this[this.tableHoistWay.upperCarIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHoistWay.upperCarIdColumn] = value;
                }
            }
            
            public bool IslowerCarIdNull() {
                return this.IsNull(this.tableHoistWay.lowerCarIdColumn);
            }
            
            public void SetlowerCarIdNull() {
                this[this.tableHoistWay.lowerCarIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsupperCarIdNull() {
                return this.IsNull(this.tableHoistWay.upperCarIdColumn);
            }
            
            public void SetupperCarIdNull() {
                this[this.tableHoistWay.upperCarIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HoistWayRowChangeEvent : EventArgs {
            
            private HoistWayRow eventRow;
            
            private DataRowAction eventAction;
            
            public HoistWayRowChangeEvent(HoistWayRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HoistWayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmaxJerk;
            
            private DataColumn columnmaxAcceleration;
            
            private DataColumn columnmaxVelocity;
            
            private DataColumn columntDoorOpening;
            
            private DataColumn columntDoorClosing;
            
            private DataColumn columnboardingRatio;
            
            private DataColumn columncapacity;
            
            private DataColumn columnnDoors;
            
            private DataColumn columndoorWidth;
            
            private DataColumn columntStartDelay;
            
            private DataColumn columntStopDelay;
            
            private DataColumn columnAfd;
            
            internal CarInfoDataTable() : 
                    base("CarInfo") {
                this.InitClass();
            }
            
            internal CarInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn maxJerkColumn {
                get {
                    return this.columnmaxJerk;
                }
            }
            
            internal DataColumn maxAccelerationColumn {
                get {
                    return this.columnmaxAcceleration;
                }
            }
            
            internal DataColumn maxVelocityColumn {
                get {
                    return this.columnmaxVelocity;
                }
            }
            
            internal DataColumn tDoorOpeningColumn {
                get {
                    return this.columntDoorOpening;
                }
            }
            
            internal DataColumn tDoorClosingColumn {
                get {
                    return this.columntDoorClosing;
                }
            }
            
            internal DataColumn boardingRatioColumn {
                get {
                    return this.columnboardingRatio;
                }
            }
            
            internal DataColumn capacityColumn {
                get {
                    return this.columncapacity;
                }
            }
            
            internal DataColumn nDoorsColumn {
                get {
                    return this.columnnDoors;
                }
            }
            
            internal DataColumn doorWidthColumn {
                get {
                    return this.columndoorWidth;
                }
            }
            
            internal DataColumn tStartDelayColumn {
                get {
                    return this.columntStartDelay;
                }
            }
            
            internal DataColumn tStopDelayColumn {
                get {
                    return this.columntStopDelay;
                }
            }
            
            internal DataColumn AfdColumn {
                get {
                    return this.columnAfd;
                }
            }
            
            public CarInfoRow this[int index] {
                get {
                    return ((CarInfoRow)(this.Rows[index]));
                }
            }
            
            public event CarInfoRowChangeEventHandler CarInfoRowChanged;
            
            public event CarInfoRowChangeEventHandler CarInfoRowChanging;
            
            public event CarInfoRowChangeEventHandler CarInfoRowDeleted;
            
            public event CarInfoRowChangeEventHandler CarInfoRowDeleting;
            
            public void AddCarInfoRow(CarInfoRow row) {
                this.Rows.Add(row);
            }
            
            public CarInfoRow AddCarInfoRow(System.UInt16 maxJerk, System.UInt16 maxAcceleration, System.UInt16 maxVelocity, int tDoorOpening, int tDoorClosing, System.UInt16 boardingRatio, System.UInt16 capacity, System.Byte nDoors, System.UInt16 doorWidth, int tStartDelay, int tStopDelay, System.UInt16 Afd) {
                CarInfoRow rowCarInfoRow = ((CarInfoRow)(this.NewRow()));
                rowCarInfoRow.ItemArray = new object[] {
                        maxJerk,
                        maxAcceleration,
                        maxVelocity,
                        tDoorOpening,
                        tDoorClosing,
                        boardingRatio,
                        capacity,
                        nDoors,
                        doorWidth,
                        tStartDelay,
                        tStopDelay,
                        Afd};
                this.Rows.Add(rowCarInfoRow);
                return rowCarInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CarInfoDataTable cln = ((CarInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CarInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnmaxJerk = this.Columns["maxJerk"];
                this.columnmaxAcceleration = this.Columns["maxAcceleration"];
                this.columnmaxVelocity = this.Columns["maxVelocity"];
                this.columntDoorOpening = this.Columns["tDoorOpening"];
                this.columntDoorClosing = this.Columns["tDoorClosing"];
                this.columnboardingRatio = this.Columns["boardingRatio"];
                this.columncapacity = this.Columns["capacity"];
                this.columnnDoors = this.Columns["nDoors"];
                this.columndoorWidth = this.Columns["doorWidth"];
                this.columntStartDelay = this.Columns["tStartDelay"];
                this.columntStopDelay = this.Columns["tStopDelay"];
                this.columnAfd = this.Columns["Afd"];
            }
            
            private void InitClass() {
                this.columnmaxJerk = new DataColumn("maxJerk", typeof(System.UInt16), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxJerk);
                this.columnmaxAcceleration = new DataColumn("maxAcceleration", typeof(System.UInt16), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxAcceleration);
                this.columnmaxVelocity = new DataColumn("maxVelocity", typeof(System.UInt16), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxVelocity);
                this.columntDoorOpening = new DataColumn("tDoorOpening", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntDoorOpening);
                this.columntDoorClosing = new DataColumn("tDoorClosing", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntDoorClosing);
                this.columnboardingRatio = new DataColumn("boardingRatio", typeof(System.UInt16), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnboardingRatio);
                this.columncapacity = new DataColumn("capacity", typeof(System.UInt16), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncapacity);
                this.columnnDoors = new DataColumn("nDoors", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnDoors);
                this.columndoorWidth = new DataColumn("doorWidth", typeof(System.UInt16), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndoorWidth);
                this.columntStartDelay = new DataColumn("tStartDelay", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntStartDelay);
                this.columntStopDelay = new DataColumn("tStopDelay", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntStopDelay);
                this.columnAfd = new DataColumn("Afd", typeof(System.UInt16), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAfd);
            }
            
            public CarInfoRow NewCarInfoRow() {
                return ((CarInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CarInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CarInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CarInfoRowChanged != null)) {
                    this.CarInfoRowChanged(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CarInfoRowChanging != null)) {
                    this.CarInfoRowChanging(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CarInfoRowDeleted != null)) {
                    this.CarInfoRowDeleted(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CarInfoRowDeleting != null)) {
                    this.CarInfoRowDeleting(this, new CarInfoRowChangeEvent(((CarInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCarInfoRow(CarInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarInfoRow : DataRow {
            
            private CarInfoDataTable tableCarInfo;
            
            internal CarInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCarInfo = ((CarInfoDataTable)(this.Table));
            }
            
            public System.UInt16 maxJerk {
                get {
                    try {
                        return ((System.UInt16)(this[this.tableCarInfo.maxJerkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.maxJerkColumn] = value;
                }
            }
            
            public System.UInt16 maxAcceleration {
                get {
                    try {
                        return ((System.UInt16)(this[this.tableCarInfo.maxAccelerationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.maxAccelerationColumn] = value;
                }
            }
            
            public System.UInt16 maxVelocity {
                get {
                    try {
                        return ((System.UInt16)(this[this.tableCarInfo.maxVelocityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.maxVelocityColumn] = value;
                }
            }
            
            public int tDoorOpening {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tDoorOpeningColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tDoorOpeningColumn] = value;
                }
            }
            
            public int tDoorClosing {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tDoorClosingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tDoorClosingColumn] = value;
                }
            }
            
            public System.UInt16 boardingRatio {
                get {
                    try {
                        return ((System.UInt16)(this[this.tableCarInfo.boardingRatioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.boardingRatioColumn] = value;
                }
            }
            
            public System.UInt16 capacity {
                get {
                    try {
                        return ((System.UInt16)(this[this.tableCarInfo.capacityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.capacityColumn] = value;
                }
            }
            
            public System.Byte nDoors {
                get {
                    try {
                        return ((System.Byte)(this[this.tableCarInfo.nDoorsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.nDoorsColumn] = value;
                }
            }
            
            public System.UInt16 doorWidth {
                get {
                    try {
                        return ((System.UInt16)(this[this.tableCarInfo.doorWidthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.doorWidthColumn] = value;
                }
            }
            
            public int tStartDelay {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tStartDelayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tStartDelayColumn] = value;
                }
            }
            
            public int tStopDelay {
                get {
                    try {
                        return ((int)(this[this.tableCarInfo.tStopDelayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.tStopDelayColumn] = value;
                }
            }
            
            public System.UInt16 Afd {
                get {
                    try {
                        return ((System.UInt16)(this[this.tableCarInfo.AfdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCarInfo.AfdColumn] = value;
                }
            }
            
            public bool IsmaxJerkNull() {
                return this.IsNull(this.tableCarInfo.maxJerkColumn);
            }
            
            public void SetmaxJerkNull() {
                this[this.tableCarInfo.maxJerkColumn] = System.Convert.DBNull;
            }
            
            public bool IsmaxAccelerationNull() {
                return this.IsNull(this.tableCarInfo.maxAccelerationColumn);
            }
            
            public void SetmaxAccelerationNull() {
                this[this.tableCarInfo.maxAccelerationColumn] = System.Convert.DBNull;
            }
            
            public bool IsmaxVelocityNull() {
                return this.IsNull(this.tableCarInfo.maxVelocityColumn);
            }
            
            public void SetmaxVelocityNull() {
                this[this.tableCarInfo.maxVelocityColumn] = System.Convert.DBNull;
            }
            
            public bool IstDoorOpeningNull() {
                return this.IsNull(this.tableCarInfo.tDoorOpeningColumn);
            }
            
            public void SettDoorOpeningNull() {
                this[this.tableCarInfo.tDoorOpeningColumn] = System.Convert.DBNull;
            }
            
            public bool IstDoorClosingNull() {
                return this.IsNull(this.tableCarInfo.tDoorClosingColumn);
            }
            
            public void SettDoorClosingNull() {
                this[this.tableCarInfo.tDoorClosingColumn] = System.Convert.DBNull;
            }
            
            public bool IsboardingRatioNull() {
                return this.IsNull(this.tableCarInfo.boardingRatioColumn);
            }
            
            public void SetboardingRatioNull() {
                this[this.tableCarInfo.boardingRatioColumn] = System.Convert.DBNull;
            }
            
            public bool IscapacityNull() {
                return this.IsNull(this.tableCarInfo.capacityColumn);
            }
            
            public void SetcapacityNull() {
                this[this.tableCarInfo.capacityColumn] = System.Convert.DBNull;
            }
            
            public bool IsnDoorsNull() {
                return this.IsNull(this.tableCarInfo.nDoorsColumn);
            }
            
            public void SetnDoorsNull() {
                this[this.tableCarInfo.nDoorsColumn] = System.Convert.DBNull;
            }
            
            public bool IsdoorWidthNull() {
                return this.IsNull(this.tableCarInfo.doorWidthColumn);
            }
            
            public void SetdoorWidthNull() {
                this[this.tableCarInfo.doorWidthColumn] = System.Convert.DBNull;
            }
            
            public bool IstStartDelayNull() {
                return this.IsNull(this.tableCarInfo.tStartDelayColumn);
            }
            
            public void SettStartDelayNull() {
                this[this.tableCarInfo.tStartDelayColumn] = System.Convert.DBNull;
            }
            
            public bool IstStopDelayNull() {
                return this.IsNull(this.tableCarInfo.tStopDelayColumn);
            }
            
            public void SettStopDelayNull() {
                this[this.tableCarInfo.tStopDelayColumn] = System.Convert.DBNull;
            }
            
            public bool IsAfdNull() {
                return this.IsNull(this.tableCarInfo.AfdColumn);
            }
            
            public void SetAfdNull() {
                this[this.tableCarInfo.AfdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarInfoRowChangeEvent : EventArgs {
            
            private CarInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public CarInfoRowChangeEvent(CarInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CarInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ParameterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntCarMinDwell;
            
            private DataColumn columntHallMinDwell;
            
            private DataColumn columntHallMaxDwell;
            
            private DataColumn columntLobbyDwell;
            
            private DataColumn columntBoardingDeboardingTime;
            
            private DataColumn columnbReopenEnabled;
            
            private DataColumn columnLobby1Floor;
            
            private DataColumn columnLobby2Floor;
            
            private DataColumn columnLobby3Floor;
            
            internal ParameterDataTable() : 
                    base("Parameter") {
                this.InitClass();
            }
            
            internal ParameterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn tCarMinDwellColumn {
                get {
                    return this.columntCarMinDwell;
                }
            }
            
            internal DataColumn tHallMinDwellColumn {
                get {
                    return this.columntHallMinDwell;
                }
            }
            
            internal DataColumn tHallMaxDwellColumn {
                get {
                    return this.columntHallMaxDwell;
                }
            }
            
            internal DataColumn tLobbyDwellColumn {
                get {
                    return this.columntLobbyDwell;
                }
            }
            
            internal DataColumn tBoardingDeboardingTimeColumn {
                get {
                    return this.columntBoardingDeboardingTime;
                }
            }
            
            internal DataColumn bReopenEnabledColumn {
                get {
                    return this.columnbReopenEnabled;
                }
            }
            
            internal DataColumn Lobby1FloorColumn {
                get {
                    return this.columnLobby1Floor;
                }
            }
            
            internal DataColumn Lobby2FloorColumn {
                get {
                    return this.columnLobby2Floor;
                }
            }
            
            internal DataColumn Lobby3FloorColumn {
                get {
                    return this.columnLobby3Floor;
                }
            }
            
            public ParameterRow this[int index] {
                get {
                    return ((ParameterRow)(this.Rows[index]));
                }
            }
            
            public event ParameterRowChangeEventHandler ParameterRowChanged;
            
            public event ParameterRowChangeEventHandler ParameterRowChanging;
            
            public event ParameterRowChangeEventHandler ParameterRowDeleted;
            
            public event ParameterRowChangeEventHandler ParameterRowDeleting;
            
            public void AddParameterRow(ParameterRow row) {
                this.Rows.Add(row);
            }
            
            public ParameterRow AddParameterRow(int tCarMinDwell, int tHallMinDwell, int tHallMaxDwell, int tLobbyDwell, int tBoardingDeboardingTime, bool bReopenEnabled, System.SByte Lobby1Floor, System.Byte Lobby2Floor, System.Byte Lobby3Floor) {
                ParameterRow rowParameterRow = ((ParameterRow)(this.NewRow()));
                rowParameterRow.ItemArray = new object[] {
                        tCarMinDwell,
                        tHallMinDwell,
                        tHallMaxDwell,
                        tLobbyDwell,
                        tBoardingDeboardingTime,
                        bReopenEnabled,
                        Lobby1Floor,
                        Lobby2Floor,
                        Lobby3Floor};
                this.Rows.Add(rowParameterRow);
                return rowParameterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ParameterDataTable cln = ((ParameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ParameterDataTable();
            }
            
            internal void InitVars() {
                this.columntCarMinDwell = this.Columns["tCarMinDwell"];
                this.columntHallMinDwell = this.Columns["tHallMinDwell"];
                this.columntHallMaxDwell = this.Columns["tHallMaxDwell"];
                this.columntLobbyDwell = this.Columns["tLobbyDwell"];
                this.columntBoardingDeboardingTime = this.Columns["tBoardingDeboardingTime"];
                this.columnbReopenEnabled = this.Columns["bReopenEnabled"];
                this.columnLobby1Floor = this.Columns["Lobby1Floor"];
                this.columnLobby2Floor = this.Columns["Lobby2Floor"];
                this.columnLobby3Floor = this.Columns["Lobby3Floor"];
            }
            
            private void InitClass() {
                this.columntCarMinDwell = new DataColumn("tCarMinDwell", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntCarMinDwell);
                this.columntHallMinDwell = new DataColumn("tHallMinDwell", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntHallMinDwell);
                this.columntHallMaxDwell = new DataColumn("tHallMaxDwell", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntHallMaxDwell);
                this.columntLobbyDwell = new DataColumn("tLobbyDwell", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntLobbyDwell);
                this.columntBoardingDeboardingTime = new DataColumn("tBoardingDeboardingTime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntBoardingDeboardingTime);
                this.columnbReopenEnabled = new DataColumn("bReopenEnabled", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbReopenEnabled);
                this.columnLobby1Floor = new DataColumn("Lobby1Floor", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLobby1Floor);
                this.columnLobby2Floor = new DataColumn("Lobby2Floor", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLobby2Floor);
                this.columnLobby3Floor = new DataColumn("Lobby3Floor", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLobby3Floor);
            }
            
            public ParameterRow NewParameterRow() {
                return ((ParameterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ParameterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ParameterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParameterRowChanged != null)) {
                    this.ParameterRowChanged(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParameterRowChanging != null)) {
                    this.ParameterRowChanging(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParameterRowDeleted != null)) {
                    this.ParameterRowDeleted(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParameterRowDeleting != null)) {
                    this.ParameterRowDeleting(this, new ParameterRowChangeEvent(((ParameterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveParameterRow(ParameterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ParameterRow : DataRow {
            
            private ParameterDataTable tableParameter;
            
            internal ParameterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableParameter = ((ParameterDataTable)(this.Table));
            }
            
            public int tCarMinDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tCarMinDwellColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tCarMinDwellColumn] = value;
                }
            }
            
            public int tHallMinDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tHallMinDwellColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tHallMinDwellColumn] = value;
                }
            }
            
            public int tHallMaxDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tHallMaxDwellColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tHallMaxDwellColumn] = value;
                }
            }
            
            public int tLobbyDwell {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tLobbyDwellColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tLobbyDwellColumn] = value;
                }
            }
            
            public int tBoardingDeboardingTime {
                get {
                    try {
                        return ((int)(this[this.tableParameter.tBoardingDeboardingTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.tBoardingDeboardingTimeColumn] = value;
                }
            }
            
            public bool bReopenEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableParameter.bReopenEnabledColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.bReopenEnabledColumn] = value;
                }
            }
            
            public System.SByte Lobby1Floor {
                get {
                    try {
                        return ((System.SByte)(this[this.tableParameter.Lobby1FloorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.Lobby1FloorColumn] = value;
                }
            }
            
            public System.Byte Lobby2Floor {
                get {
                    try {
                        return ((System.Byte)(this[this.tableParameter.Lobby2FloorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.Lobby2FloorColumn] = value;
                }
            }
            
            public System.Byte Lobby3Floor {
                get {
                    try {
                        return ((System.Byte)(this[this.tableParameter.Lobby3FloorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableParameter.Lobby3FloorColumn] = value;
                }
            }
            
            public bool IstCarMinDwellNull() {
                return this.IsNull(this.tableParameter.tCarMinDwellColumn);
            }
            
            public void SettCarMinDwellNull() {
                this[this.tableParameter.tCarMinDwellColumn] = System.Convert.DBNull;
            }
            
            public bool IstHallMinDwellNull() {
                return this.IsNull(this.tableParameter.tHallMinDwellColumn);
            }
            
            public void SettHallMinDwellNull() {
                this[this.tableParameter.tHallMinDwellColumn] = System.Convert.DBNull;
            }
            
            public bool IstHallMaxDwellNull() {
                return this.IsNull(this.tableParameter.tHallMaxDwellColumn);
            }
            
            public void SettHallMaxDwellNull() {
                this[this.tableParameter.tHallMaxDwellColumn] = System.Convert.DBNull;
            }
            
            public bool IstLobbyDwellNull() {
                return this.IsNull(this.tableParameter.tLobbyDwellColumn);
            }
            
            public void SettLobbyDwellNull() {
                this[this.tableParameter.tLobbyDwellColumn] = System.Convert.DBNull;
            }
            
            public bool IstBoardingDeboardingTimeNull() {
                return this.IsNull(this.tableParameter.tBoardingDeboardingTimeColumn);
            }
            
            public void SettBoardingDeboardingTimeNull() {
                this[this.tableParameter.tBoardingDeboardingTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsbReopenEnabledNull() {
                return this.IsNull(this.tableParameter.bReopenEnabledColumn);
            }
            
            public void SetbReopenEnabledNull() {
                this[this.tableParameter.bReopenEnabledColumn] = System.Convert.DBNull;
            }
            
            public bool IsLobby1FloorNull() {
                return this.IsNull(this.tableParameter.Lobby1FloorColumn);
            }
            
            public void SetLobby1FloorNull() {
                this[this.tableParameter.Lobby1FloorColumn] = System.Convert.DBNull;
            }
            
            public bool IsLobby2FloorNull() {
                return this.IsNull(this.tableParameter.Lobby2FloorColumn);
            }
            
            public void SetLobby2FloorNull() {
                this[this.tableParameter.Lobby2FloorColumn] = System.Convert.DBNull;
            }
            
            public bool IsLobby3FloorNull() {
                return this.IsNull(this.tableParameter.Lobby3FloorColumn);
            }
            
            public void SetLobby3FloorNull() {
                this[this.tableParameter.Lobby3FloorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ParameterRowChangeEvent : EventArgs {
            
            private ParameterRow eventRow;
            
            private DataRowAction eventAction;
            
            public ParameterRowChangeEvent(ParameterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ParameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSADelayDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTDLODist;
            
            private DataColumn columnleadTrv;
            
            private DataColumn columntrailTrv;
            
            private DataColumn columndelay;
            
            internal TSADelayDataTable() : 
                    base("TSADelay") {
                this.InitClass();
            }
            
            internal TSADelayDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TDLODistColumn {
                get {
                    return this.columnTDLODist;
                }
            }
            
            internal DataColumn leadTrvColumn {
                get {
                    return this.columnleadTrv;
                }
            }
            
            internal DataColumn trailTrvColumn {
                get {
                    return this.columntrailTrv;
                }
            }
            
            internal DataColumn delayColumn {
                get {
                    return this.columndelay;
                }
            }
            
            public TSADelayRow this[int index] {
                get {
                    return ((TSADelayRow)(this.Rows[index]));
                }
            }
            
            public event TSADelayRowChangeEventHandler TSADelayRowChanged;
            
            public event TSADelayRowChangeEventHandler TSADelayRowChanging;
            
            public event TSADelayRowChangeEventHandler TSADelayRowDeleted;
            
            public event TSADelayRowChangeEventHandler TSADelayRowDeleting;
            
            public void AddTSADelayRow(TSADelayRow row) {
                this.Rows.Add(row);
            }
            
            public TSADelayRow AddTSADelayRow(int TDLODist, int leadTrv, int trailTrv, int delay) {
                TSADelayRow rowTSADelayRow = ((TSADelayRow)(this.NewRow()));
                rowTSADelayRow.ItemArray = new object[] {
                        TDLODist,
                        leadTrv,
                        trailTrv,
                        delay};
                this.Rows.Add(rowTSADelayRow);
                return rowTSADelayRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TSADelayDataTable cln = ((TSADelayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TSADelayDataTable();
            }
            
            internal void InitVars() {
                this.columnTDLODist = this.Columns["TDLODist"];
                this.columnleadTrv = this.Columns["leadTrv"];
                this.columntrailTrv = this.Columns["trailTrv"];
                this.columndelay = this.Columns["delay"];
            }
            
            private void InitClass() {
                this.columnTDLODist = new DataColumn("TDLODist", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTDLODist);
                this.columnleadTrv = new DataColumn("leadTrv", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnleadTrv);
                this.columntrailTrv = new DataColumn("trailTrv", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntrailTrv);
                this.columndelay = new DataColumn("delay", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndelay);
            }
            
            public TSADelayRow NewTSADelayRow() {
                return ((TSADelayRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TSADelayRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TSADelayRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSADelayRowChanged != null)) {
                    this.TSADelayRowChanged(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSADelayRowChanging != null)) {
                    this.TSADelayRowChanging(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSADelayRowDeleted != null)) {
                    this.TSADelayRowDeleted(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSADelayRowDeleting != null)) {
                    this.TSADelayRowDeleting(this, new TSADelayRowChangeEvent(((TSADelayRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTSADelayRow(TSADelayRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSADelayRow : DataRow {
            
            private TSADelayDataTable tableTSADelay;
            
            internal TSADelayRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSADelay = ((TSADelayDataTable)(this.Table));
            }
            
            public int TDLODist {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.TDLODistColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.TDLODistColumn] = value;
                }
            }
            
            public int leadTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.leadTrvColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.leadTrvColumn] = value;
                }
            }
            
            public int trailTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.trailTrvColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.trailTrvColumn] = value;
                }
            }
            
            public int delay {
                get {
                    try {
                        return ((int)(this[this.tableTSADelay.delayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSADelay.delayColumn] = value;
                }
            }
            
            public bool IsTDLODistNull() {
                return this.IsNull(this.tableTSADelay.TDLODistColumn);
            }
            
            public void SetTDLODistNull() {
                this[this.tableTSADelay.TDLODistColumn] = System.Convert.DBNull;
            }
            
            public bool IsleadTrvNull() {
                return this.IsNull(this.tableTSADelay.leadTrvColumn);
            }
            
            public void SetleadTrvNull() {
                this[this.tableTSADelay.leadTrvColumn] = System.Convert.DBNull;
            }
            
            public bool IstrailTrvNull() {
                return this.IsNull(this.tableTSADelay.trailTrvColumn);
            }
            
            public void SettrailTrvNull() {
                this[this.tableTSADelay.trailTrvColumn] = System.Convert.DBNull;
            }
            
            public bool IsdelayNull() {
                return this.IsNull(this.tableTSADelay.delayColumn);
            }
            
            public void SetdelayNull() {
                this[this.tableTSADelay.delayColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSADelayRowChangeEvent : EventArgs {
            
            private TSADelayRow eventRow;
            
            private DataRowAction eventAction;
            
            public TSADelayRowChangeEvent(TSADelayRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TSADelayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSACompressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTDLODist;
            
            private DataColumn columnleadTrv;
            
            private DataColumn columntrailTrv;
            
            private DataColumn columndelay;
            
            private DataColumn columntype;
            
            internal TSACompressDataTable() : 
                    base("TSACompress") {
                this.InitClass();
            }
            
            internal TSACompressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TDLODistColumn {
                get {
                    return this.columnTDLODist;
                }
            }
            
            internal DataColumn leadTrvColumn {
                get {
                    return this.columnleadTrv;
                }
            }
            
            internal DataColumn trailTrvColumn {
                get {
                    return this.columntrailTrv;
                }
            }
            
            internal DataColumn delayColumn {
                get {
                    return this.columndelay;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            public TSACompressRow this[int index] {
                get {
                    return ((TSACompressRow)(this.Rows[index]));
                }
            }
            
            public event TSACompressRowChangeEventHandler TSACompressRowChanged;
            
            public event TSACompressRowChangeEventHandler TSACompressRowChanging;
            
            public event TSACompressRowChangeEventHandler TSACompressRowDeleted;
            
            public event TSACompressRowChangeEventHandler TSACompressRowDeleting;
            
            public void AddTSACompressRow(TSACompressRow row) {
                this.Rows.Add(row);
            }
            
            public TSACompressRow AddTSACompressRow(int TDLODist, int leadTrv, int trailTrv, int delay, int type) {
                TSACompressRow rowTSACompressRow = ((TSACompressRow)(this.NewRow()));
                rowTSACompressRow.ItemArray = new object[] {
                        TDLODist,
                        leadTrv,
                        trailTrv,
                        delay,
                        type};
                this.Rows.Add(rowTSACompressRow);
                return rowTSACompressRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TSACompressDataTable cln = ((TSACompressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TSACompressDataTable();
            }
            
            internal void InitVars() {
                this.columnTDLODist = this.Columns["TDLODist"];
                this.columnleadTrv = this.Columns["leadTrv"];
                this.columntrailTrv = this.Columns["trailTrv"];
                this.columndelay = this.Columns["delay"];
                this.columntype = this.Columns["type"];
            }
            
            private void InitClass() {
                this.columnTDLODist = new DataColumn("TDLODist", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTDLODist);
                this.columnleadTrv = new DataColumn("leadTrv", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnleadTrv);
                this.columntrailTrv = new DataColumn("trailTrv", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntrailTrv);
                this.columndelay = new DataColumn("delay", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndelay);
                this.columntype = new DataColumn("type", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
            }
            
            public TSACompressRow NewTSACompressRow() {
                return ((TSACompressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TSACompressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TSACompressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSACompressRowChanged != null)) {
                    this.TSACompressRowChanged(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSACompressRowChanging != null)) {
                    this.TSACompressRowChanging(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSACompressRowDeleted != null)) {
                    this.TSACompressRowDeleted(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSACompressRowDeleting != null)) {
                    this.TSACompressRowDeleting(this, new TSACompressRowChangeEvent(((TSACompressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTSACompressRow(TSACompressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSACompressRow : DataRow {
            
            private TSACompressDataTable tableTSACompress;
            
            internal TSACompressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSACompress = ((TSACompressDataTable)(this.Table));
            }
            
            public int TDLODist {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.TDLODistColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.TDLODistColumn] = value;
                }
            }
            
            public int leadTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.leadTrvColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.leadTrvColumn] = value;
                }
            }
            
            public int trailTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.trailTrvColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.trailTrvColumn] = value;
                }
            }
            
            public int delay {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.delayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.delayColumn] = value;
                }
            }
            
            public int type {
                get {
                    try {
                        return ((int)(this[this.tableTSACompress.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSACompress.typeColumn] = value;
                }
            }
            
            public bool IsTDLODistNull() {
                return this.IsNull(this.tableTSACompress.TDLODistColumn);
            }
            
            public void SetTDLODistNull() {
                this[this.tableTSACompress.TDLODistColumn] = System.Convert.DBNull;
            }
            
            public bool IsleadTrvNull() {
                return this.IsNull(this.tableTSACompress.leadTrvColumn);
            }
            
            public void SetleadTrvNull() {
                this[this.tableTSACompress.leadTrvColumn] = System.Convert.DBNull;
            }
            
            public bool IstrailTrvNull() {
                return this.IsNull(this.tableTSACompress.trailTrvColumn);
            }
            
            public void SettrailTrvNull() {
                this[this.tableTSACompress.trailTrvColumn] = System.Convert.DBNull;
            }
            
            public bool IsdelayNull() {
                return this.IsNull(this.tableTSACompress.delayColumn);
            }
            
            public void SetdelayNull() {
                this[this.tableTSACompress.delayColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableTSACompress.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableTSACompress.typeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSACompressRowChangeEvent : EventArgs {
            
            private TSACompressRow eventRow;
            
            private DataRowAction eventAction;
            
            public TSACompressRowChangeEvent(TSACompressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TSACompressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSARestoreDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTDLODist;
            
            private DataColumn columnleadTrv;
            
            private DataColumn columntrailTrv;
            
            private DataColumn columndelay;
            
            internal TSARestoreDataTable() : 
                    base("TSARestore") {
                this.InitClass();
            }
            
            internal TSARestoreDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TDLODistColumn {
                get {
                    return this.columnTDLODist;
                }
            }
            
            internal DataColumn leadTrvColumn {
                get {
                    return this.columnleadTrv;
                }
            }
            
            internal DataColumn trailTrvColumn {
                get {
                    return this.columntrailTrv;
                }
            }
            
            internal DataColumn delayColumn {
                get {
                    return this.columndelay;
                }
            }
            
            public TSARestoreRow this[int index] {
                get {
                    return ((TSARestoreRow)(this.Rows[index]));
                }
            }
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowChanged;
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowChanging;
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowDeleted;
            
            public event TSARestoreRowChangeEventHandler TSARestoreRowDeleting;
            
            public void AddTSARestoreRow(TSARestoreRow row) {
                this.Rows.Add(row);
            }
            
            public TSARestoreRow AddTSARestoreRow(int TDLODist, int leadTrv, int trailTrv, int delay) {
                TSARestoreRow rowTSARestoreRow = ((TSARestoreRow)(this.NewRow()));
                rowTSARestoreRow.ItemArray = new object[] {
                        TDLODist,
                        leadTrv,
                        trailTrv,
                        delay};
                this.Rows.Add(rowTSARestoreRow);
                return rowTSARestoreRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TSARestoreDataTable cln = ((TSARestoreDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TSARestoreDataTable();
            }
            
            internal void InitVars() {
                this.columnTDLODist = this.Columns["TDLODist"];
                this.columnleadTrv = this.Columns["leadTrv"];
                this.columntrailTrv = this.Columns["trailTrv"];
                this.columndelay = this.Columns["delay"];
            }
            
            private void InitClass() {
                this.columnTDLODist = new DataColumn("TDLODist", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTDLODist);
                this.columnleadTrv = new DataColumn("leadTrv", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnleadTrv);
                this.columntrailTrv = new DataColumn("trailTrv", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntrailTrv);
                this.columndelay = new DataColumn("delay", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndelay);
            }
            
            public TSARestoreRow NewTSARestoreRow() {
                return ((TSARestoreRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TSARestoreRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TSARestoreRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSARestoreRowChanged != null)) {
                    this.TSARestoreRowChanged(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSARestoreRowChanging != null)) {
                    this.TSARestoreRowChanging(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSARestoreRowDeleted != null)) {
                    this.TSARestoreRowDeleted(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSARestoreRowDeleting != null)) {
                    this.TSARestoreRowDeleting(this, new TSARestoreRowChangeEvent(((TSARestoreRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTSARestoreRow(TSARestoreRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSARestoreRow : DataRow {
            
            private TSARestoreDataTable tableTSARestore;
            
            internal TSARestoreRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSARestore = ((TSARestoreDataTable)(this.Table));
            }
            
            public int TDLODist {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.TDLODistColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.TDLODistColumn] = value;
                }
            }
            
            public int leadTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.leadTrvColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.leadTrvColumn] = value;
                }
            }
            
            public int trailTrv {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.trailTrvColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.trailTrvColumn] = value;
                }
            }
            
            public int delay {
                get {
                    try {
                        return ((int)(this[this.tableTSARestore.delayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableTSARestore.delayColumn] = value;
                }
            }
            
            public bool IsTDLODistNull() {
                return this.IsNull(this.tableTSARestore.TDLODistColumn);
            }
            
            public void SetTDLODistNull() {
                this[this.tableTSARestore.TDLODistColumn] = System.Convert.DBNull;
            }
            
            public bool IsleadTrvNull() {
                return this.IsNull(this.tableTSARestore.leadTrvColumn);
            }
            
            public void SetleadTrvNull() {
                this[this.tableTSARestore.leadTrvColumn] = System.Convert.DBNull;
            }
            
            public bool IstrailTrvNull() {
                return this.IsNull(this.tableTSARestore.trailTrvColumn);
            }
            
            public void SettrailTrvNull() {
                this[this.tableTSARestore.trailTrvColumn] = System.Convert.DBNull;
            }
            
            public bool IsdelayNull() {
                return this.IsNull(this.tableTSARestore.delayColumn);
            }
            
            public void SetdelayNull() {
                this[this.tableTSARestore.delayColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSARestoreRowChangeEvent : EventArgs {
            
            private TSARestoreRow eventRow;
            
            private DataRowAction eventAction;
            
            public TSARestoreRowChangeEvent(TSARestoreRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TSARestoreRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
