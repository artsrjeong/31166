//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.42
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace COGSD {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsReport")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsReport : System.Data.DataSet {
        
        private _2d_cDataTable table_2d_c;
        
        private _2d_pDataTable table_2d_p;
        
        private report_item1DataTable tablereport_item1;
        
        private report_item2DataTable tablereport_item2;
        
        private svcwaitDataTable tablesvcwait;
        
        private waitDataTable tablewait;
        
        private svcDataTable tablesvc;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsReport() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsReport(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["2d_c"] != null)) {
                    base.Tables.Add(new _2d_cDataTable(ds.Tables["2d_c"]));
                }
                if ((ds.Tables["2d_p"] != null)) {
                    base.Tables.Add(new _2d_pDataTable(ds.Tables["2d_p"]));
                }
                if ((ds.Tables["report_item1"] != null)) {
                    base.Tables.Add(new report_item1DataTable(ds.Tables["report_item1"]));
                }
                if ((ds.Tables["report_item2"] != null)) {
                    base.Tables.Add(new report_item2DataTable(ds.Tables["report_item2"]));
                }
                if ((ds.Tables["svcwait"] != null)) {
                    base.Tables.Add(new svcwaitDataTable(ds.Tables["svcwait"]));
                }
                if ((ds.Tables["wait"] != null)) {
                    base.Tables.Add(new waitDataTable(ds.Tables["wait"]));
                }
                if ((ds.Tables["svc"] != null)) {
                    base.Tables.Add(new svcDataTable(ds.Tables["svc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _2d_cDataTable _2d_c {
            get {
                return this.table_2d_c;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _2d_pDataTable _2d_p {
            get {
                return this.table_2d_p;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public report_item1DataTable report_item1 {
            get {
                return this.tablereport_item1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public report_item2DataTable report_item2 {
            get {
                return this.tablereport_item2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public svcwaitDataTable svcwait {
            get {
                return this.tablesvcwait;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public waitDataTable wait {
            get {
                return this.tablewait;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public svcDataTable svc {
            get {
                return this.tablesvc;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsReport cln = ((dsReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["2d_c"] != null)) {
                    base.Tables.Add(new _2d_cDataTable(ds.Tables["2d_c"]));
                }
                if ((ds.Tables["2d_p"] != null)) {
                    base.Tables.Add(new _2d_pDataTable(ds.Tables["2d_p"]));
                }
                if ((ds.Tables["report_item1"] != null)) {
                    base.Tables.Add(new report_item1DataTable(ds.Tables["report_item1"]));
                }
                if ((ds.Tables["report_item2"] != null)) {
                    base.Tables.Add(new report_item2DataTable(ds.Tables["report_item2"]));
                }
                if ((ds.Tables["svcwait"] != null)) {
                    base.Tables.Add(new svcwaitDataTable(ds.Tables["svcwait"]));
                }
                if ((ds.Tables["wait"] != null)) {
                    base.Tables.Add(new waitDataTable(ds.Tables["wait"]));
                }
                if ((ds.Tables["svc"] != null)) {
                    base.Tables.Add(new svcDataTable(ds.Tables["svc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table_2d_c = ((_2d_cDataTable)(base.Tables["2d_c"]));
            if ((initTable == true)) {
                if ((this.table_2d_c != null)) {
                    this.table_2d_c.InitVars();
                }
            }
            this.table_2d_p = ((_2d_pDataTable)(base.Tables["2d_p"]));
            if ((initTable == true)) {
                if ((this.table_2d_p != null)) {
                    this.table_2d_p.InitVars();
                }
            }
            this.tablereport_item1 = ((report_item1DataTable)(base.Tables["report_item1"]));
            if ((initTable == true)) {
                if ((this.tablereport_item1 != null)) {
                    this.tablereport_item1.InitVars();
                }
            }
            this.tablereport_item2 = ((report_item2DataTable)(base.Tables["report_item2"]));
            if ((initTable == true)) {
                if ((this.tablereport_item2 != null)) {
                    this.tablereport_item2.InitVars();
                }
            }
            this.tablesvcwait = ((svcwaitDataTable)(base.Tables["svcwait"]));
            if ((initTable == true)) {
                if ((this.tablesvcwait != null)) {
                    this.tablesvcwait.InitVars();
                }
            }
            this.tablewait = ((waitDataTable)(base.Tables["wait"]));
            if ((initTable == true)) {
                if ((this.tablewait != null)) {
                    this.tablewait.InitVars();
                }
            }
            this.tablesvc = ((svcDataTable)(base.Tables["svc"]));
            if ((initTable == true)) {
                if ((this.tablesvc != null)) {
                    this.tablesvc.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.table_2d_c = new _2d_cDataTable();
            base.Tables.Add(this.table_2d_c);
            this.table_2d_p = new _2d_pDataTable();
            base.Tables.Add(this.table_2d_p);
            this.tablereport_item1 = new report_item1DataTable();
            base.Tables.Add(this.tablereport_item1);
            this.tablereport_item2 = new report_item2DataTable();
            base.Tables.Add(this.tablereport_item2);
            this.tablesvcwait = new svcwaitDataTable();
            base.Tables.Add(this.tablesvcwait);
            this.tablewait = new waitDataTable();
            base.Tables.Add(this.tablewait);
            this.tablesvc = new svcDataTable();
            base.Tables.Add(this.tablesvc);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_2d_c() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_2d_p() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereport_item1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereport_item2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesvcwait() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializewait() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesvc() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsReport ds = new dsReport();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void _2d_cRowChangeEventHandler(object sender, _2d_cRowChangeEvent e);
        
        public delegate void _2d_pRowChangeEventHandler(object sender, _2d_pRowChangeEvent e);
        
        public delegate void report_item1RowChangeEventHandler(object sender, report_item1RowChangeEvent e);
        
        public delegate void report_item2RowChangeEventHandler(object sender, report_item2RowChangeEvent e);
        
        public delegate void svcwaitRowChangeEventHandler(object sender, svcwaitRowChangeEvent e);
        
        public delegate void waitRowChangeEventHandler(object sender, waitRowChangeEvent e);
        
        public delegate void svcRowChangeEventHandler(object sender, svcRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _2d_cDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCar;
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnT_begin_run;
            
            private System.Data.DataColumn columnT_decel;
            
            private System.Data.DataColumn columnT_reach_AP;
            
            private System.Data.DataColumn columnT_end_run;
            
            private System.Data.DataColumn columnOrigin;
            
            private System.Data.DataColumn columnDest;
            
            private System.Data.DataColumn columnPax_in_run;
            
            private System.Data.DataColumn columnChanged_target;
            
            private System.Data.DataColumn columnT_opened;
            
            private System.Data.DataColumn columnDeboard;
            
            private System.Data.DataColumn columnBoard;
            
            private System.Data.DataColumn columnT_dwelled;
            
            private System.Data.DataColumn columnExtra_dwell;
            
            private System.Data.DataColumn columnT_closed;
            
            private System.Data.DataColumn columnT_released;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_cDataTable() {
                this.TableName = "2d_c";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _2d_cDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _2d_cDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CarColumn {
                get {
                    return this.columnCar;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_begin_runColumn {
                get {
                    return this.columnT_begin_run;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_decelColumn {
                get {
                    return this.columnT_decel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_reach_APColumn {
                get {
                    return this.columnT_reach_AP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_end_runColumn {
                get {
                    return this.columnT_end_run;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OriginColumn {
                get {
                    return this.columnOrigin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestColumn {
                get {
                    return this.columnDest;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Pax_in_runColumn {
                get {
                    return this.columnPax_in_run;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Changed_targetColumn {
                get {
                    return this.columnChanged_target;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_openedColumn {
                get {
                    return this.columnT_opened;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeboardColumn {
                get {
                    return this.columnDeboard;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BoardColumn {
                get {
                    return this.columnBoard;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_dwelledColumn {
                get {
                    return this.columnT_dwelled;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Extra_dwellColumn {
                get {
                    return this.columnExtra_dwell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_closedColumn {
                get {
                    return this.columnT_closed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_releasedColumn {
                get {
                    return this.columnT_released;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_cRow this[int index] {
                get {
                    return ((_2d_cRow)(this.Rows[index]));
                }
            }
            
            public event _2d_cRowChangeEventHandler _2d_cRowChanging;
            
            public event _2d_cRowChangeEventHandler _2d_cRowChanged;
            
            public event _2d_cRowChangeEventHandler _2d_cRowDeleting;
            
            public event _2d_cRowChangeEventHandler _2d_cRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_2d_cRow(_2d_cRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_cRow Add_2d_cRow(
                        string Car, 
                        string Type, 
                        string T_begin_run, 
                        string T_decel, 
                        string T_reach_AP, 
                        string T_end_run, 
                        string Origin, 
                        string Dest, 
                        string Pax_in_run, 
                        string Changed_target, 
                        string T_opened, 
                        string Deboard, 
                        string Board, 
                        string T_dwelled, 
                        string Extra_dwell, 
                        string T_closed, 
                        string T_released) {
                _2d_cRow row_2d_cRow = ((_2d_cRow)(this.NewRow()));
                row_2d_cRow.ItemArray = new object[] {
                        Car,
                        Type,
                        T_begin_run,
                        T_decel,
                        T_reach_AP,
                        T_end_run,
                        Origin,
                        Dest,
                        Pax_in_run,
                        Changed_target,
                        T_opened,
                        Deboard,
                        Board,
                        T_dwelled,
                        Extra_dwell,
                        T_closed,
                        T_released};
                this.Rows.Add(row_2d_cRow);
                return row_2d_cRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _2d_cDataTable cln = ((_2d_cDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _2d_cDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCar = base.Columns["Car"];
                this.columnType = base.Columns["Type"];
                this.columnT_begin_run = base.Columns["T_begin_run"];
                this.columnT_decel = base.Columns["T_decel"];
                this.columnT_reach_AP = base.Columns["T_reach_AP"];
                this.columnT_end_run = base.Columns["T_end_run"];
                this.columnOrigin = base.Columns["Origin"];
                this.columnDest = base.Columns["Dest"];
                this.columnPax_in_run = base.Columns["Pax_in_run"];
                this.columnChanged_target = base.Columns["Changed_target"];
                this.columnT_opened = base.Columns["T_opened"];
                this.columnDeboard = base.Columns["Deboard"];
                this.columnBoard = base.Columns["Board"];
                this.columnT_dwelled = base.Columns["T_dwelled"];
                this.columnExtra_dwell = base.Columns["Extra_dwell"];
                this.columnT_closed = base.Columns["T_closed"];
                this.columnT_released = base.Columns["T released"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCar = new System.Data.DataColumn("Car", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCar);
                this.columnType = new System.Data.DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnT_begin_run = new System.Data.DataColumn("T_begin_run", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_begin_run);
                this.columnT_decel = new System.Data.DataColumn("T_decel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_decel);
                this.columnT_reach_AP = new System.Data.DataColumn("T_reach_AP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_reach_AP);
                this.columnT_end_run = new System.Data.DataColumn("T_end_run", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_end_run);
                this.columnOrigin = new System.Data.DataColumn("Origin", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrigin);
                this.columnDest = new System.Data.DataColumn("Dest", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDest);
                this.columnPax_in_run = new System.Data.DataColumn("Pax_in_run", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPax_in_run);
                this.columnChanged_target = new System.Data.DataColumn("Changed_target", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChanged_target);
                this.columnT_opened = new System.Data.DataColumn("T_opened", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_opened);
                this.columnDeboard = new System.Data.DataColumn("Deboard", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeboard);
                this.columnBoard = new System.Data.DataColumn("Board", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoard);
                this.columnT_dwelled = new System.Data.DataColumn("T_dwelled", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_dwelled);
                this.columnExtra_dwell = new System.Data.DataColumn("Extra_dwell", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra_dwell);
                this.columnT_closed = new System.Data.DataColumn("T_closed", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_closed);
                this.columnT_released = new System.Data.DataColumn("T released", typeof(string), null, System.Data.MappingType.Element);
                this.columnT_released.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "T_released");
                this.columnT_released.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "T_releasedColumn");
                this.columnT_released.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnT_released");
                this.columnT_released.ExtendedProperties.Add("Generator_UserColumnName", "T released");
                base.Columns.Add(this.columnT_released);
                this.ExtendedProperties.Add("Generator_RowClassName", "_2d_cRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_2d_cRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_2d_cRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_2d_cDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_2d_c");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_2d_c");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_cRow New_2d_cRow() {
                return ((_2d_cRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _2d_cRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_2d_cRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._2d_cRowChanged != null)) {
                    this._2d_cRowChanged(this, new _2d_cRowChangeEvent(((_2d_cRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._2d_cRowChanging != null)) {
                    this._2d_cRowChanging(this, new _2d_cRowChangeEvent(((_2d_cRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._2d_cRowDeleted != null)) {
                    this._2d_cRowDeleted(this, new _2d_cRowChangeEvent(((_2d_cRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._2d_cRowDeleting != null)) {
                    this._2d_cRowDeleting(this, new _2d_cRowChangeEvent(((_2d_cRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_2d_cRow(_2d_cRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsReport ds = new dsReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_2d_cDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _2d_pDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIndex;
            
            private System.Data.DataColumn columnT_arrival;
            
            private System.Data.DataColumn columnOrigin;
            
            private System.Data.DataColumn columnDest;
            
            private System.Data.DataColumn columnAssignment;
            
            private System.Data.DataColumn columnT_end_wait_AP;
            
            private System.Data.DataColumn columnT_end_wait_CP;
            
            private System.Data.DataColumn columnT_door_opening;
            
            private System.Data.DataColumn columnT_door_opened;
            
            private System.Data.DataColumn columnT_door_close;
            
            private System.Data.DataColumn columnT_depart;
            
            private System.Data.DataColumn columnReg_dir;
            
            private System.Data.DataColumn column_Reg_car_dir;
            
            private System.Data.DataColumn column_Re_Reg;
            
            private System.Data.DataColumn column_T_Re_Reg;
            
            private System.Data.DataColumn columnReg_AP_T;
            
            private System.Data.DataColumn columnReg_CP_T;
            
            private System.Data.DataColumn columnWait_AP_T;
            
            private System.Data.DataColumn columnWait_CP_T;
            
            private System.Data.DataColumn columnSrvc_T;
            
            private System.Data.DataColumn columnRejection;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_pDataTable() {
                this.TableName = "2d_p";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _2d_pDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _2d_pDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_arrivalColumn {
                get {
                    return this.columnT_arrival;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OriginColumn {
                get {
                    return this.columnOrigin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestColumn {
                get {
                    return this.columnDest;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssignmentColumn {
                get {
                    return this.columnAssignment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_end_wait_APColumn {
                get {
                    return this.columnT_end_wait_AP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_end_wait_CPColumn {
                get {
                    return this.columnT_end_wait_CP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_door_openingColumn {
                get {
                    return this.columnT_door_opening;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_door_openedColumn {
                get {
                    return this.columnT_door_opened;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_door_closeColumn {
                get {
                    return this.columnT_door_close;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_departColumn {
                get {
                    return this.columnT_depart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reg_dirColumn {
                get {
                    return this.columnReg_dir;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _Reg_car_dirColumn {
                get {
                    return this.column_Reg_car_dir;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _Re_RegColumn {
                get {
                    return this.column_Re_Reg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _T_Re_RegColumn {
                get {
                    return this.column_T_Re_Reg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reg_AP_TColumn {
                get {
                    return this.columnReg_AP_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reg_CP_TColumn {
                get {
                    return this.columnReg_CP_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Wait_AP_TColumn {
                get {
                    return this.columnWait_AP_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Wait_CP_TColumn {
                get {
                    return this.columnWait_CP_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Srvc_TColumn {
                get {
                    return this.columnSrvc_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RejectionColumn {
                get {
                    return this.columnRejection;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_pRow this[int index] {
                get {
                    return ((_2d_pRow)(this.Rows[index]));
                }
            }
            
            public event _2d_pRowChangeEventHandler _2d_pRowChanging;
            
            public event _2d_pRowChangeEventHandler _2d_pRowChanged;
            
            public event _2d_pRowChangeEventHandler _2d_pRowDeleting;
            
            public event _2d_pRowChangeEventHandler _2d_pRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_2d_pRow(_2d_pRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_pRow Add_2d_pRow(
                        string Index, 
                        string T_arrival, 
                        string Origin, 
                        string Dest, 
                        string Assignment, 
                        string T_end_wait_AP, 
                        string T_end_wait_CP, 
                        string T_door_opening, 
                        string T_door_opened, 
                        string T_door_close, 
                        string T_depart, 
                        string Reg_dir, 
                        string _Reg_car_dir, 
                        string _Re_Reg, 
                        string _T_Re_Reg, 
                        string Reg_AP_T, 
                        string Reg_CP_T, 
                        string Wait_AP_T, 
                        string Wait_CP_T, 
                        string Srvc_T, 
                        string Rejection) {
                _2d_pRow row_2d_pRow = ((_2d_pRow)(this.NewRow()));
                row_2d_pRow.ItemArray = new object[] {
                        Index,
                        T_arrival,
                        Origin,
                        Dest,
                        Assignment,
                        T_end_wait_AP,
                        T_end_wait_CP,
                        T_door_opening,
                        T_door_opened,
                        T_door_close,
                        T_depart,
                        Reg_dir,
                        _Reg_car_dir,
                        _Re_Reg,
                        _T_Re_Reg,
                        Reg_AP_T,
                        Reg_CP_T,
                        Wait_AP_T,
                        Wait_CP_T,
                        Srvc_T,
                        Rejection};
                this.Rows.Add(row_2d_pRow);
                return row_2d_pRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _2d_pDataTable cln = ((_2d_pDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _2d_pDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIndex = base.Columns["Index"];
                this.columnT_arrival = base.Columns["T_arrival"];
                this.columnOrigin = base.Columns["Origin"];
                this.columnDest = base.Columns["Dest"];
                this.columnAssignment = base.Columns["Assignment"];
                this.columnT_end_wait_AP = base.Columns["T_end_wait_AP"];
                this.columnT_end_wait_CP = base.Columns["T_end_wait_CP"];
                this.columnT_door_opening = base.Columns["T_door_opening"];
                this.columnT_door_opened = base.Columns["T_door_opened"];
                this.columnT_door_close = base.Columns["T_door_close"];
                this.columnT_depart = base.Columns["T_depart"];
                this.columnReg_dir = base.Columns["Reg_dir"];
                this.column_Reg_car_dir = base.Columns["Reg_car-dir"];
                this.column_Re_Reg = base.Columns["Re-Reg"];
                this.column_T_Re_Reg = base.Columns["T_Re-Reg"];
                this.columnReg_AP_T = base.Columns["Reg_AP_T"];
                this.columnReg_CP_T = base.Columns["Reg_CP_T"];
                this.columnWait_AP_T = base.Columns["Wait_AP_T"];
                this.columnWait_CP_T = base.Columns["Wait_CP_T"];
                this.columnSrvc_T = base.Columns["Srvc_T"];
                this.columnRejection = base.Columns["Rejection"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIndex = new System.Data.DataColumn("Index", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex);
                this.columnT_arrival = new System.Data.DataColumn("T_arrival", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_arrival);
                this.columnOrigin = new System.Data.DataColumn("Origin", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrigin);
                this.columnDest = new System.Data.DataColumn("Dest", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDest);
                this.columnAssignment = new System.Data.DataColumn("Assignment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignment);
                this.columnT_end_wait_AP = new System.Data.DataColumn("T_end_wait_AP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_end_wait_AP);
                this.columnT_end_wait_CP = new System.Data.DataColumn("T_end_wait_CP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_end_wait_CP);
                this.columnT_door_opening = new System.Data.DataColumn("T_door_opening", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_door_opening);
                this.columnT_door_opened = new System.Data.DataColumn("T_door_opened", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_door_opened);
                this.columnT_door_close = new System.Data.DataColumn("T_door_close", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_door_close);
                this.columnT_depart = new System.Data.DataColumn("T_depart", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_depart);
                this.columnReg_dir = new System.Data.DataColumn("Reg_dir", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReg_dir);
                this.column_Reg_car_dir = new System.Data.DataColumn("Reg_car-dir", typeof(string), null, System.Data.MappingType.Element);
                this.column_Reg_car_dir.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Reg_car_dir");
                this.column_Reg_car_dir.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Reg_car_dirColumn");
                this.column_Reg_car_dir.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_Reg_car_dir");
                this.column_Reg_car_dir.ExtendedProperties.Add("Generator_UserColumnName", "Reg_car-dir");
                base.Columns.Add(this.column_Reg_car_dir);
                this.column_Re_Reg = new System.Data.DataColumn("Re-Reg", typeof(string), null, System.Data.MappingType.Element);
                this.column_Re_Reg.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Re_Reg");
                this.column_Re_Reg.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Re_RegColumn");
                this.column_Re_Reg.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_Re_Reg");
                this.column_Re_Reg.ExtendedProperties.Add("Generator_UserColumnName", "Re-Reg");
                base.Columns.Add(this.column_Re_Reg);
                this.column_T_Re_Reg = new System.Data.DataColumn("T_Re-Reg", typeof(string), null, System.Data.MappingType.Element);
                this.column_T_Re_Reg.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_T_Re_Reg");
                this.column_T_Re_Reg.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_T_Re_RegColumn");
                this.column_T_Re_Reg.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_T_Re_Reg");
                this.column_T_Re_Reg.ExtendedProperties.Add("Generator_UserColumnName", "T_Re-Reg");
                base.Columns.Add(this.column_T_Re_Reg);
                this.columnReg_AP_T = new System.Data.DataColumn("Reg_AP_T", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReg_AP_T);
                this.columnReg_CP_T = new System.Data.DataColumn("Reg_CP_T", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReg_CP_T);
                this.columnWait_AP_T = new System.Data.DataColumn("Wait_AP_T", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWait_AP_T);
                this.columnWait_CP_T = new System.Data.DataColumn("Wait_CP_T", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWait_CP_T);
                this.columnSrvc_T = new System.Data.DataColumn("Srvc_T", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSrvc_T);
                this.columnRejection = new System.Data.DataColumn("Rejection", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejection);
                this.ExtendedProperties.Add("Generator_RowClassName", "_2d_pRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_2d_pRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_2d_pRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_2d_pDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_2d_p");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_2d_p");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_pRow New_2d_pRow() {
                return ((_2d_pRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _2d_pRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_2d_pRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._2d_pRowChanged != null)) {
                    this._2d_pRowChanged(this, new _2d_pRowChangeEvent(((_2d_pRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._2d_pRowChanging != null)) {
                    this._2d_pRowChanging(this, new _2d_pRowChangeEvent(((_2d_pRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._2d_pRowDeleted != null)) {
                    this._2d_pRowDeleted(this, new _2d_pRowChangeEvent(((_2d_pRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._2d_pRowDeleting != null)) {
                    this._2d_pRowDeleting(this, new _2d_pRowChangeEvent(((_2d_pRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_2d_pRow(_2d_pRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsReport ds = new dsReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_2d_pDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class report_item1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnitem;
            
            private System.Data.DataColumn columnvalue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item1DataTable() {
                this.TableName = "report_item1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_item1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected report_item1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn itemColumn {
                get {
                    return this.columnitem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item1Row this[int index] {
                get {
                    return ((report_item1Row)(this.Rows[index]));
                }
            }
            
            public event report_item1RowChangeEventHandler report_item1RowChanging;
            
            public event report_item1RowChangeEventHandler report_item1RowChanged;
            
            public event report_item1RowChangeEventHandler report_item1RowDeleting;
            
            public event report_item1RowChangeEventHandler report_item1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addreport_item1Row(report_item1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item1Row Addreport_item1Row(string item, string value) {
                report_item1Row rowreport_item1Row = ((report_item1Row)(this.NewRow()));
                rowreport_item1Row.ItemArray = new object[] {
                        item,
                        value};
                this.Rows.Add(rowreport_item1Row);
                return rowreport_item1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                report_item1DataTable cln = ((report_item1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new report_item1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnitem = base.Columns["item"];
                this.columnvalue = base.Columns["value"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnitem = new System.Data.DataColumn("item", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnitem);
                this.columnvalue = new System.Data.DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item1Row Newreport_item1Row() {
                return ((report_item1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new report_item1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(report_item1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.report_item1RowChanged != null)) {
                    this.report_item1RowChanged(this, new report_item1RowChangeEvent(((report_item1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.report_item1RowChanging != null)) {
                    this.report_item1RowChanging(this, new report_item1RowChangeEvent(((report_item1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.report_item1RowDeleted != null)) {
                    this.report_item1RowDeleted(this, new report_item1RowChangeEvent(((report_item1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.report_item1RowDeleting != null)) {
                    this.report_item1RowDeleting(this, new report_item1RowChangeEvent(((report_item1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removereport_item1Row(report_item1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsReport ds = new dsReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "report_item1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class report_item2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnitem;
            
            private System.Data.DataColumn columnvalue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item2DataTable() {
                this.TableName = "report_item2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_item2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected report_item2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn itemColumn {
                get {
                    return this.columnitem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item2Row this[int index] {
                get {
                    return ((report_item2Row)(this.Rows[index]));
                }
            }
            
            public event report_item2RowChangeEventHandler report_item2RowChanging;
            
            public event report_item2RowChangeEventHandler report_item2RowChanged;
            
            public event report_item2RowChangeEventHandler report_item2RowDeleting;
            
            public event report_item2RowChangeEventHandler report_item2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addreport_item2Row(report_item2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item2Row Addreport_item2Row(string item, string value) {
                report_item2Row rowreport_item2Row = ((report_item2Row)(this.NewRow()));
                rowreport_item2Row.ItemArray = new object[] {
                        item,
                        value};
                this.Rows.Add(rowreport_item2Row);
                return rowreport_item2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                report_item2DataTable cln = ((report_item2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new report_item2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnitem = base.Columns["item"];
                this.columnvalue = base.Columns["value"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnitem = new System.Data.DataColumn("item", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnitem);
                this.columnvalue = new System.Data.DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item2Row Newreport_item2Row() {
                return ((report_item2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new report_item2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(report_item2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.report_item2RowChanged != null)) {
                    this.report_item2RowChanged(this, new report_item2RowChangeEvent(((report_item2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.report_item2RowChanging != null)) {
                    this.report_item2RowChanging(this, new report_item2RowChangeEvent(((report_item2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.report_item2RowDeleted != null)) {
                    this.report_item2RowDeleted(this, new report_item2RowChangeEvent(((report_item2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.report_item2RowDeleting != null)) {
                    this.report_item2RowDeleting(this, new report_item2RowChangeEvent(((report_item2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removereport_item2Row(report_item2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsReport ds = new dsReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "report_item2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class svcwaitDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnitem;
            
            private System.Data.DataColumn columnvalue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcwaitDataTable() {
                this.TableName = "svcwait";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal svcwaitDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected svcwaitDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn itemColumn {
                get {
                    return this.columnitem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcwaitRow this[int index] {
                get {
                    return ((svcwaitRow)(this.Rows[index]));
                }
            }
            
            public event svcwaitRowChangeEventHandler svcwaitRowChanging;
            
            public event svcwaitRowChangeEventHandler svcwaitRowChanged;
            
            public event svcwaitRowChangeEventHandler svcwaitRowDeleting;
            
            public event svcwaitRowChangeEventHandler svcwaitRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsvcwaitRow(svcwaitRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcwaitRow AddsvcwaitRow(string item, double value) {
                svcwaitRow rowsvcwaitRow = ((svcwaitRow)(this.NewRow()));
                rowsvcwaitRow.ItemArray = new object[] {
                        item,
                        value};
                this.Rows.Add(rowsvcwaitRow);
                return rowsvcwaitRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                svcwaitDataTable cln = ((svcwaitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new svcwaitDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnitem = base.Columns["item"];
                this.columnvalue = base.Columns["value"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnitem = new System.Data.DataColumn("item", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnitem);
                this.columnvalue = new System.Data.DataColumn("value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcwaitRow NewsvcwaitRow() {
                return ((svcwaitRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new svcwaitRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(svcwaitRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.svcwaitRowChanged != null)) {
                    this.svcwaitRowChanged(this, new svcwaitRowChangeEvent(((svcwaitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.svcwaitRowChanging != null)) {
                    this.svcwaitRowChanging(this, new svcwaitRowChangeEvent(((svcwaitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.svcwaitRowDeleted != null)) {
                    this.svcwaitRowDeleted(this, new svcwaitRowChangeEvent(((svcwaitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.svcwaitRowDeleting != null)) {
                    this.svcwaitRowDeleting(this, new svcwaitRowChangeEvent(((svcwaitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesvcwaitRow(svcwaitRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsReport ds = new dsReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "svcwaitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class waitDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnitem;
            
            private System.Data.DataColumn columnvalue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public waitDataTable() {
                this.TableName = "wait";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal waitDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected waitDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn itemColumn {
                get {
                    return this.columnitem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public waitRow this[int index] {
                get {
                    return ((waitRow)(this.Rows[index]));
                }
            }
            
            public event waitRowChangeEventHandler waitRowChanging;
            
            public event waitRowChangeEventHandler waitRowChanged;
            
            public event waitRowChangeEventHandler waitRowDeleting;
            
            public event waitRowChangeEventHandler waitRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddwaitRow(waitRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public waitRow AddwaitRow(string item, double value) {
                waitRow rowwaitRow = ((waitRow)(this.NewRow()));
                rowwaitRow.ItemArray = new object[] {
                        item,
                        value};
                this.Rows.Add(rowwaitRow);
                return rowwaitRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                waitDataTable cln = ((waitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new waitDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnitem = base.Columns["item"];
                this.columnvalue = base.Columns["value"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnitem = new System.Data.DataColumn("item", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnitem);
                this.columnvalue = new System.Data.DataColumn("value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public waitRow NewwaitRow() {
                return ((waitRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new waitRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(waitRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.waitRowChanged != null)) {
                    this.waitRowChanged(this, new waitRowChangeEvent(((waitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.waitRowChanging != null)) {
                    this.waitRowChanging(this, new waitRowChangeEvent(((waitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.waitRowDeleted != null)) {
                    this.waitRowDeleted(this, new waitRowChangeEvent(((waitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.waitRowDeleting != null)) {
                    this.waitRowDeleting(this, new waitRowChangeEvent(((waitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovewaitRow(waitRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsReport ds = new dsReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "waitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class svcDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnitem;
            
            private System.Data.DataColumn columnvalue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcDataTable() {
                this.TableName = "svc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal svcDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected svcDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn itemColumn {
                get {
                    return this.columnitem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcRow this[int index] {
                get {
                    return ((svcRow)(this.Rows[index]));
                }
            }
            
            public event svcRowChangeEventHandler svcRowChanging;
            
            public event svcRowChangeEventHandler svcRowChanged;
            
            public event svcRowChangeEventHandler svcRowDeleting;
            
            public event svcRowChangeEventHandler svcRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsvcRow(svcRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcRow AddsvcRow(string item, double value) {
                svcRow rowsvcRow = ((svcRow)(this.NewRow()));
                rowsvcRow.ItemArray = new object[] {
                        item,
                        value};
                this.Rows.Add(rowsvcRow);
                return rowsvcRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                svcDataTable cln = ((svcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new svcDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnitem = base.Columns["item"];
                this.columnvalue = base.Columns["value"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnitem = new System.Data.DataColumn("item", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnitem);
                this.columnvalue = new System.Data.DataColumn("value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcRow NewsvcRow() {
                return ((svcRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new svcRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(svcRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.svcRowChanged != null)) {
                    this.svcRowChanged(this, new svcRowChangeEvent(((svcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.svcRowChanging != null)) {
                    this.svcRowChanging(this, new svcRowChangeEvent(((svcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.svcRowDeleted != null)) {
                    this.svcRowDeleted(this, new svcRowChangeEvent(((svcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.svcRowDeleting != null)) {
                    this.svcRowDeleting(this, new svcRowChangeEvent(((svcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesvcRow(svcRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsReport ds = new dsReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "svcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _2d_cRow : System.Data.DataRow {
            
            private _2d_cDataTable table_2d_c;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _2d_cRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_2d_c = ((_2d_cDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Car {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.CarColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Car\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.CarColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Type\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_begin_run {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_begin_runColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T_begin_run\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_begin_runColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_decel {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_decelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T_decel\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_decelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_reach_AP {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_reach_APColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T_reach_AP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_reach_APColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_end_run {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_end_runColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T_end_run\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_end_runColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Origin {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.OriginColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Origin\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.OriginColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dest {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.DestColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Dest\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.DestColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pax_in_run {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.Pax_in_runColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Pax_in_run\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.Pax_in_runColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Changed_target {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.Changed_targetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Changed_target\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.Changed_targetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_opened {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_openedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T_opened\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_openedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Deboard {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.DeboardColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Deboard\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.DeboardColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Board {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.BoardColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Board\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.BoardColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_dwelled {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_dwelledColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T_dwelled\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_dwelledColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Extra_dwell {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.Extra_dwellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'Extra_dwell\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.Extra_dwellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_closed {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_closedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T_closed\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_closedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_released {
                get {
                    try {
                        return ((string)(this[this.table_2d_c.T_releasedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_c\' 테이블의 \'T released\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_c.T_releasedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarNull() {
                return this.IsNull(this.table_2d_c.CarColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarNull() {
                this[this.table_2d_c.CarColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.table_2d_c.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.table_2d_c.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_begin_runNull() {
                return this.IsNull(this.table_2d_c.T_begin_runColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_begin_runNull() {
                this[this.table_2d_c.T_begin_runColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_decelNull() {
                return this.IsNull(this.table_2d_c.T_decelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_decelNull() {
                this[this.table_2d_c.T_decelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_reach_APNull() {
                return this.IsNull(this.table_2d_c.T_reach_APColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_reach_APNull() {
                this[this.table_2d_c.T_reach_APColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_end_runNull() {
                return this.IsNull(this.table_2d_c.T_end_runColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_end_runNull() {
                this[this.table_2d_c.T_end_runColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginNull() {
                return this.IsNull(this.table_2d_c.OriginColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginNull() {
                this[this.table_2d_c.OriginColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestNull() {
                return this.IsNull(this.table_2d_c.DestColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestNull() {
                this[this.table_2d_c.DestColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPax_in_runNull() {
                return this.IsNull(this.table_2d_c.Pax_in_runColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPax_in_runNull() {
                this[this.table_2d_c.Pax_in_runColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChanged_targetNull() {
                return this.IsNull(this.table_2d_c.Changed_targetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChanged_targetNull() {
                this[this.table_2d_c.Changed_targetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_openedNull() {
                return this.IsNull(this.table_2d_c.T_openedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_openedNull() {
                this[this.table_2d_c.T_openedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeboardNull() {
                return this.IsNull(this.table_2d_c.DeboardColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeboardNull() {
                this[this.table_2d_c.DeboardColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoardNull() {
                return this.IsNull(this.table_2d_c.BoardColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoardNull() {
                this[this.table_2d_c.BoardColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_dwelledNull() {
                return this.IsNull(this.table_2d_c.T_dwelledColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_dwelledNull() {
                this[this.table_2d_c.T_dwelledColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtra_dwellNull() {
                return this.IsNull(this.table_2d_c.Extra_dwellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtra_dwellNull() {
                this[this.table_2d_c.Extra_dwellColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_closedNull() {
                return this.IsNull(this.table_2d_c.T_closedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_closedNull() {
                this[this.table_2d_c.T_closedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_releasedNull() {
                return this.IsNull(this.table_2d_c.T_releasedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_releasedNull() {
                this[this.table_2d_c.T_releasedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _2d_pRow : System.Data.DataRow {
            
            private _2d_pDataTable table_2d_p;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _2d_pRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_2d_p = ((_2d_pDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.IndexColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Index\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.IndexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_arrival {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.T_arrivalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_arrival\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.T_arrivalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Origin {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.OriginColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Origin\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.OriginColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dest {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.DestColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Dest\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.DestColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Assignment {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.AssignmentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Assignment\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.AssignmentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_end_wait_AP {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.T_end_wait_APColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_end_wait_AP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.T_end_wait_APColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_end_wait_CP {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.T_end_wait_CPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_end_wait_CP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.T_end_wait_CPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_door_opening {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.T_door_openingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_door_opening\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.T_door_openingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_door_opened {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.T_door_openedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_door_opened\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.T_door_openedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_door_close {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.T_door_closeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_door_close\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.T_door_closeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_depart {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.T_departColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_depart\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.T_departColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reg_dir {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.Reg_dirColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Reg_dir\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.Reg_dirColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Reg_car_dir {
                get {
                    try {
                        return ((string)(this[this.table_2d_p._Reg_car_dirColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Reg_car-dir\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p._Reg_car_dirColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Re_Reg {
                get {
                    try {
                        return ((string)(this[this.table_2d_p._Re_RegColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Re-Reg\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p._Re_RegColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _T_Re_Reg {
                get {
                    try {
                        return ((string)(this[this.table_2d_p._T_Re_RegColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'T_Re-Reg\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p._T_Re_RegColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reg_AP_T {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.Reg_AP_TColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Reg_AP_T\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.Reg_AP_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reg_CP_T {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.Reg_CP_TColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Reg_CP_T\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.Reg_CP_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Wait_AP_T {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.Wait_AP_TColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Wait_AP_T\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.Wait_AP_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Wait_CP_T {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.Wait_CP_TColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Wait_CP_T\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.Wait_CP_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Srvc_T {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.Srvc_TColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Srvc_T\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.Srvc_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rejection {
                get {
                    try {
                        return ((string)(this[this.table_2d_p.RejectionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'2d_p\' 테이블의 \'Rejection\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.table_2d_p.RejectionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndexNull() {
                return this.IsNull(this.table_2d_p.IndexColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndexNull() {
                this[this.table_2d_p.IndexColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_arrivalNull() {
                return this.IsNull(this.table_2d_p.T_arrivalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_arrivalNull() {
                this[this.table_2d_p.T_arrivalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginNull() {
                return this.IsNull(this.table_2d_p.OriginColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginNull() {
                this[this.table_2d_p.OriginColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestNull() {
                return this.IsNull(this.table_2d_p.DestColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestNull() {
                this[this.table_2d_p.DestColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignmentNull() {
                return this.IsNull(this.table_2d_p.AssignmentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignmentNull() {
                this[this.table_2d_p.AssignmentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_end_wait_APNull() {
                return this.IsNull(this.table_2d_p.T_end_wait_APColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_end_wait_APNull() {
                this[this.table_2d_p.T_end_wait_APColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_end_wait_CPNull() {
                return this.IsNull(this.table_2d_p.T_end_wait_CPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_end_wait_CPNull() {
                this[this.table_2d_p.T_end_wait_CPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_door_openingNull() {
                return this.IsNull(this.table_2d_p.T_door_openingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_door_openingNull() {
                this[this.table_2d_p.T_door_openingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_door_openedNull() {
                return this.IsNull(this.table_2d_p.T_door_openedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_door_openedNull() {
                this[this.table_2d_p.T_door_openedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_door_closeNull() {
                return this.IsNull(this.table_2d_p.T_door_closeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_door_closeNull() {
                this[this.table_2d_p.T_door_closeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_departNull() {
                return this.IsNull(this.table_2d_p.T_departColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_departNull() {
                this[this.table_2d_p.T_departColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReg_dirNull() {
                return this.IsNull(this.table_2d_p.Reg_dirColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReg_dirNull() {
                this[this.table_2d_p.Reg_dirColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Reg_car_dirNull() {
                return this.IsNull(this.table_2d_p._Reg_car_dirColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Reg_car_dirNull() {
                this[this.table_2d_p._Reg_car_dirColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Re_RegNull() {
                return this.IsNull(this.table_2d_p._Re_RegColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Re_RegNull() {
                this[this.table_2d_p._Re_RegColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_T_Re_RegNull() {
                return this.IsNull(this.table_2d_p._T_Re_RegColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_T_Re_RegNull() {
                this[this.table_2d_p._T_Re_RegColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReg_AP_TNull() {
                return this.IsNull(this.table_2d_p.Reg_AP_TColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReg_AP_TNull() {
                this[this.table_2d_p.Reg_AP_TColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReg_CP_TNull() {
                return this.IsNull(this.table_2d_p.Reg_CP_TColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReg_CP_TNull() {
                this[this.table_2d_p.Reg_CP_TColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWait_AP_TNull() {
                return this.IsNull(this.table_2d_p.Wait_AP_TColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWait_AP_TNull() {
                this[this.table_2d_p.Wait_AP_TColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWait_CP_TNull() {
                return this.IsNull(this.table_2d_p.Wait_CP_TColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWait_CP_TNull() {
                this[this.table_2d_p.Wait_CP_TColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSrvc_TNull() {
                return this.IsNull(this.table_2d_p.Srvc_TColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSrvc_TNull() {
                this[this.table_2d_p.Srvc_TColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectionNull() {
                return this.IsNull(this.table_2d_p.RejectionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectionNull() {
                this[this.table_2d_p.RejectionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class report_item1Row : System.Data.DataRow {
            
            private report_item1DataTable tablereport_item1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_item1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereport_item1 = ((report_item1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string item {
                get {
                    try {
                        return ((string)(this[this.tablereport_item1.itemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'report_item1\' 테이블의 \'item\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablereport_item1.itemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    try {
                        return ((string)(this[this.tablereport_item1.valueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'report_item1\' 테이블의 \'value\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablereport_item1.valueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsitemNull() {
                return this.IsNull(this.tablereport_item1.itemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetitemNull() {
                this[this.tablereport_item1.itemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tablereport_item1.valueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tablereport_item1.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class report_item2Row : System.Data.DataRow {
            
            private report_item2DataTable tablereport_item2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_item2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereport_item2 = ((report_item2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string item {
                get {
                    try {
                        return ((string)(this[this.tablereport_item2.itemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'report_item2\' 테이블의 \'item\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablereport_item2.itemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    try {
                        return ((string)(this[this.tablereport_item2.valueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'report_item2\' 테이블의 \'value\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablereport_item2.valueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsitemNull() {
                return this.IsNull(this.tablereport_item2.itemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetitemNull() {
                this[this.tablereport_item2.itemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tablereport_item2.valueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tablereport_item2.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class svcwaitRow : System.Data.DataRow {
            
            private svcwaitDataTable tablesvcwait;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal svcwaitRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesvcwait = ((svcwaitDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string item {
                get {
                    try {
                        return ((string)(this[this.tablesvcwait.itemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'svcwait\' 테이블의 \'item\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablesvcwait.itemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double value {
                get {
                    try {
                        return ((double)(this[this.tablesvcwait.valueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'svcwait\' 테이블의 \'value\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablesvcwait.valueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsitemNull() {
                return this.IsNull(this.tablesvcwait.itemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetitemNull() {
                this[this.tablesvcwait.itemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tablesvcwait.valueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tablesvcwait.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class waitRow : System.Data.DataRow {
            
            private waitDataTable tablewait;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal waitRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablewait = ((waitDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string item {
                get {
                    try {
                        return ((string)(this[this.tablewait.itemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'wait\' 테이블의 \'item\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablewait.itemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double value {
                get {
                    try {
                        return ((double)(this[this.tablewait.valueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'wait\' 테이블의 \'value\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablewait.valueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsitemNull() {
                return this.IsNull(this.tablewait.itemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetitemNull() {
                this[this.tablewait.itemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tablewait.valueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tablewait.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class svcRow : System.Data.DataRow {
            
            private svcDataTable tablesvc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal svcRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesvc = ((svcDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string item {
                get {
                    try {
                        return ((string)(this[this.tablesvc.itemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'svc\' 테이블의 \'item\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablesvc.itemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double value {
                get {
                    try {
                        return ((double)(this[this.tablesvc.valueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'svc\' 테이블의 \'value\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablesvc.valueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsitemNull() {
                return this.IsNull(this.tablesvc.itemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetitemNull() {
                this[this.tablesvc.itemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tablesvc.valueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tablesvc.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _2d_cRowChangeEvent : System.EventArgs {
            
            private _2d_cRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_cRowChangeEvent(_2d_cRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_cRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _2d_pRowChangeEvent : System.EventArgs {
            
            private _2d_pRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_pRowChangeEvent(_2d_pRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _2d_pRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class report_item1RowChangeEvent : System.EventArgs {
            
            private report_item1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item1RowChangeEvent(report_item1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class report_item2RowChangeEvent : System.EventArgs {
            
            private report_item2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item2RowChangeEvent(report_item2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_item2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class svcwaitRowChangeEvent : System.EventArgs {
            
            private svcwaitRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcwaitRowChangeEvent(svcwaitRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcwaitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class waitRowChangeEvent : System.EventArgs {
            
            private waitRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public waitRowChangeEvent(waitRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public waitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class svcRowChangeEvent : System.EventArgs {
            
            private svcRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcRowChangeEvent(svcRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public svcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591