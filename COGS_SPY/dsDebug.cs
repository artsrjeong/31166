//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace COGSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsDebug : DataSet {
        
        private valuesDataTable tablevalues;
        
        private floorDataTable tablefloor;
        
        private posDataTable tablepos;
        
        private CalcDataTable tableCalc;
        
        private HexecALLDataTable tableHexecALL;
        
        private HExecDataTable tableHExec;
        
        private UpperPlanDataTable tableUpperPlan;
        
        private ncfDataTable tablencf;
        
        public dsDebug() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsDebug(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["values"] != null)) {
                    this.Tables.Add(new valuesDataTable(ds.Tables["values"]));
                }
                if ((ds.Tables["floor"] != null)) {
                    this.Tables.Add(new floorDataTable(ds.Tables["floor"]));
                }
                if ((ds.Tables["pos"] != null)) {
                    this.Tables.Add(new posDataTable(ds.Tables["pos"]));
                }
                if ((ds.Tables["Calc"] != null)) {
                    this.Tables.Add(new CalcDataTable(ds.Tables["Calc"]));
                }
                if ((ds.Tables["HexecALL"] != null)) {
                    this.Tables.Add(new HexecALLDataTable(ds.Tables["HexecALL"]));
                }
                if ((ds.Tables["HExec"] != null)) {
                    this.Tables.Add(new HExecDataTable(ds.Tables["HExec"]));
                }
                if ((ds.Tables["UpperPlan"] != null)) {
                    this.Tables.Add(new UpperPlanDataTable(ds.Tables["UpperPlan"]));
                }
                if ((ds.Tables["ncf"] != null)) {
                    this.Tables.Add(new ncfDataTable(ds.Tables["ncf"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public valuesDataTable values {
            get {
                return this.tablevalues;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public floorDataTable floor {
            get {
                return this.tablefloor;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public posDataTable pos {
            get {
                return this.tablepos;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalcDataTable Calc {
            get {
                return this.tableCalc;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HexecALLDataTable HexecALL {
            get {
                return this.tableHexecALL;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HExecDataTable HExec {
            get {
                return this.tableHExec;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UpperPlanDataTable UpperPlan {
            get {
                return this.tableUpperPlan;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ncfDataTable ncf {
            get {
                return this.tablencf;
            }
        }
        
        public override DataSet Clone() {
            dsDebug cln = ((dsDebug)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["values"] != null)) {
                this.Tables.Add(new valuesDataTable(ds.Tables["values"]));
            }
            if ((ds.Tables["floor"] != null)) {
                this.Tables.Add(new floorDataTable(ds.Tables["floor"]));
            }
            if ((ds.Tables["pos"] != null)) {
                this.Tables.Add(new posDataTable(ds.Tables["pos"]));
            }
            if ((ds.Tables["Calc"] != null)) {
                this.Tables.Add(new CalcDataTable(ds.Tables["Calc"]));
            }
            if ((ds.Tables["HexecALL"] != null)) {
                this.Tables.Add(new HexecALLDataTable(ds.Tables["HexecALL"]));
            }
            if ((ds.Tables["HExec"] != null)) {
                this.Tables.Add(new HExecDataTable(ds.Tables["HExec"]));
            }
            if ((ds.Tables["UpperPlan"] != null)) {
                this.Tables.Add(new UpperPlanDataTable(ds.Tables["UpperPlan"]));
            }
            if ((ds.Tables["ncf"] != null)) {
                this.Tables.Add(new ncfDataTable(ds.Tables["ncf"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablevalues = ((valuesDataTable)(this.Tables["values"]));
            if ((this.tablevalues != null)) {
                this.tablevalues.InitVars();
            }
            this.tablefloor = ((floorDataTable)(this.Tables["floor"]));
            if ((this.tablefloor != null)) {
                this.tablefloor.InitVars();
            }
            this.tablepos = ((posDataTable)(this.Tables["pos"]));
            if ((this.tablepos != null)) {
                this.tablepos.InitVars();
            }
            this.tableCalc = ((CalcDataTable)(this.Tables["Calc"]));
            if ((this.tableCalc != null)) {
                this.tableCalc.InitVars();
            }
            this.tableHexecALL = ((HexecALLDataTable)(this.Tables["HexecALL"]));
            if ((this.tableHexecALL != null)) {
                this.tableHexecALL.InitVars();
            }
            this.tableHExec = ((HExecDataTable)(this.Tables["HExec"]));
            if ((this.tableHExec != null)) {
                this.tableHExec.InitVars();
            }
            this.tableUpperPlan = ((UpperPlanDataTable)(this.Tables["UpperPlan"]));
            if ((this.tableUpperPlan != null)) {
                this.tableUpperPlan.InitVars();
            }
            this.tablencf = ((ncfDataTable)(this.Tables["ncf"]));
            if ((this.tablencf != null)) {
                this.tablencf.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsDebug";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDebug.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablevalues = new valuesDataTable();
            this.Tables.Add(this.tablevalues);
            this.tablefloor = new floorDataTable();
            this.Tables.Add(this.tablefloor);
            this.tablepos = new posDataTable();
            this.Tables.Add(this.tablepos);
            this.tableCalc = new CalcDataTable();
            this.Tables.Add(this.tableCalc);
            this.tableHexecALL = new HexecALLDataTable();
            this.Tables.Add(this.tableHexecALL);
            this.tableHExec = new HExecDataTable();
            this.Tables.Add(this.tableHExec);
            this.tableUpperPlan = new UpperPlanDataTable();
            this.Tables.Add(this.tableUpperPlan);
            this.tablencf = new ncfDataTable();
            this.Tables.Add(this.tablencf);
        }
        
        private bool ShouldSerializevalues() {
            return false;
        }
        
        private bool ShouldSerializefloor() {
            return false;
        }
        
        private bool ShouldSerializepos() {
            return false;
        }
        
        private bool ShouldSerializeCalc() {
            return false;
        }
        
        private bool ShouldSerializeHexecALL() {
            return false;
        }
        
        private bool ShouldSerializeHExec() {
            return false;
        }
        
        private bool ShouldSerializeUpperPlan() {
            return false;
        }
        
        private bool ShouldSerializencf() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void valuesRowChangeEventHandler(object sender, valuesRowChangeEvent e);
        
        public delegate void floorRowChangeEventHandler(object sender, floorRowChangeEvent e);
        
        public delegate void posRowChangeEventHandler(object sender, posRowChangeEvent e);
        
        public delegate void CalcRowChangeEventHandler(object sender, CalcRowChangeEvent e);
        
        public delegate void HexecALLRowChangeEventHandler(object sender, HexecALLRowChangeEvent e);
        
        public delegate void HExecRowChangeEventHandler(object sender, HExecRowChangeEvent e);
        
        public delegate void UpperPlanRowChangeEventHandler(object sender, UpperPlanRowChangeEvent e);
        
        public delegate void ncfRowChangeEventHandler(object sender, ncfRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class valuesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVALUE;
            
            private DataColumn columnCAR0;
            
            private DataColumn columnCAR1;
            
            private DataColumn columnCAR2;
            
            private DataColumn columnCAR3;
            
            private DataColumn columnCAR4;
            
            private DataColumn columnCAR5;
            
            private DataColumn columnCAR6;
            
            private DataColumn columnCAR7;
            
            internal valuesDataTable() : 
                    base("values") {
                this.InitClass();
            }
            
            internal valuesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            internal DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            internal DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            internal DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            internal DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            internal DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            internal DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            internal DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            internal DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            public valuesRow this[int index] {
                get {
                    return ((valuesRow)(this.Rows[index]));
                }
            }
            
            public event valuesRowChangeEventHandler valuesRowChanged;
            
            public event valuesRowChangeEventHandler valuesRowChanging;
            
            public event valuesRowChangeEventHandler valuesRowDeleted;
            
            public event valuesRowChangeEventHandler valuesRowDeleting;
            
            public void AddvaluesRow(valuesRow row) {
                this.Rows.Add(row);
            }
            
            public valuesRow AddvaluesRow(string VALUE, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                valuesRow rowvaluesRow = ((valuesRow)(this.NewRow()));
                rowvaluesRow.ItemArray = new object[] {
                        VALUE,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowvaluesRow);
                return rowvaluesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                valuesDataTable cln = ((valuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new valuesDataTable();
            }
            
            internal void InitVars() {
                this.columnVALUE = this.Columns["VALUE"];
                this.columnCAR0 = this.Columns["CAR0"];
                this.columnCAR1 = this.Columns["CAR1"];
                this.columnCAR2 = this.Columns["CAR2"];
                this.columnCAR3 = this.Columns["CAR3"];
                this.columnCAR4 = this.Columns["CAR4"];
                this.columnCAR5 = this.Columns["CAR5"];
                this.columnCAR6 = this.Columns["CAR6"];
                this.columnCAR7 = this.Columns["CAR7"];
            }
            
            private void InitClass() {
                this.columnVALUE = new DataColumn("VALUE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVALUE);
                this.columnCAR0 = new DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR7);
            }
            
            public valuesRow NewvaluesRow() {
                return ((valuesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new valuesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(valuesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.valuesRowChanged != null)) {
                    this.valuesRowChanged(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.valuesRowChanging != null)) {
                    this.valuesRowChanging(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.valuesRowDeleted != null)) {
                    this.valuesRowDeleted(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.valuesRowDeleting != null)) {
                    this.valuesRowDeleting(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovevaluesRow(valuesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class valuesRow : DataRow {
            
            private valuesDataTable tablevalues;
            
            internal valuesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablevalues = ((valuesDataTable)(this.Table));
            }
            
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tablevalues.VALUEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.VALUEColumn] = value;
                }
            }
            
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR0Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR0Column] = value;
                }
            }
            
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR1Column] = value;
                }
            }
            
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR2Column] = value;
                }
            }
            
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR3Column] = value;
                }
            }
            
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR4Column] = value;
                }
            }
            
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR5Column] = value;
                }
            }
            
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR6Column] = value;
                }
            }
            
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR7Column] = value;
                }
            }
            
            public bool IsVALUENull() {
                return this.IsNull(this.tablevalues.VALUEColumn);
            }
            
            public void SetVALUENull() {
                this[this.tablevalues.VALUEColumn] = System.Convert.DBNull;
            }
            
            public bool IsCAR0Null() {
                return this.IsNull(this.tablevalues.CAR0Column);
            }
            
            public void SetCAR0Null() {
                this[this.tablevalues.CAR0Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR1Null() {
                return this.IsNull(this.tablevalues.CAR1Column);
            }
            
            public void SetCAR1Null() {
                this[this.tablevalues.CAR1Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR2Null() {
                return this.IsNull(this.tablevalues.CAR2Column);
            }
            
            public void SetCAR2Null() {
                this[this.tablevalues.CAR2Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR3Null() {
                return this.IsNull(this.tablevalues.CAR3Column);
            }
            
            public void SetCAR3Null() {
                this[this.tablevalues.CAR3Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR4Null() {
                return this.IsNull(this.tablevalues.CAR4Column);
            }
            
            public void SetCAR4Null() {
                this[this.tablevalues.CAR4Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR5Null() {
                return this.IsNull(this.tablevalues.CAR5Column);
            }
            
            public void SetCAR5Null() {
                this[this.tablevalues.CAR5Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR6Null() {
                return this.IsNull(this.tablevalues.CAR6Column);
            }
            
            public void SetCAR6Null() {
                this[this.tablevalues.CAR6Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR7Null() {
                return this.IsNull(this.tablevalues.CAR7Column);
            }
            
            public void SetCAR7Null() {
                this[this.tablevalues.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class valuesRowChangeEvent : EventArgs {
            
            private valuesRow eventRow;
            
            private DataRowAction eventAction;
            
            public valuesRowChangeEvent(valuesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public valuesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class floorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVALUE;
            
            private DataColumn columnCAR0;
            
            private DataColumn columnCAR1;
            
            private DataColumn columnCAR2;
            
            private DataColumn columnCAR3;
            
            private DataColumn columnCAR4;
            
            private DataColumn columnCAR5;
            
            private DataColumn columnCAR6;
            
            private DataColumn columnCAR7;
            
            internal floorDataTable() : 
                    base("floor") {
                this.InitClass();
            }
            
            internal floorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            internal DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            internal DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            internal DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            internal DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            internal DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            internal DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            internal DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            internal DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            public floorRow this[int index] {
                get {
                    return ((floorRow)(this.Rows[index]));
                }
            }
            
            public event floorRowChangeEventHandler floorRowChanged;
            
            public event floorRowChangeEventHandler floorRowChanging;
            
            public event floorRowChangeEventHandler floorRowDeleted;
            
            public event floorRowChangeEventHandler floorRowDeleting;
            
            public void AddfloorRow(floorRow row) {
                this.Rows.Add(row);
            }
            
            public floorRow AddfloorRow(string VALUE, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                floorRow rowfloorRow = ((floorRow)(this.NewRow()));
                rowfloorRow.ItemArray = new object[] {
                        VALUE,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowfloorRow);
                return rowfloorRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                floorDataTable cln = ((floorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new floorDataTable();
            }
            
            internal void InitVars() {
                this.columnVALUE = this.Columns["VALUE"];
                this.columnCAR0 = this.Columns["CAR0"];
                this.columnCAR1 = this.Columns["CAR1"];
                this.columnCAR2 = this.Columns["CAR2"];
                this.columnCAR3 = this.Columns["CAR3"];
                this.columnCAR4 = this.Columns["CAR4"];
                this.columnCAR5 = this.Columns["CAR5"];
                this.columnCAR6 = this.Columns["CAR6"];
                this.columnCAR7 = this.Columns["CAR7"];
            }
            
            private void InitClass() {
                this.columnVALUE = new DataColumn("VALUE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVALUE);
                this.columnCAR0 = new DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR7);
            }
            
            public floorRow NewfloorRow() {
                return ((floorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new floorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(floorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.floorRowChanged != null)) {
                    this.floorRowChanged(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.floorRowChanging != null)) {
                    this.floorRowChanging(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.floorRowDeleted != null)) {
                    this.floorRowDeleted(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.floorRowDeleting != null)) {
                    this.floorRowDeleting(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefloorRow(floorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class floorRow : DataRow {
            
            private floorDataTable tablefloor;
            
            internal floorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefloor = ((floorDataTable)(this.Table));
            }
            
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tablefloor.VALUEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.VALUEColumn] = value;
                }
            }
            
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR0Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR0Column] = value;
                }
            }
            
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR1Column] = value;
                }
            }
            
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR2Column] = value;
                }
            }
            
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR3Column] = value;
                }
            }
            
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR4Column] = value;
                }
            }
            
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR5Column] = value;
                }
            }
            
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR6Column] = value;
                }
            }
            
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR7Column] = value;
                }
            }
            
            public bool IsVALUENull() {
                return this.IsNull(this.tablefloor.VALUEColumn);
            }
            
            public void SetVALUENull() {
                this[this.tablefloor.VALUEColumn] = System.Convert.DBNull;
            }
            
            public bool IsCAR0Null() {
                return this.IsNull(this.tablefloor.CAR0Column);
            }
            
            public void SetCAR0Null() {
                this[this.tablefloor.CAR0Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR1Null() {
                return this.IsNull(this.tablefloor.CAR1Column);
            }
            
            public void SetCAR1Null() {
                this[this.tablefloor.CAR1Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR2Null() {
                return this.IsNull(this.tablefloor.CAR2Column);
            }
            
            public void SetCAR2Null() {
                this[this.tablefloor.CAR2Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR3Null() {
                return this.IsNull(this.tablefloor.CAR3Column);
            }
            
            public void SetCAR3Null() {
                this[this.tablefloor.CAR3Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR4Null() {
                return this.IsNull(this.tablefloor.CAR4Column);
            }
            
            public void SetCAR4Null() {
                this[this.tablefloor.CAR4Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR5Null() {
                return this.IsNull(this.tablefloor.CAR5Column);
            }
            
            public void SetCAR5Null() {
                this[this.tablefloor.CAR5Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR6Null() {
                return this.IsNull(this.tablefloor.CAR6Column);
            }
            
            public void SetCAR6Null() {
                this[this.tablefloor.CAR6Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR7Null() {
                return this.IsNull(this.tablefloor.CAR7Column);
            }
            
            public void SetCAR7Null() {
                this[this.tablefloor.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class floorRowChangeEvent : EventArgs {
            
            private floorRow eventRow;
            
            private DataRowAction eventAction;
            
            public floorRowChangeEvent(floorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public floorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class posDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntime;
            
            private DataColumn columnCAR0;
            
            private DataColumn columnCAR1;
            
            private DataColumn columnCAR2;
            
            private DataColumn columnCAR3;
            
            private DataColumn columnCAR4;
            
            private DataColumn columnCAR5;
            
            private DataColumn columnCAR6;
            
            private DataColumn columnCAR7;
            
            internal posDataTable() : 
                    base("pos") {
                this.InitClass();
            }
            
            internal posDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            internal DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            internal DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            internal DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            internal DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            internal DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            internal DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            internal DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            internal DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            public posRow this[int index] {
                get {
                    return ((posRow)(this.Rows[index]));
                }
            }
            
            public event posRowChangeEventHandler posRowChanged;
            
            public event posRowChangeEventHandler posRowChanging;
            
            public event posRowChangeEventHandler posRowDeleted;
            
            public event posRowChangeEventHandler posRowDeleting;
            
            public void AddposRow(posRow row) {
                this.Rows.Add(row);
            }
            
            public posRow AddposRow(string time, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                posRow rowposRow = ((posRow)(this.NewRow()));
                rowposRow.ItemArray = new object[] {
                        time,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowposRow);
                return rowposRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                posDataTable cln = ((posDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new posDataTable();
            }
            
            internal void InitVars() {
                this.columntime = this.Columns["time"];
                this.columnCAR0 = this.Columns["CAR0"];
                this.columnCAR1 = this.Columns["CAR1"];
                this.columnCAR2 = this.Columns["CAR2"];
                this.columnCAR3 = this.Columns["CAR3"];
                this.columnCAR4 = this.Columns["CAR4"];
                this.columnCAR5 = this.Columns["CAR5"];
                this.columnCAR6 = this.Columns["CAR6"];
                this.columnCAR7 = this.Columns["CAR7"];
            }
            
            private void InitClass() {
                this.columntime = new DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntime);
                this.columnCAR0 = new DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR7);
            }
            
            public posRow NewposRow() {
                return ((posRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new posRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(posRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.posRowChanged != null)) {
                    this.posRowChanged(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.posRowChanging != null)) {
                    this.posRowChanging(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.posRowDeleted != null)) {
                    this.posRowDeleted(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.posRowDeleting != null)) {
                    this.posRowDeleting(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveposRow(posRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class posRow : DataRow {
            
            private posDataTable tablepos;
            
            internal posRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablepos = ((posDataTable)(this.Table));
            }
            
            public string time {
                get {
                    try {
                        return ((string)(this[this.tablepos.timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.timeColumn] = value;
                }
            }
            
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR0Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR0Column] = value;
                }
            }
            
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR1Column] = value;
                }
            }
            
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR2Column] = value;
                }
            }
            
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR3Column] = value;
                }
            }
            
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR4Column] = value;
                }
            }
            
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR5Column] = value;
                }
            }
            
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR6Column] = value;
                }
            }
            
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR7Column] = value;
                }
            }
            
            public bool IstimeNull() {
                return this.IsNull(this.tablepos.timeColumn);
            }
            
            public void SettimeNull() {
                this[this.tablepos.timeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCAR0Null() {
                return this.IsNull(this.tablepos.CAR0Column);
            }
            
            public void SetCAR0Null() {
                this[this.tablepos.CAR0Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR1Null() {
                return this.IsNull(this.tablepos.CAR1Column);
            }
            
            public void SetCAR1Null() {
                this[this.tablepos.CAR1Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR2Null() {
                return this.IsNull(this.tablepos.CAR2Column);
            }
            
            public void SetCAR2Null() {
                this[this.tablepos.CAR2Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR3Null() {
                return this.IsNull(this.tablepos.CAR3Column);
            }
            
            public void SetCAR3Null() {
                this[this.tablepos.CAR3Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR4Null() {
                return this.IsNull(this.tablepos.CAR4Column);
            }
            
            public void SetCAR4Null() {
                this[this.tablepos.CAR4Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR5Null() {
                return this.IsNull(this.tablepos.CAR5Column);
            }
            
            public void SetCAR5Null() {
                this[this.tablepos.CAR5Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR6Null() {
                return this.IsNull(this.tablepos.CAR6Column);
            }
            
            public void SetCAR6Null() {
                this[this.tablepos.CAR6Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR7Null() {
                return this.IsNull(this.tablepos.CAR7Column);
            }
            
            public void SetCAR7Null() {
                this[this.tablepos.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class posRowChangeEvent : EventArgs {
            
            private posRow eventRow;
            
            private DataRowAction eventAction;
            
            public posRowChangeEvent(posRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public posRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalcDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTimeA;
            
            private DataColumn columnAccA;
            
            private DataColumn columnVelocityA;
            
            private DataColumn columnDistanceA;
            
            private DataColumn columnUCarPos;
            
            private DataColumn columnUCarFloor;
            
            private DataColumn columnUCarNCF;
            
            private DataColumn columnUCarNSP;
            
            private DataColumn columnUCarNSF;
            
            private DataColumn columnTimeB;
            
            private DataColumn columnAccB;
            
            private DataColumn columnVelocityB;
            
            private DataColumn columnDistanceB;
            
            private DataColumn columnLCarPos;
            
            private DataColumn columnLCarFloor;
            
            private DataColumn columnLCarNCF;
            
            private DataColumn columnLCarNSP;
            
            private DataColumn columnLCarNSF;
            
            internal CalcDataTable() : 
                    base("Calc") {
                this.InitClass();
            }
            
            internal CalcDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TimeAColumn {
                get {
                    return this.columnTimeA;
                }
            }
            
            internal DataColumn AccAColumn {
                get {
                    return this.columnAccA;
                }
            }
            
            internal DataColumn VelocityAColumn {
                get {
                    return this.columnVelocityA;
                }
            }
            
            internal DataColumn DistanceAColumn {
                get {
                    return this.columnDistanceA;
                }
            }
            
            internal DataColumn UCarPosColumn {
                get {
                    return this.columnUCarPos;
                }
            }
            
            internal DataColumn UCarFloorColumn {
                get {
                    return this.columnUCarFloor;
                }
            }
            
            internal DataColumn UCarNCFColumn {
                get {
                    return this.columnUCarNCF;
                }
            }
            
            internal DataColumn UCarNSPColumn {
                get {
                    return this.columnUCarNSP;
                }
            }
            
            internal DataColumn UCarNSFColumn {
                get {
                    return this.columnUCarNSF;
                }
            }
            
            internal DataColumn TimeBColumn {
                get {
                    return this.columnTimeB;
                }
            }
            
            internal DataColumn AccBColumn {
                get {
                    return this.columnAccB;
                }
            }
            
            internal DataColumn VelocityBColumn {
                get {
                    return this.columnVelocityB;
                }
            }
            
            internal DataColumn DistanceBColumn {
                get {
                    return this.columnDistanceB;
                }
            }
            
            internal DataColumn LCarPosColumn {
                get {
                    return this.columnLCarPos;
                }
            }
            
            internal DataColumn LCarFloorColumn {
                get {
                    return this.columnLCarFloor;
                }
            }
            
            internal DataColumn LCarNCFColumn {
                get {
                    return this.columnLCarNCF;
                }
            }
            
            internal DataColumn LCarNSPColumn {
                get {
                    return this.columnLCarNSP;
                }
            }
            
            internal DataColumn LCarNSFColumn {
                get {
                    return this.columnLCarNSF;
                }
            }
            
            public CalcRow this[int index] {
                get {
                    return ((CalcRow)(this.Rows[index]));
                }
            }
            
            public event CalcRowChangeEventHandler CalcRowChanged;
            
            public event CalcRowChangeEventHandler CalcRowChanging;
            
            public event CalcRowChangeEventHandler CalcRowDeleted;
            
            public event CalcRowChangeEventHandler CalcRowDeleting;
            
            public void AddCalcRow(CalcRow row) {
                this.Rows.Add(row);
            }
            
            public CalcRow AddCalcRow(
                        System.Double TimeA, 
                        System.Double AccA, 
                        System.Double VelocityA, 
                        System.Double DistanceA, 
                        System.Double UCarPos, 
                        int UCarFloor, 
                        int UCarNCF, 
                        System.Double UCarNSP, 
                        int UCarNSF, 
                        System.Double TimeB, 
                        System.Double AccB, 
                        System.Double VelocityB, 
                        System.Double DistanceB, 
                        System.Double LCarPos, 
                        int LCarFloor, 
                        int LCarNCF, 
                        System.Double LCarNSP, 
                        int LCarNSF) {
                CalcRow rowCalcRow = ((CalcRow)(this.NewRow()));
                rowCalcRow.ItemArray = new object[] {
                        TimeA,
                        AccA,
                        VelocityA,
                        DistanceA,
                        UCarPos,
                        UCarFloor,
                        UCarNCF,
                        UCarNSP,
                        UCarNSF,
                        TimeB,
                        AccB,
                        VelocityB,
                        DistanceB,
                        LCarPos,
                        LCarFloor,
                        LCarNCF,
                        LCarNSP,
                        LCarNSF};
                this.Rows.Add(rowCalcRow);
                return rowCalcRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CalcDataTable cln = ((CalcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CalcDataTable();
            }
            
            internal void InitVars() {
                this.columnTimeA = this.Columns["TimeA"];
                this.columnAccA = this.Columns["AccA"];
                this.columnVelocityA = this.Columns["VelocityA"];
                this.columnDistanceA = this.Columns["DistanceA"];
                this.columnUCarPos = this.Columns["UCarPos"];
                this.columnUCarFloor = this.Columns["UCarFloor"];
                this.columnUCarNCF = this.Columns["UCarNCF"];
                this.columnUCarNSP = this.Columns["UCarNSP"];
                this.columnUCarNSF = this.Columns["UCarNSF"];
                this.columnTimeB = this.Columns["TimeB"];
                this.columnAccB = this.Columns["AccB"];
                this.columnVelocityB = this.Columns["VelocityB"];
                this.columnDistanceB = this.Columns["DistanceB"];
                this.columnLCarPos = this.Columns["LCarPos"];
                this.columnLCarFloor = this.Columns["LCarFloor"];
                this.columnLCarNCF = this.Columns["LCarNCF"];
                this.columnLCarNSP = this.Columns["LCarNSP"];
                this.columnLCarNSF = this.Columns["LCarNSF"];
            }
            
            private void InitClass() {
                this.columnTimeA = new DataColumn("TimeA", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeA);
                this.columnAccA = new DataColumn("AccA", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccA);
                this.columnVelocityA = new DataColumn("VelocityA", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVelocityA);
                this.columnDistanceA = new DataColumn("DistanceA", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDistanceA);
                this.columnUCarPos = new DataColumn("UCarPos", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUCarPos);
                this.columnUCarFloor = new DataColumn("UCarFloor", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUCarFloor);
                this.columnUCarNCF = new DataColumn("UCarNCF", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUCarNCF);
                this.columnUCarNSP = new DataColumn("UCarNSP", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUCarNSP);
                this.columnUCarNSF = new DataColumn("UCarNSF", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUCarNSF);
                this.columnTimeB = new DataColumn("TimeB", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeB);
                this.columnAccB = new DataColumn("AccB", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccB);
                this.columnVelocityB = new DataColumn("VelocityB", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVelocityB);
                this.columnDistanceB = new DataColumn("DistanceB", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDistanceB);
                this.columnLCarPos = new DataColumn("LCarPos", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLCarPos);
                this.columnLCarFloor = new DataColumn("LCarFloor", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLCarFloor);
                this.columnLCarNCF = new DataColumn("LCarNCF", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLCarNCF);
                this.columnLCarNSP = new DataColumn("LCarNSP", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLCarNSP);
                this.columnLCarNSF = new DataColumn("LCarNSF", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLCarNSF);
            }
            
            public CalcRow NewCalcRow() {
                return ((CalcRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CalcRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CalcRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalcRowChanged != null)) {
                    this.CalcRowChanged(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalcRowChanging != null)) {
                    this.CalcRowChanging(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalcRowDeleted != null)) {
                    this.CalcRowDeleted(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalcRowDeleting != null)) {
                    this.CalcRowDeleting(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCalcRow(CalcRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalcRow : DataRow {
            
            private CalcDataTable tableCalc;
            
            internal CalcRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalc = ((CalcDataTable)(this.Table));
            }
            
            public System.Double TimeA {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.TimeAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.TimeAColumn] = value;
                }
            }
            
            public System.Double AccA {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.AccAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.AccAColumn] = value;
                }
            }
            
            public System.Double VelocityA {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.VelocityAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.VelocityAColumn] = value;
                }
            }
            
            public System.Double DistanceA {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.DistanceAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.DistanceAColumn] = value;
                }
            }
            
            public System.Double UCarPos {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.UCarPosColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarPosColumn] = value;
                }
            }
            
            public int UCarFloor {
                get {
                    try {
                        return ((int)(this[this.tableCalc.UCarFloorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarFloorColumn] = value;
                }
            }
            
            public int UCarNCF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.UCarNCFColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarNCFColumn] = value;
                }
            }
            
            public System.Double UCarNSP {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.UCarNSPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarNSPColumn] = value;
                }
            }
            
            public int UCarNSF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.UCarNSFColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarNSFColumn] = value;
                }
            }
            
            public System.Double TimeB {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.TimeBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.TimeBColumn] = value;
                }
            }
            
            public System.Double AccB {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.AccBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.AccBColumn] = value;
                }
            }
            
            public System.Double VelocityB {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.VelocityBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.VelocityBColumn] = value;
                }
            }
            
            public System.Double DistanceB {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.DistanceBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.DistanceBColumn] = value;
                }
            }
            
            public System.Double LCarPos {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.LCarPosColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarPosColumn] = value;
                }
            }
            
            public int LCarFloor {
                get {
                    try {
                        return ((int)(this[this.tableCalc.LCarFloorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarFloorColumn] = value;
                }
            }
            
            public int LCarNCF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.LCarNCFColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarNCFColumn] = value;
                }
            }
            
            public System.Double LCarNSP {
                get {
                    try {
                        return ((System.Double)(this[this.tableCalc.LCarNSPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarNSPColumn] = value;
                }
            }
            
            public int LCarNSF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.LCarNSFColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarNSFColumn] = value;
                }
            }
            
            public bool IsTimeANull() {
                return this.IsNull(this.tableCalc.TimeAColumn);
            }
            
            public void SetTimeANull() {
                this[this.tableCalc.TimeAColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccANull() {
                return this.IsNull(this.tableCalc.AccAColumn);
            }
            
            public void SetAccANull() {
                this[this.tableCalc.AccAColumn] = System.Convert.DBNull;
            }
            
            public bool IsVelocityANull() {
                return this.IsNull(this.tableCalc.VelocityAColumn);
            }
            
            public void SetVelocityANull() {
                this[this.tableCalc.VelocityAColumn] = System.Convert.DBNull;
            }
            
            public bool IsDistanceANull() {
                return this.IsNull(this.tableCalc.DistanceAColumn);
            }
            
            public void SetDistanceANull() {
                this[this.tableCalc.DistanceAColumn] = System.Convert.DBNull;
            }
            
            public bool IsUCarPosNull() {
                return this.IsNull(this.tableCalc.UCarPosColumn);
            }
            
            public void SetUCarPosNull() {
                this[this.tableCalc.UCarPosColumn] = System.Convert.DBNull;
            }
            
            public bool IsUCarFloorNull() {
                return this.IsNull(this.tableCalc.UCarFloorColumn);
            }
            
            public void SetUCarFloorNull() {
                this[this.tableCalc.UCarFloorColumn] = System.Convert.DBNull;
            }
            
            public bool IsUCarNCFNull() {
                return this.IsNull(this.tableCalc.UCarNCFColumn);
            }
            
            public void SetUCarNCFNull() {
                this[this.tableCalc.UCarNCFColumn] = System.Convert.DBNull;
            }
            
            public bool IsUCarNSPNull() {
                return this.IsNull(this.tableCalc.UCarNSPColumn);
            }
            
            public void SetUCarNSPNull() {
                this[this.tableCalc.UCarNSPColumn] = System.Convert.DBNull;
            }
            
            public bool IsUCarNSFNull() {
                return this.IsNull(this.tableCalc.UCarNSFColumn);
            }
            
            public void SetUCarNSFNull() {
                this[this.tableCalc.UCarNSFColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeBNull() {
                return this.IsNull(this.tableCalc.TimeBColumn);
            }
            
            public void SetTimeBNull() {
                this[this.tableCalc.TimeBColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccBNull() {
                return this.IsNull(this.tableCalc.AccBColumn);
            }
            
            public void SetAccBNull() {
                this[this.tableCalc.AccBColumn] = System.Convert.DBNull;
            }
            
            public bool IsVelocityBNull() {
                return this.IsNull(this.tableCalc.VelocityBColumn);
            }
            
            public void SetVelocityBNull() {
                this[this.tableCalc.VelocityBColumn] = System.Convert.DBNull;
            }
            
            public bool IsDistanceBNull() {
                return this.IsNull(this.tableCalc.DistanceBColumn);
            }
            
            public void SetDistanceBNull() {
                this[this.tableCalc.DistanceBColumn] = System.Convert.DBNull;
            }
            
            public bool IsLCarPosNull() {
                return this.IsNull(this.tableCalc.LCarPosColumn);
            }
            
            public void SetLCarPosNull() {
                this[this.tableCalc.LCarPosColumn] = System.Convert.DBNull;
            }
            
            public bool IsLCarFloorNull() {
                return this.IsNull(this.tableCalc.LCarFloorColumn);
            }
            
            public void SetLCarFloorNull() {
                this[this.tableCalc.LCarFloorColumn] = System.Convert.DBNull;
            }
            
            public bool IsLCarNCFNull() {
                return this.IsNull(this.tableCalc.LCarNCFColumn);
            }
            
            public void SetLCarNCFNull() {
                this[this.tableCalc.LCarNCFColumn] = System.Convert.DBNull;
            }
            
            public bool IsLCarNSPNull() {
                return this.IsNull(this.tableCalc.LCarNSPColumn);
            }
            
            public void SetLCarNSPNull() {
                this[this.tableCalc.LCarNSPColumn] = System.Convert.DBNull;
            }
            
            public bool IsLCarNSFNull() {
                return this.IsNull(this.tableCalc.LCarNSFColumn);
            }
            
            public void SetLCarNSFNull() {
                this[this.tableCalc.LCarNSFColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalcRowChangeEvent : EventArgs {
            
            private CalcRow eventRow;
            
            private DataRowAction eventAction;
            
            public CalcRowChangeEvent(CalcRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CalcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HexecALLDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncar;
            
            private DataColumn columntime;
            
            private DataColumn columnstate;
            
            private DataColumn columnactual_pos;
            
            private DataColumn columntarget_pos;
            
            private DataColumn columnNCF;
            
            private DataColumn columnDoorState;
            
            private DataColumn columnMotionState;
            
            private DataColumn columnmov_dir;
            
            private DataColumn columndecel;
            
            private DataColumn columncmd_target;
            
            private DataColumn columncmd_door;
            
            private DataColumn columncmd_dwell;
            
            private DataColumn columnotherCarControl;
            
            internal HexecALLDataTable() : 
                    base("HexecALL") {
                this.InitClass();
            }
            
            internal HexecALLDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn carColumn {
                get {
                    return this.columncar;
                }
            }
            
            internal DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn actual_posColumn {
                get {
                    return this.columnactual_pos;
                }
            }
            
            internal DataColumn target_posColumn {
                get {
                    return this.columntarget_pos;
                }
            }
            
            internal DataColumn NCFColumn {
                get {
                    return this.columnNCF;
                }
            }
            
            internal DataColumn DoorStateColumn {
                get {
                    return this.columnDoorState;
                }
            }
            
            internal DataColumn MotionStateColumn {
                get {
                    return this.columnMotionState;
                }
            }
            
            internal DataColumn mov_dirColumn {
                get {
                    return this.columnmov_dir;
                }
            }
            
            internal DataColumn decelColumn {
                get {
                    return this.columndecel;
                }
            }
            
            internal DataColumn cmd_targetColumn {
                get {
                    return this.columncmd_target;
                }
            }
            
            internal DataColumn cmd_doorColumn {
                get {
                    return this.columncmd_door;
                }
            }
            
            internal DataColumn cmd_dwellColumn {
                get {
                    return this.columncmd_dwell;
                }
            }
            
            internal DataColumn otherCarControlColumn {
                get {
                    return this.columnotherCarControl;
                }
            }
            
            public HexecALLRow this[int index] {
                get {
                    return ((HexecALLRow)(this.Rows[index]));
                }
            }
            
            public event HexecALLRowChangeEventHandler HexecALLRowChanged;
            
            public event HexecALLRowChangeEventHandler HexecALLRowChanging;
            
            public event HexecALLRowChangeEventHandler HexecALLRowDeleted;
            
            public event HexecALLRowChangeEventHandler HexecALLRowDeleting;
            
            public void AddHexecALLRow(HexecALLRow row) {
                this.Rows.Add(row);
            }
            
            public HexecALLRow AddHexecALLRow(string car, string time, string state, string actual_pos, string target_pos, string NCF, string DoorState, string MotionState, string mov_dir, string decel, string cmd_target, string cmd_door, string cmd_dwell, string otherCarControl) {
                HexecALLRow rowHexecALLRow = ((HexecALLRow)(this.NewRow()));
                rowHexecALLRow.ItemArray = new object[] {
                        car,
                        time,
                        state,
                        actual_pos,
                        target_pos,
                        NCF,
                        DoorState,
                        MotionState,
                        mov_dir,
                        decel,
                        cmd_target,
                        cmd_door,
                        cmd_dwell,
                        otherCarControl};
                this.Rows.Add(rowHexecALLRow);
                return rowHexecALLRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HexecALLDataTable cln = ((HexecALLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HexecALLDataTable();
            }
            
            internal void InitVars() {
                this.columncar = this.Columns["car"];
                this.columntime = this.Columns["time"];
                this.columnstate = this.Columns["state"];
                this.columnactual_pos = this.Columns["actual_pos"];
                this.columntarget_pos = this.Columns["target_pos"];
                this.columnNCF = this.Columns["NCF"];
                this.columnDoorState = this.Columns["DoorState"];
                this.columnMotionState = this.Columns["MotionState"];
                this.columnmov_dir = this.Columns["mov_dir"];
                this.columndecel = this.Columns["decel"];
                this.columncmd_target = this.Columns["cmd_target"];
                this.columncmd_door = this.Columns["cmd_door"];
                this.columncmd_dwell = this.Columns["cmd_dwell"];
                this.columnotherCarControl = this.Columns["otherCarControl"];
            }
            
            private void InitClass() {
                this.columncar = new DataColumn("car", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncar);
                this.columntime = new DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntime);
                this.columnstate = new DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnactual_pos = new DataColumn("actual_pos", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnactual_pos);
                this.columntarget_pos = new DataColumn("target_pos", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntarget_pos);
                this.columnNCF = new DataColumn("NCF", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNCF);
                this.columnDoorState = new DataColumn("DoorState", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDoorState);
                this.columnMotionState = new DataColumn("MotionState", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMotionState);
                this.columnmov_dir = new DataColumn("mov_dir", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmov_dir);
                this.columndecel = new DataColumn("decel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndecel);
                this.columncmd_target = new DataColumn("cmd_target", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncmd_target);
                this.columncmd_door = new DataColumn("cmd_door", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncmd_door);
                this.columncmd_dwell = new DataColumn("cmd_dwell", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncmd_dwell);
                this.columnotherCarControl = new DataColumn("otherCarControl", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnotherCarControl);
            }
            
            public HexecALLRow NewHexecALLRow() {
                return ((HexecALLRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HexecALLRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HexecALLRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HexecALLRowChanged != null)) {
                    this.HexecALLRowChanged(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HexecALLRowChanging != null)) {
                    this.HexecALLRowChanging(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HexecALLRowDeleted != null)) {
                    this.HexecALLRowDeleted(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HexecALLRowDeleting != null)) {
                    this.HexecALLRowDeleting(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHexecALLRow(HexecALLRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HexecALLRow : DataRow {
            
            private HexecALLDataTable tableHexecALL;
            
            internal HexecALLRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHexecALL = ((HexecALLDataTable)(this.Table));
            }
            
            public string car {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.carColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.carColumn] = value;
                }
            }
            
            public string time {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.timeColumn] = value;
                }
            }
            
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.stateColumn] = value;
                }
            }
            
            public string actual_pos {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.actual_posColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.actual_posColumn] = value;
                }
            }
            
            public string target_pos {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.target_posColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.target_posColumn] = value;
                }
            }
            
            public string NCF {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.NCFColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.NCFColumn] = value;
                }
            }
            
            public string DoorState {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.DoorStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.DoorStateColumn] = value;
                }
            }
            
            public string MotionState {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.MotionStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.MotionStateColumn] = value;
                }
            }
            
            public string mov_dir {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.mov_dirColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.mov_dirColumn] = value;
                }
            }
            
            public string decel {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.decelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.decelColumn] = value;
                }
            }
            
            public string cmd_target {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.cmd_targetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.cmd_targetColumn] = value;
                }
            }
            
            public string cmd_door {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.cmd_doorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.cmd_doorColumn] = value;
                }
            }
            
            public string cmd_dwell {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.cmd_dwellColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.cmd_dwellColumn] = value;
                }
            }
            
            public string otherCarControl {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.otherCarControlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.otherCarControlColumn] = value;
                }
            }
            
            public bool IscarNull() {
                return this.IsNull(this.tableHexecALL.carColumn);
            }
            
            public void SetcarNull() {
                this[this.tableHexecALL.carColumn] = System.Convert.DBNull;
            }
            
            public bool IstimeNull() {
                return this.IsNull(this.tableHexecALL.timeColumn);
            }
            
            public void SettimeNull() {
                this[this.tableHexecALL.timeColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tableHexecALL.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tableHexecALL.stateColumn] = System.Convert.DBNull;
            }
            
            public bool Isactual_posNull() {
                return this.IsNull(this.tableHexecALL.actual_posColumn);
            }
            
            public void Setactual_posNull() {
                this[this.tableHexecALL.actual_posColumn] = System.Convert.DBNull;
            }
            
            public bool Istarget_posNull() {
                return this.IsNull(this.tableHexecALL.target_posColumn);
            }
            
            public void Settarget_posNull() {
                this[this.tableHexecALL.target_posColumn] = System.Convert.DBNull;
            }
            
            public bool IsNCFNull() {
                return this.IsNull(this.tableHexecALL.NCFColumn);
            }
            
            public void SetNCFNull() {
                this[this.tableHexecALL.NCFColumn] = System.Convert.DBNull;
            }
            
            public bool IsDoorStateNull() {
                return this.IsNull(this.tableHexecALL.DoorStateColumn);
            }
            
            public void SetDoorStateNull() {
                this[this.tableHexecALL.DoorStateColumn] = System.Convert.DBNull;
            }
            
            public bool IsMotionStateNull() {
                return this.IsNull(this.tableHexecALL.MotionStateColumn);
            }
            
            public void SetMotionStateNull() {
                this[this.tableHexecALL.MotionStateColumn] = System.Convert.DBNull;
            }
            
            public bool Ismov_dirNull() {
                return this.IsNull(this.tableHexecALL.mov_dirColumn);
            }
            
            public void Setmov_dirNull() {
                this[this.tableHexecALL.mov_dirColumn] = System.Convert.DBNull;
            }
            
            public bool IsdecelNull() {
                return this.IsNull(this.tableHexecALL.decelColumn);
            }
            
            public void SetdecelNull() {
                this[this.tableHexecALL.decelColumn] = System.Convert.DBNull;
            }
            
            public bool Iscmd_targetNull() {
                return this.IsNull(this.tableHexecALL.cmd_targetColumn);
            }
            
            public void Setcmd_targetNull() {
                this[this.tableHexecALL.cmd_targetColumn] = System.Convert.DBNull;
            }
            
            public bool Iscmd_doorNull() {
                return this.IsNull(this.tableHexecALL.cmd_doorColumn);
            }
            
            public void Setcmd_doorNull() {
                this[this.tableHexecALL.cmd_doorColumn] = System.Convert.DBNull;
            }
            
            public bool Iscmd_dwellNull() {
                return this.IsNull(this.tableHexecALL.cmd_dwellColumn);
            }
            
            public void Setcmd_dwellNull() {
                this[this.tableHexecALL.cmd_dwellColumn] = System.Convert.DBNull;
            }
            
            public bool IsotherCarControlNull() {
                return this.IsNull(this.tableHexecALL.otherCarControlColumn);
            }
            
            public void SetotherCarControlNull() {
                this[this.tableHexecALL.otherCarControlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HexecALLRowChangeEvent : EventArgs {
            
            private HexecALLRow eventRow;
            
            private DataRowAction eventAction;
            
            public HexecALLRowChangeEvent(HexecALLRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HexecALLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HExecDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntime;
            
            private DataColumn columnstate;
            
            private DataColumn columnactual_pos;
            
            private DataColumn columntarget_pos;
            
            private DataColumn columnNCF;
            
            private DataColumn columnDoorState;
            
            private DataColumn columnMotionState;
            
            private DataColumn columnmov_dir;
            
            private DataColumn columndecel;
            
            private DataColumn columncmd_target;
            
            private DataColumn columncmd_door;
            
            private DataColumn columncmd_dwell;
            
            private DataColumn columnotherCarControl;
            
            internal HExecDataTable() : 
                    base("HExec") {
                this.InitClass();
            }
            
            internal HExecDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn actual_posColumn {
                get {
                    return this.columnactual_pos;
                }
            }
            
            internal DataColumn target_posColumn {
                get {
                    return this.columntarget_pos;
                }
            }
            
            internal DataColumn NCFColumn {
                get {
                    return this.columnNCF;
                }
            }
            
            internal DataColumn DoorStateColumn {
                get {
                    return this.columnDoorState;
                }
            }
            
            internal DataColumn MotionStateColumn {
                get {
                    return this.columnMotionState;
                }
            }
            
            internal DataColumn mov_dirColumn {
                get {
                    return this.columnmov_dir;
                }
            }
            
            internal DataColumn decelColumn {
                get {
                    return this.columndecel;
                }
            }
            
            internal DataColumn cmd_targetColumn {
                get {
                    return this.columncmd_target;
                }
            }
            
            internal DataColumn cmd_doorColumn {
                get {
                    return this.columncmd_door;
                }
            }
            
            internal DataColumn cmd_dwellColumn {
                get {
                    return this.columncmd_dwell;
                }
            }
            
            internal DataColumn otherCarControlColumn {
                get {
                    return this.columnotherCarControl;
                }
            }
            
            public HExecRow this[int index] {
                get {
                    return ((HExecRow)(this.Rows[index]));
                }
            }
            
            public event HExecRowChangeEventHandler HExecRowChanged;
            
            public event HExecRowChangeEventHandler HExecRowChanging;
            
            public event HExecRowChangeEventHandler HExecRowDeleted;
            
            public event HExecRowChangeEventHandler HExecRowDeleting;
            
            public void AddHExecRow(HExecRow row) {
                this.Rows.Add(row);
            }
            
            public HExecRow AddHExecRow(string time, string state, string actual_pos, string target_pos, string NCF, string DoorState, string MotionState, string mov_dir, string decel, string cmd_target, string cmd_door, string cmd_dwell, string otherCarControl) {
                HExecRow rowHExecRow = ((HExecRow)(this.NewRow()));
                rowHExecRow.ItemArray = new object[] {
                        time,
                        state,
                        actual_pos,
                        target_pos,
                        NCF,
                        DoorState,
                        MotionState,
                        mov_dir,
                        decel,
                        cmd_target,
                        cmd_door,
                        cmd_dwell,
                        otherCarControl};
                this.Rows.Add(rowHExecRow);
                return rowHExecRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HExecDataTable cln = ((HExecDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HExecDataTable();
            }
            
            internal void InitVars() {
                this.columntime = this.Columns["time"];
                this.columnstate = this.Columns["state"];
                this.columnactual_pos = this.Columns["actual_pos"];
                this.columntarget_pos = this.Columns["target_pos"];
                this.columnNCF = this.Columns["NCF"];
                this.columnDoorState = this.Columns["DoorState"];
                this.columnMotionState = this.Columns["MotionState"];
                this.columnmov_dir = this.Columns["mov_dir"];
                this.columndecel = this.Columns["decel"];
                this.columncmd_target = this.Columns["cmd_target"];
                this.columncmd_door = this.Columns["cmd_door"];
                this.columncmd_dwell = this.Columns["cmd_dwell"];
                this.columnotherCarControl = this.Columns["otherCarControl"];
            }
            
            private void InitClass() {
                this.columntime = new DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntime);
                this.columnstate = new DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnactual_pos = new DataColumn("actual_pos", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnactual_pos);
                this.columntarget_pos = new DataColumn("target_pos", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntarget_pos);
                this.columnNCF = new DataColumn("NCF", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNCF);
                this.columnDoorState = new DataColumn("DoorState", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDoorState);
                this.columnMotionState = new DataColumn("MotionState", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMotionState);
                this.columnmov_dir = new DataColumn("mov_dir", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmov_dir);
                this.columndecel = new DataColumn("decel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndecel);
                this.columncmd_target = new DataColumn("cmd_target", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncmd_target);
                this.columncmd_door = new DataColumn("cmd_door", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncmd_door);
                this.columncmd_dwell = new DataColumn("cmd_dwell", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncmd_dwell);
                this.columnotherCarControl = new DataColumn("otherCarControl", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnotherCarControl);
            }
            
            public HExecRow NewHExecRow() {
                return ((HExecRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HExecRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HExecRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HExecRowChanged != null)) {
                    this.HExecRowChanged(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HExecRowChanging != null)) {
                    this.HExecRowChanging(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HExecRowDeleted != null)) {
                    this.HExecRowDeleted(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HExecRowDeleting != null)) {
                    this.HExecRowDeleting(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHExecRow(HExecRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HExecRow : DataRow {
            
            private HExecDataTable tableHExec;
            
            internal HExecRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHExec = ((HExecDataTable)(this.Table));
            }
            
            public string time {
                get {
                    try {
                        return ((string)(this[this.tableHExec.timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.timeColumn] = value;
                }
            }
            
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableHExec.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.stateColumn] = value;
                }
            }
            
            public string actual_pos {
                get {
                    try {
                        return ((string)(this[this.tableHExec.actual_posColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.actual_posColumn] = value;
                }
            }
            
            public string target_pos {
                get {
                    try {
                        return ((string)(this[this.tableHExec.target_posColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.target_posColumn] = value;
                }
            }
            
            public string NCF {
                get {
                    try {
                        return ((string)(this[this.tableHExec.NCFColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.NCFColumn] = value;
                }
            }
            
            public string DoorState {
                get {
                    try {
                        return ((string)(this[this.tableHExec.DoorStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.DoorStateColumn] = value;
                }
            }
            
            public string MotionState {
                get {
                    try {
                        return ((string)(this[this.tableHExec.MotionStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.MotionStateColumn] = value;
                }
            }
            
            public string mov_dir {
                get {
                    try {
                        return ((string)(this[this.tableHExec.mov_dirColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.mov_dirColumn] = value;
                }
            }
            
            public string decel {
                get {
                    try {
                        return ((string)(this[this.tableHExec.decelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.decelColumn] = value;
                }
            }
            
            public string cmd_target {
                get {
                    try {
                        return ((string)(this[this.tableHExec.cmd_targetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.cmd_targetColumn] = value;
                }
            }
            
            public string cmd_door {
                get {
                    try {
                        return ((string)(this[this.tableHExec.cmd_doorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.cmd_doorColumn] = value;
                }
            }
            
            public string cmd_dwell {
                get {
                    try {
                        return ((string)(this[this.tableHExec.cmd_dwellColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.cmd_dwellColumn] = value;
                }
            }
            
            public string otherCarControl {
                get {
                    try {
                        return ((string)(this[this.tableHExec.otherCarControlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.otherCarControlColumn] = value;
                }
            }
            
            public bool IstimeNull() {
                return this.IsNull(this.tableHExec.timeColumn);
            }
            
            public void SettimeNull() {
                this[this.tableHExec.timeColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tableHExec.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tableHExec.stateColumn] = System.Convert.DBNull;
            }
            
            public bool Isactual_posNull() {
                return this.IsNull(this.tableHExec.actual_posColumn);
            }
            
            public void Setactual_posNull() {
                this[this.tableHExec.actual_posColumn] = System.Convert.DBNull;
            }
            
            public bool Istarget_posNull() {
                return this.IsNull(this.tableHExec.target_posColumn);
            }
            
            public void Settarget_posNull() {
                this[this.tableHExec.target_posColumn] = System.Convert.DBNull;
            }
            
            public bool IsNCFNull() {
                return this.IsNull(this.tableHExec.NCFColumn);
            }
            
            public void SetNCFNull() {
                this[this.tableHExec.NCFColumn] = System.Convert.DBNull;
            }
            
            public bool IsDoorStateNull() {
                return this.IsNull(this.tableHExec.DoorStateColumn);
            }
            
            public void SetDoorStateNull() {
                this[this.tableHExec.DoorStateColumn] = System.Convert.DBNull;
            }
            
            public bool IsMotionStateNull() {
                return this.IsNull(this.tableHExec.MotionStateColumn);
            }
            
            public void SetMotionStateNull() {
                this[this.tableHExec.MotionStateColumn] = System.Convert.DBNull;
            }
            
            public bool Ismov_dirNull() {
                return this.IsNull(this.tableHExec.mov_dirColumn);
            }
            
            public void Setmov_dirNull() {
                this[this.tableHExec.mov_dirColumn] = System.Convert.DBNull;
            }
            
            public bool IsdecelNull() {
                return this.IsNull(this.tableHExec.decelColumn);
            }
            
            public void SetdecelNull() {
                this[this.tableHExec.decelColumn] = System.Convert.DBNull;
            }
            
            public bool Iscmd_targetNull() {
                return this.IsNull(this.tableHExec.cmd_targetColumn);
            }
            
            public void Setcmd_targetNull() {
                this[this.tableHExec.cmd_targetColumn] = System.Convert.DBNull;
            }
            
            public bool Iscmd_doorNull() {
                return this.IsNull(this.tableHExec.cmd_doorColumn);
            }
            
            public void Setcmd_doorNull() {
                this[this.tableHExec.cmd_doorColumn] = System.Convert.DBNull;
            }
            
            public bool Iscmd_dwellNull() {
                return this.IsNull(this.tableHExec.cmd_dwellColumn);
            }
            
            public void Setcmd_dwellNull() {
                this[this.tableHExec.cmd_dwellColumn] = System.Convert.DBNull;
            }
            
            public bool IsotherCarControlNull() {
                return this.IsNull(this.tableHExec.otherCarControlColumn);
            }
            
            public void SetotherCarControlNull() {
                this[this.tableHExec.otherCarControlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HExecRowChangeEvent : EventArgs {
            
            private HExecRow eventRow;
            
            private DataRowAction eventAction;
            
            public HExecRowChangeEvent(HExecRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HExecRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UpperPlanDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columninx;
            
            private DataColumn columnplanInx;
            
            private DataColumn columnfloor;
            
            private DataColumn columntype;
            
            private DataColumn columnpreInx;
            
            private DataColumn columnplanPreInx;
            
            internal UpperPlanDataTable() : 
                    base("UpperPlan") {
                this.InitClass();
            }
            
            internal UpperPlanDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn inxColumn {
                get {
                    return this.columninx;
                }
            }
            
            internal DataColumn planInxColumn {
                get {
                    return this.columnplanInx;
                }
            }
            
            internal DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn preInxColumn {
                get {
                    return this.columnpreInx;
                }
            }
            
            internal DataColumn planPreInxColumn {
                get {
                    return this.columnplanPreInx;
                }
            }
            
            public UpperPlanRow this[int index] {
                get {
                    return ((UpperPlanRow)(this.Rows[index]));
                }
            }
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowChanged;
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowChanging;
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowDeleted;
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowDeleting;
            
            public void AddUpperPlanRow(UpperPlanRow row) {
                this.Rows.Add(row);
            }
            
            public UpperPlanRow AddUpperPlanRow(string inx, string planInx, string floor, string type, string preInx, string planPreInx) {
                UpperPlanRow rowUpperPlanRow = ((UpperPlanRow)(this.NewRow()));
                rowUpperPlanRow.ItemArray = new object[] {
                        inx,
                        planInx,
                        floor,
                        type,
                        preInx,
                        planPreInx};
                this.Rows.Add(rowUpperPlanRow);
                return rowUpperPlanRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UpperPlanDataTable cln = ((UpperPlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UpperPlanDataTable();
            }
            
            internal void InitVars() {
                this.columninx = this.Columns["inx"];
                this.columnplanInx = this.Columns["planInx"];
                this.columnfloor = this.Columns["floor"];
                this.columntype = this.Columns["type"];
                this.columnpreInx = this.Columns["preInx"];
                this.columnplanPreInx = this.Columns["planPreInx"];
            }
            
            private void InitClass() {
                this.columninx = new DataColumn("inx", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninx);
                this.columnplanInx = new DataColumn("planInx", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnplanInx);
                this.columnfloor = new DataColumn("floor", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfloor);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.columnpreInx = new DataColumn("preInx", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpreInx);
                this.columnplanPreInx = new DataColumn("planPreInx", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnplanPreInx);
            }
            
            public UpperPlanRow NewUpperPlanRow() {
                return ((UpperPlanRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UpperPlanRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UpperPlanRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UpperPlanRowChanged != null)) {
                    this.UpperPlanRowChanged(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UpperPlanRowChanging != null)) {
                    this.UpperPlanRowChanging(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UpperPlanRowDeleted != null)) {
                    this.UpperPlanRowDeleted(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UpperPlanRowDeleting != null)) {
                    this.UpperPlanRowDeleting(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUpperPlanRow(UpperPlanRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UpperPlanRow : DataRow {
            
            private UpperPlanDataTable tableUpperPlan;
            
            internal UpperPlanRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUpperPlan = ((UpperPlanDataTable)(this.Table));
            }
            
            public string inx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.inxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.inxColumn] = value;
                }
            }
            
            public string planInx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.planInxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.planInxColumn] = value;
                }
            }
            
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.floorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.floorColumn] = value;
                }
            }
            
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.typeColumn] = value;
                }
            }
            
            public string preInx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.preInxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.preInxColumn] = value;
                }
            }
            
            public string planPreInx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.planPreInxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.planPreInxColumn] = value;
                }
            }
            
            public bool IsinxNull() {
                return this.IsNull(this.tableUpperPlan.inxColumn);
            }
            
            public void SetinxNull() {
                this[this.tableUpperPlan.inxColumn] = System.Convert.DBNull;
            }
            
            public bool IsplanInxNull() {
                return this.IsNull(this.tableUpperPlan.planInxColumn);
            }
            
            public void SetplanInxNull() {
                this[this.tableUpperPlan.planInxColumn] = System.Convert.DBNull;
            }
            
            public bool IsfloorNull() {
                return this.IsNull(this.tableUpperPlan.floorColumn);
            }
            
            public void SetfloorNull() {
                this[this.tableUpperPlan.floorColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableUpperPlan.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableUpperPlan.typeColumn] = System.Convert.DBNull;
            }
            
            public bool IspreInxNull() {
                return this.IsNull(this.tableUpperPlan.preInxColumn);
            }
            
            public void SetpreInxNull() {
                this[this.tableUpperPlan.preInxColumn] = System.Convert.DBNull;
            }
            
            public bool IsplanPreInxNull() {
                return this.IsNull(this.tableUpperPlan.planPreInxColumn);
            }
            
            public void SetplanPreInxNull() {
                this[this.tableUpperPlan.planPreInxColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UpperPlanRowChangeEvent : EventArgs {
            
            private UpperPlanRow eventRow;
            
            private DataRowAction eventAction;
            
            public UpperPlanRowChangeEvent(UpperPlanRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UpperPlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ncfDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntime;
            
            private DataColumn columnCAR0;
            
            private DataColumn columnCAR1;
            
            private DataColumn columnCAR2;
            
            private DataColumn columnCAR3;
            
            private DataColumn columnCAR4;
            
            private DataColumn columnCAR5;
            
            private DataColumn columnCAR6;
            
            private DataColumn columnCAR7;
            
            internal ncfDataTable() : 
                    base("ncf") {
                this.InitClass();
            }
            
            internal ncfDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            internal DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            internal DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            internal DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            internal DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            internal DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            internal DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            internal DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            internal DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            public ncfRow this[int index] {
                get {
                    return ((ncfRow)(this.Rows[index]));
                }
            }
            
            public event ncfRowChangeEventHandler ncfRowChanged;
            
            public event ncfRowChangeEventHandler ncfRowChanging;
            
            public event ncfRowChangeEventHandler ncfRowDeleted;
            
            public event ncfRowChangeEventHandler ncfRowDeleting;
            
            public void AddncfRow(ncfRow row) {
                this.Rows.Add(row);
            }
            
            public ncfRow AddncfRow(string time, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                ncfRow rowncfRow = ((ncfRow)(this.NewRow()));
                rowncfRow.ItemArray = new object[] {
                        time,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowncfRow);
                return rowncfRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ncfDataTable cln = ((ncfDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ncfDataTable();
            }
            
            internal void InitVars() {
                this.columntime = this.Columns["time"];
                this.columnCAR0 = this.Columns["CAR0"];
                this.columnCAR1 = this.Columns["CAR1"];
                this.columnCAR2 = this.Columns["CAR2"];
                this.columnCAR3 = this.Columns["CAR3"];
                this.columnCAR4 = this.Columns["CAR4"];
                this.columnCAR5 = this.Columns["CAR5"];
                this.columnCAR6 = this.Columns["CAR6"];
                this.columnCAR7 = this.Columns["CAR7"];
            }
            
            private void InitClass() {
                this.columntime = new DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntime);
                this.columnCAR0 = new DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAR7);
            }
            
            public ncfRow NewncfRow() {
                return ((ncfRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ncfRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ncfRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ncfRowChanged != null)) {
                    this.ncfRowChanged(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ncfRowChanging != null)) {
                    this.ncfRowChanging(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ncfRowDeleted != null)) {
                    this.ncfRowDeleted(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ncfRowDeleting != null)) {
                    this.ncfRowDeleting(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovencfRow(ncfRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ncfRow : DataRow {
            
            private ncfDataTable tablencf;
            
            internal ncfRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablencf = ((ncfDataTable)(this.Table));
            }
            
            public string time {
                get {
                    try {
                        return ((string)(this[this.tablencf.timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.timeColumn] = value;
                }
            }
            
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR0Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR0Column] = value;
                }
            }
            
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR1Column] = value;
                }
            }
            
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR2Column] = value;
                }
            }
            
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR3Column] = value;
                }
            }
            
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR4Column] = value;
                }
            }
            
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR5Column] = value;
                }
            }
            
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR6Column] = value;
                }
            }
            
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR7Column] = value;
                }
            }
            
            public bool IstimeNull() {
                return this.IsNull(this.tablencf.timeColumn);
            }
            
            public void SettimeNull() {
                this[this.tablencf.timeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCAR0Null() {
                return this.IsNull(this.tablencf.CAR0Column);
            }
            
            public void SetCAR0Null() {
                this[this.tablencf.CAR0Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR1Null() {
                return this.IsNull(this.tablencf.CAR1Column);
            }
            
            public void SetCAR1Null() {
                this[this.tablencf.CAR1Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR2Null() {
                return this.IsNull(this.tablencf.CAR2Column);
            }
            
            public void SetCAR2Null() {
                this[this.tablencf.CAR2Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR3Null() {
                return this.IsNull(this.tablencf.CAR3Column);
            }
            
            public void SetCAR3Null() {
                this[this.tablencf.CAR3Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR4Null() {
                return this.IsNull(this.tablencf.CAR4Column);
            }
            
            public void SetCAR4Null() {
                this[this.tablencf.CAR4Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR5Null() {
                return this.IsNull(this.tablencf.CAR5Column);
            }
            
            public void SetCAR5Null() {
                this[this.tablencf.CAR5Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR6Null() {
                return this.IsNull(this.tablencf.CAR6Column);
            }
            
            public void SetCAR6Null() {
                this[this.tablencf.CAR6Column] = System.Convert.DBNull;
            }
            
            public bool IsCAR7Null() {
                return this.IsNull(this.tablencf.CAR7Column);
            }
            
            public void SetCAR7Null() {
                this[this.tablencf.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ncfRowChangeEvent : EventArgs {
            
            private ncfRow eventRow;
            
            private DataRowAction eventAction;
            
            public ncfRowChangeEvent(ncfRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ncfRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
