//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.42
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace COGSD {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsDebug")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsDebug : System.Data.DataSet {
        
        private valuesDataTable tablevalues;
        
        private floorDataTable tablefloor;
        
        private posDataTable tablepos;
        
        private CalcDataTable tableCalc;
        
        private HexecALLDataTable tableHexecALL;
        
        private HExecDataTable tableHExec;
        
        private UpperPlanDataTable tableUpperPlan;
        
        private ncfDataTable tablencf;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsDebug() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsDebug(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["values"] != null)) {
                    base.Tables.Add(new valuesDataTable(ds.Tables["values"]));
                }
                if ((ds.Tables["floor"] != null)) {
                    base.Tables.Add(new floorDataTable(ds.Tables["floor"]));
                }
                if ((ds.Tables["pos"] != null)) {
                    base.Tables.Add(new posDataTable(ds.Tables["pos"]));
                }
                if ((ds.Tables["Calc"] != null)) {
                    base.Tables.Add(new CalcDataTable(ds.Tables["Calc"]));
                }
                if ((ds.Tables["HexecALL"] != null)) {
                    base.Tables.Add(new HexecALLDataTable(ds.Tables["HexecALL"]));
                }
                if ((ds.Tables["HExec"] != null)) {
                    base.Tables.Add(new HExecDataTable(ds.Tables["HExec"]));
                }
                if ((ds.Tables["UpperPlan"] != null)) {
                    base.Tables.Add(new UpperPlanDataTable(ds.Tables["UpperPlan"]));
                }
                if ((ds.Tables["ncf"] != null)) {
                    base.Tables.Add(new ncfDataTable(ds.Tables["ncf"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public valuesDataTable values {
            get {
                return this.tablevalues;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public floorDataTable floor {
            get {
                return this.tablefloor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public posDataTable pos {
            get {
                return this.tablepos;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalcDataTable Calc {
            get {
                return this.tableCalc;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HexecALLDataTable HexecALL {
            get {
                return this.tableHexecALL;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HExecDataTable HExec {
            get {
                return this.tableHExec;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UpperPlanDataTable UpperPlan {
            get {
                return this.tableUpperPlan;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ncfDataTable ncf {
            get {
                return this.tablencf;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsDebug cln = ((dsDebug)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["values"] != null)) {
                    base.Tables.Add(new valuesDataTable(ds.Tables["values"]));
                }
                if ((ds.Tables["floor"] != null)) {
                    base.Tables.Add(new floorDataTable(ds.Tables["floor"]));
                }
                if ((ds.Tables["pos"] != null)) {
                    base.Tables.Add(new posDataTable(ds.Tables["pos"]));
                }
                if ((ds.Tables["Calc"] != null)) {
                    base.Tables.Add(new CalcDataTable(ds.Tables["Calc"]));
                }
                if ((ds.Tables["HexecALL"] != null)) {
                    base.Tables.Add(new HexecALLDataTable(ds.Tables["HexecALL"]));
                }
                if ((ds.Tables["HExec"] != null)) {
                    base.Tables.Add(new HExecDataTable(ds.Tables["HExec"]));
                }
                if ((ds.Tables["UpperPlan"] != null)) {
                    base.Tables.Add(new UpperPlanDataTable(ds.Tables["UpperPlan"]));
                }
                if ((ds.Tables["ncf"] != null)) {
                    base.Tables.Add(new ncfDataTable(ds.Tables["ncf"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablevalues = ((valuesDataTable)(base.Tables["values"]));
            if ((initTable == true)) {
                if ((this.tablevalues != null)) {
                    this.tablevalues.InitVars();
                }
            }
            this.tablefloor = ((floorDataTable)(base.Tables["floor"]));
            if ((initTable == true)) {
                if ((this.tablefloor != null)) {
                    this.tablefloor.InitVars();
                }
            }
            this.tablepos = ((posDataTable)(base.Tables["pos"]));
            if ((initTable == true)) {
                if ((this.tablepos != null)) {
                    this.tablepos.InitVars();
                }
            }
            this.tableCalc = ((CalcDataTable)(base.Tables["Calc"]));
            if ((initTable == true)) {
                if ((this.tableCalc != null)) {
                    this.tableCalc.InitVars();
                }
            }
            this.tableHexecALL = ((HexecALLDataTable)(base.Tables["HexecALL"]));
            if ((initTable == true)) {
                if ((this.tableHexecALL != null)) {
                    this.tableHexecALL.InitVars();
                }
            }
            this.tableHExec = ((HExecDataTable)(base.Tables["HExec"]));
            if ((initTable == true)) {
                if ((this.tableHExec != null)) {
                    this.tableHExec.InitVars();
                }
            }
            this.tableUpperPlan = ((UpperPlanDataTable)(base.Tables["UpperPlan"]));
            if ((initTable == true)) {
                if ((this.tableUpperPlan != null)) {
                    this.tableUpperPlan.InitVars();
                }
            }
            this.tablencf = ((ncfDataTable)(base.Tables["ncf"]));
            if ((initTable == true)) {
                if ((this.tablencf != null)) {
                    this.tablencf.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsDebug";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDebug.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablevalues = new valuesDataTable();
            base.Tables.Add(this.tablevalues);
            this.tablefloor = new floorDataTable();
            base.Tables.Add(this.tablefloor);
            this.tablepos = new posDataTable();
            base.Tables.Add(this.tablepos);
            this.tableCalc = new CalcDataTable();
            base.Tables.Add(this.tableCalc);
            this.tableHexecALL = new HexecALLDataTable();
            base.Tables.Add(this.tableHexecALL);
            this.tableHExec = new HExecDataTable();
            base.Tables.Add(this.tableHExec);
            this.tableUpperPlan = new UpperPlanDataTable();
            base.Tables.Add(this.tableUpperPlan);
            this.tablencf = new ncfDataTable();
            base.Tables.Add(this.tablencf);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevalues() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefloor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepos() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCalc() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHexecALL() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHExec() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUpperPlan() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializencf() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsDebug ds = new dsDebug();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void valuesRowChangeEventHandler(object sender, valuesRowChangeEvent e);
        
        public delegate void floorRowChangeEventHandler(object sender, floorRowChangeEvent e);
        
        public delegate void posRowChangeEventHandler(object sender, posRowChangeEvent e);
        
        public delegate void CalcRowChangeEventHandler(object sender, CalcRowChangeEvent e);
        
        public delegate void HexecALLRowChangeEventHandler(object sender, HexecALLRowChangeEvent e);
        
        public delegate void HExecRowChangeEventHandler(object sender, HExecRowChangeEvent e);
        
        public delegate void UpperPlanRowChangeEventHandler(object sender, UpperPlanRowChangeEvent e);
        
        public delegate void ncfRowChangeEventHandler(object sender, ncfRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class valuesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVALUE;
            
            private System.Data.DataColumn columnCAR0;
            
            private System.Data.DataColumn columnCAR1;
            
            private System.Data.DataColumn columnCAR2;
            
            private System.Data.DataColumn columnCAR3;
            
            private System.Data.DataColumn columnCAR4;
            
            private System.Data.DataColumn columnCAR5;
            
            private System.Data.DataColumn columnCAR6;
            
            private System.Data.DataColumn columnCAR7;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public valuesDataTable() {
                this.TableName = "values";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal valuesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected valuesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public valuesRow this[int index] {
                get {
                    return ((valuesRow)(this.Rows[index]));
                }
            }
            
            public event valuesRowChangeEventHandler valuesRowChanging;
            
            public event valuesRowChangeEventHandler valuesRowChanged;
            
            public event valuesRowChangeEventHandler valuesRowDeleting;
            
            public event valuesRowChangeEventHandler valuesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvaluesRow(valuesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public valuesRow AddvaluesRow(string VALUE, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                valuesRow rowvaluesRow = ((valuesRow)(this.NewRow()));
                rowvaluesRow.ItemArray = new object[] {
                        VALUE,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowvaluesRow);
                return rowvaluesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                valuesDataTable cln = ((valuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new valuesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVALUE = base.Columns["VALUE"];
                this.columnCAR0 = base.Columns["CAR0"];
                this.columnCAR1 = base.Columns["CAR1"];
                this.columnCAR2 = base.Columns["CAR2"];
                this.columnCAR3 = base.Columns["CAR3"];
                this.columnCAR4 = base.Columns["CAR4"];
                this.columnCAR5 = base.Columns["CAR5"];
                this.columnCAR6 = base.Columns["CAR6"];
                this.columnCAR7 = base.Columns["CAR7"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVALUE = new System.Data.DataColumn("VALUE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnCAR0 = new System.Data.DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new System.Data.DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new System.Data.DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new System.Data.DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new System.Data.DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new System.Data.DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new System.Data.DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new System.Data.DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR7);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public valuesRow NewvaluesRow() {
                return ((valuesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new valuesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(valuesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.valuesRowChanged != null)) {
                    this.valuesRowChanged(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.valuesRowChanging != null)) {
                    this.valuesRowChanging(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.valuesRowDeleted != null)) {
                    this.valuesRowDeleted(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.valuesRowDeleting != null)) {
                    this.valuesRowDeleting(this, new valuesRowChangeEvent(((valuesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevaluesRow(valuesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "valuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class floorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVALUE;
            
            private System.Data.DataColumn columnCAR0;
            
            private System.Data.DataColumn columnCAR1;
            
            private System.Data.DataColumn columnCAR2;
            
            private System.Data.DataColumn columnCAR3;
            
            private System.Data.DataColumn columnCAR4;
            
            private System.Data.DataColumn columnCAR5;
            
            private System.Data.DataColumn columnCAR6;
            
            private System.Data.DataColumn columnCAR7;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public floorDataTable() {
                this.TableName = "floor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal floorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected floorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public floorRow this[int index] {
                get {
                    return ((floorRow)(this.Rows[index]));
                }
            }
            
            public event floorRowChangeEventHandler floorRowChanging;
            
            public event floorRowChangeEventHandler floorRowChanged;
            
            public event floorRowChangeEventHandler floorRowDeleting;
            
            public event floorRowChangeEventHandler floorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfloorRow(floorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public floorRow AddfloorRow(string VALUE, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                floorRow rowfloorRow = ((floorRow)(this.NewRow()));
                rowfloorRow.ItemArray = new object[] {
                        VALUE,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowfloorRow);
                return rowfloorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                floorDataTable cln = ((floorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new floorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVALUE = base.Columns["VALUE"];
                this.columnCAR0 = base.Columns["CAR0"];
                this.columnCAR1 = base.Columns["CAR1"];
                this.columnCAR2 = base.Columns["CAR2"];
                this.columnCAR3 = base.Columns["CAR3"];
                this.columnCAR4 = base.Columns["CAR4"];
                this.columnCAR5 = base.Columns["CAR5"];
                this.columnCAR6 = base.Columns["CAR6"];
                this.columnCAR7 = base.Columns["CAR7"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVALUE = new System.Data.DataColumn("VALUE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnCAR0 = new System.Data.DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new System.Data.DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new System.Data.DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new System.Data.DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new System.Data.DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new System.Data.DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new System.Data.DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new System.Data.DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR7);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public floorRow NewfloorRow() {
                return ((floorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new floorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(floorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.floorRowChanged != null)) {
                    this.floorRowChanged(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.floorRowChanging != null)) {
                    this.floorRowChanging(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.floorRowDeleted != null)) {
                    this.floorRowDeleted(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.floorRowDeleting != null)) {
                    this.floorRowDeleting(this, new floorRowChangeEvent(((floorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefloorRow(floorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "floorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class posDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntime;
            
            private System.Data.DataColumn columnCAR0;
            
            private System.Data.DataColumn columnCAR1;
            
            private System.Data.DataColumn columnCAR2;
            
            private System.Data.DataColumn columnCAR3;
            
            private System.Data.DataColumn columnCAR4;
            
            private System.Data.DataColumn columnCAR5;
            
            private System.Data.DataColumn columnCAR6;
            
            private System.Data.DataColumn columnCAR7;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public posDataTable() {
                this.TableName = "pos";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal posDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected posDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public posRow this[int index] {
                get {
                    return ((posRow)(this.Rows[index]));
                }
            }
            
            public event posRowChangeEventHandler posRowChanging;
            
            public event posRowChangeEventHandler posRowChanged;
            
            public event posRowChangeEventHandler posRowDeleting;
            
            public event posRowChangeEventHandler posRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddposRow(posRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public posRow AddposRow(string time, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                posRow rowposRow = ((posRow)(this.NewRow()));
                rowposRow.ItemArray = new object[] {
                        time,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowposRow);
                return rowposRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                posDataTable cln = ((posDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new posDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntime = base.Columns["time"];
                this.columnCAR0 = base.Columns["CAR0"];
                this.columnCAR1 = base.Columns["CAR1"];
                this.columnCAR2 = base.Columns["CAR2"];
                this.columnCAR3 = base.Columns["CAR3"];
                this.columnCAR4 = base.Columns["CAR4"];
                this.columnCAR5 = base.Columns["CAR5"];
                this.columnCAR6 = base.Columns["CAR6"];
                this.columnCAR7 = base.Columns["CAR7"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntime = new System.Data.DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnCAR0 = new System.Data.DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new System.Data.DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new System.Data.DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new System.Data.DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new System.Data.DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new System.Data.DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new System.Data.DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new System.Data.DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR7);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public posRow NewposRow() {
                return ((posRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new posRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(posRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.posRowChanged != null)) {
                    this.posRowChanged(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.posRowChanging != null)) {
                    this.posRowChanging(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.posRowDeleted != null)) {
                    this.posRowDeleted(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.posRowDeleting != null)) {
                    this.posRowDeleting(this, new posRowChangeEvent(((posRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveposRow(posRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "posDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CalcDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeA;
            
            private System.Data.DataColumn columnAccA;
            
            private System.Data.DataColumn columnVelocityA;
            
            private System.Data.DataColumn columnDistanceA;
            
            private System.Data.DataColumn columnUCarPos;
            
            private System.Data.DataColumn columnUCarFloor;
            
            private System.Data.DataColumn columnUCarNCF;
            
            private System.Data.DataColumn columnUCarNSP;
            
            private System.Data.DataColumn columnUCarNSF;
            
            private System.Data.DataColumn columnTimeB;
            
            private System.Data.DataColumn columnAccB;
            
            private System.Data.DataColumn columnVelocityB;
            
            private System.Data.DataColumn columnDistanceB;
            
            private System.Data.DataColumn columnLCarPos;
            
            private System.Data.DataColumn columnLCarFloor;
            
            private System.Data.DataColumn columnLCarNCF;
            
            private System.Data.DataColumn columnLCarNSP;
            
            private System.Data.DataColumn columnLCarNSF;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalcDataTable() {
                this.TableName = "Calc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalcDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CalcDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeAColumn {
                get {
                    return this.columnTimeA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccAColumn {
                get {
                    return this.columnAccA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VelocityAColumn {
                get {
                    return this.columnVelocityA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistanceAColumn {
                get {
                    return this.columnDistanceA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UCarPosColumn {
                get {
                    return this.columnUCarPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UCarFloorColumn {
                get {
                    return this.columnUCarFloor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UCarNCFColumn {
                get {
                    return this.columnUCarNCF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UCarNSPColumn {
                get {
                    return this.columnUCarNSP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UCarNSFColumn {
                get {
                    return this.columnUCarNSF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeBColumn {
                get {
                    return this.columnTimeB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccBColumn {
                get {
                    return this.columnAccB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VelocityBColumn {
                get {
                    return this.columnVelocityB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistanceBColumn {
                get {
                    return this.columnDistanceB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LCarPosColumn {
                get {
                    return this.columnLCarPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LCarFloorColumn {
                get {
                    return this.columnLCarFloor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LCarNCFColumn {
                get {
                    return this.columnLCarNCF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LCarNSPColumn {
                get {
                    return this.columnLCarNSP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LCarNSFColumn {
                get {
                    return this.columnLCarNSF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalcRow this[int index] {
                get {
                    return ((CalcRow)(this.Rows[index]));
                }
            }
            
            public event CalcRowChangeEventHandler CalcRowChanging;
            
            public event CalcRowChangeEventHandler CalcRowChanged;
            
            public event CalcRowChangeEventHandler CalcRowDeleting;
            
            public event CalcRowChangeEventHandler CalcRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCalcRow(CalcRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalcRow AddCalcRow(
                        double TimeA, 
                        double AccA, 
                        double VelocityA, 
                        double DistanceA, 
                        double UCarPos, 
                        int UCarFloor, 
                        int UCarNCF, 
                        double UCarNSP, 
                        int UCarNSF, 
                        double TimeB, 
                        double AccB, 
                        double VelocityB, 
                        double DistanceB, 
                        double LCarPos, 
                        int LCarFloor, 
                        int LCarNCF, 
                        double LCarNSP, 
                        int LCarNSF) {
                CalcRow rowCalcRow = ((CalcRow)(this.NewRow()));
                rowCalcRow.ItemArray = new object[] {
                        TimeA,
                        AccA,
                        VelocityA,
                        DistanceA,
                        UCarPos,
                        UCarFloor,
                        UCarNCF,
                        UCarNSP,
                        UCarNSF,
                        TimeB,
                        AccB,
                        VelocityB,
                        DistanceB,
                        LCarPos,
                        LCarFloor,
                        LCarNCF,
                        LCarNSP,
                        LCarNSF};
                this.Rows.Add(rowCalcRow);
                return rowCalcRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CalcDataTable cln = ((CalcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CalcDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeA = base.Columns["TimeA"];
                this.columnAccA = base.Columns["AccA"];
                this.columnVelocityA = base.Columns["VelocityA"];
                this.columnDistanceA = base.Columns["DistanceA"];
                this.columnUCarPos = base.Columns["UCarPos"];
                this.columnUCarFloor = base.Columns["UCarFloor"];
                this.columnUCarNCF = base.Columns["UCarNCF"];
                this.columnUCarNSP = base.Columns["UCarNSP"];
                this.columnUCarNSF = base.Columns["UCarNSF"];
                this.columnTimeB = base.Columns["TimeB"];
                this.columnAccB = base.Columns["AccB"];
                this.columnVelocityB = base.Columns["VelocityB"];
                this.columnDistanceB = base.Columns["DistanceB"];
                this.columnLCarPos = base.Columns["LCarPos"];
                this.columnLCarFloor = base.Columns["LCarFloor"];
                this.columnLCarNCF = base.Columns["LCarNCF"];
                this.columnLCarNSP = base.Columns["LCarNSP"];
                this.columnLCarNSF = base.Columns["LCarNSF"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeA = new System.Data.DataColumn("TimeA", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeA);
                this.columnAccA = new System.Data.DataColumn("AccA", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccA);
                this.columnVelocityA = new System.Data.DataColumn("VelocityA", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVelocityA);
                this.columnDistanceA = new System.Data.DataColumn("DistanceA", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceA);
                this.columnUCarPos = new System.Data.DataColumn("UCarPos", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUCarPos);
                this.columnUCarFloor = new System.Data.DataColumn("UCarFloor", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUCarFloor);
                this.columnUCarNCF = new System.Data.DataColumn("UCarNCF", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUCarNCF);
                this.columnUCarNSP = new System.Data.DataColumn("UCarNSP", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUCarNSP);
                this.columnUCarNSF = new System.Data.DataColumn("UCarNSF", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUCarNSF);
                this.columnTimeB = new System.Data.DataColumn("TimeB", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeB);
                this.columnAccB = new System.Data.DataColumn("AccB", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccB);
                this.columnVelocityB = new System.Data.DataColumn("VelocityB", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVelocityB);
                this.columnDistanceB = new System.Data.DataColumn("DistanceB", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceB);
                this.columnLCarPos = new System.Data.DataColumn("LCarPos", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCarPos);
                this.columnLCarFloor = new System.Data.DataColumn("LCarFloor", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCarFloor);
                this.columnLCarNCF = new System.Data.DataColumn("LCarNCF", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCarNCF);
                this.columnLCarNSP = new System.Data.DataColumn("LCarNSP", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCarNSP);
                this.columnLCarNSF = new System.Data.DataColumn("LCarNSF", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCarNSF);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalcRow NewCalcRow() {
                return ((CalcRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CalcRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CalcRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalcRowChanged != null)) {
                    this.CalcRowChanged(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalcRowChanging != null)) {
                    this.CalcRowChanging(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalcRowDeleted != null)) {
                    this.CalcRowDeleted(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalcRowDeleting != null)) {
                    this.CalcRowDeleting(this, new CalcRowChangeEvent(((CalcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCalcRow(CalcRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CalcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HexecALLDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncar;
            
            private System.Data.DataColumn columntime;
            
            private System.Data.DataColumn columnstate;
            
            private System.Data.DataColumn columnactual_pos;
            
            private System.Data.DataColumn columntarget_pos;
            
            private System.Data.DataColumn columnNCF;
            
            private System.Data.DataColumn columnDoorState;
            
            private System.Data.DataColumn columnMotionState;
            
            private System.Data.DataColumn columnmov_dir;
            
            private System.Data.DataColumn columndecel;
            
            private System.Data.DataColumn columncmd_target;
            
            private System.Data.DataColumn columncmd_door;
            
            private System.Data.DataColumn columncmd_dwell;
            
            private System.Data.DataColumn columnotherCarControl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HexecALLDataTable() {
                this.TableName = "HexecALL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HexecALLDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HexecALLDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn carColumn {
                get {
                    return this.columncar;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn actual_posColumn {
                get {
                    return this.columnactual_pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn target_posColumn {
                get {
                    return this.columntarget_pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NCFColumn {
                get {
                    return this.columnNCF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DoorStateColumn {
                get {
                    return this.columnDoorState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MotionStateColumn {
                get {
                    return this.columnMotionState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn mov_dirColumn {
                get {
                    return this.columnmov_dir;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn decelColumn {
                get {
                    return this.columndecel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cmd_targetColumn {
                get {
                    return this.columncmd_target;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cmd_doorColumn {
                get {
                    return this.columncmd_door;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cmd_dwellColumn {
                get {
                    return this.columncmd_dwell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn otherCarControlColumn {
                get {
                    return this.columnotherCarControl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HexecALLRow this[int index] {
                get {
                    return ((HexecALLRow)(this.Rows[index]));
                }
            }
            
            public event HexecALLRowChangeEventHandler HexecALLRowChanging;
            
            public event HexecALLRowChangeEventHandler HexecALLRowChanged;
            
            public event HexecALLRowChangeEventHandler HexecALLRowDeleting;
            
            public event HexecALLRowChangeEventHandler HexecALLRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHexecALLRow(HexecALLRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HexecALLRow AddHexecALLRow(string car, string time, string state, string actual_pos, string target_pos, string NCF, string DoorState, string MotionState, string mov_dir, string decel, string cmd_target, string cmd_door, string cmd_dwell, string otherCarControl) {
                HexecALLRow rowHexecALLRow = ((HexecALLRow)(this.NewRow()));
                rowHexecALLRow.ItemArray = new object[] {
                        car,
                        time,
                        state,
                        actual_pos,
                        target_pos,
                        NCF,
                        DoorState,
                        MotionState,
                        mov_dir,
                        decel,
                        cmd_target,
                        cmd_door,
                        cmd_dwell,
                        otherCarControl};
                this.Rows.Add(rowHexecALLRow);
                return rowHexecALLRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HexecALLDataTable cln = ((HexecALLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HexecALLDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncar = base.Columns["car"];
                this.columntime = base.Columns["time"];
                this.columnstate = base.Columns["state"];
                this.columnactual_pos = base.Columns["actual_pos"];
                this.columntarget_pos = base.Columns["target_pos"];
                this.columnNCF = base.Columns["NCF"];
                this.columnDoorState = base.Columns["DoorState"];
                this.columnMotionState = base.Columns["MotionState"];
                this.columnmov_dir = base.Columns["mov_dir"];
                this.columndecel = base.Columns["decel"];
                this.columncmd_target = base.Columns["cmd_target"];
                this.columncmd_door = base.Columns["cmd_door"];
                this.columncmd_dwell = base.Columns["cmd_dwell"];
                this.columnotherCarControl = base.Columns["otherCarControl"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncar = new System.Data.DataColumn("car", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncar);
                this.columntime = new System.Data.DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnstate = new System.Data.DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnactual_pos = new System.Data.DataColumn("actual_pos", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnactual_pos);
                this.columntarget_pos = new System.Data.DataColumn("target_pos", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntarget_pos);
                this.columnNCF = new System.Data.DataColumn("NCF", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNCF);
                this.columnDoorState = new System.Data.DataColumn("DoorState", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoorState);
                this.columnMotionState = new System.Data.DataColumn("MotionState", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotionState);
                this.columnmov_dir = new System.Data.DataColumn("mov_dir", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmov_dir);
                this.columndecel = new System.Data.DataColumn("decel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndecel);
                this.columncmd_target = new System.Data.DataColumn("cmd_target", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncmd_target);
                this.columncmd_door = new System.Data.DataColumn("cmd_door", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncmd_door);
                this.columncmd_dwell = new System.Data.DataColumn("cmd_dwell", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncmd_dwell);
                this.columnotherCarControl = new System.Data.DataColumn("otherCarControl", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnotherCarControl);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HexecALLRow NewHexecALLRow() {
                return ((HexecALLRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HexecALLRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HexecALLRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HexecALLRowChanged != null)) {
                    this.HexecALLRowChanged(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HexecALLRowChanging != null)) {
                    this.HexecALLRowChanging(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HexecALLRowDeleted != null)) {
                    this.HexecALLRowDeleted(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HexecALLRowDeleting != null)) {
                    this.HexecALLRowDeleting(this, new HexecALLRowChangeEvent(((HexecALLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHexecALLRow(HexecALLRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HexecALLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HExecDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntime;
            
            private System.Data.DataColumn columnstate;
            
            private System.Data.DataColumn columnactual_pos;
            
            private System.Data.DataColumn columntarget_pos;
            
            private System.Data.DataColumn columnNCF;
            
            private System.Data.DataColumn columnDoorState;
            
            private System.Data.DataColumn columnMotionState;
            
            private System.Data.DataColumn columnmov_dir;
            
            private System.Data.DataColumn columndecel;
            
            private System.Data.DataColumn columncmd_target;
            
            private System.Data.DataColumn columncmd_door;
            
            private System.Data.DataColumn columncmd_dwell;
            
            private System.Data.DataColumn columnotherCarControl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HExecDataTable() {
                this.TableName = "HExec";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HExecDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HExecDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn actual_posColumn {
                get {
                    return this.columnactual_pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn target_posColumn {
                get {
                    return this.columntarget_pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NCFColumn {
                get {
                    return this.columnNCF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DoorStateColumn {
                get {
                    return this.columnDoorState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MotionStateColumn {
                get {
                    return this.columnMotionState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn mov_dirColumn {
                get {
                    return this.columnmov_dir;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn decelColumn {
                get {
                    return this.columndecel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cmd_targetColumn {
                get {
                    return this.columncmd_target;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cmd_doorColumn {
                get {
                    return this.columncmd_door;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cmd_dwellColumn {
                get {
                    return this.columncmd_dwell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn otherCarControlColumn {
                get {
                    return this.columnotherCarControl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HExecRow this[int index] {
                get {
                    return ((HExecRow)(this.Rows[index]));
                }
            }
            
            public event HExecRowChangeEventHandler HExecRowChanging;
            
            public event HExecRowChangeEventHandler HExecRowChanged;
            
            public event HExecRowChangeEventHandler HExecRowDeleting;
            
            public event HExecRowChangeEventHandler HExecRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHExecRow(HExecRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HExecRow AddHExecRow(string time, string state, string actual_pos, string target_pos, string NCF, string DoorState, string MotionState, string mov_dir, string decel, string cmd_target, string cmd_door, string cmd_dwell, string otherCarControl) {
                HExecRow rowHExecRow = ((HExecRow)(this.NewRow()));
                rowHExecRow.ItemArray = new object[] {
                        time,
                        state,
                        actual_pos,
                        target_pos,
                        NCF,
                        DoorState,
                        MotionState,
                        mov_dir,
                        decel,
                        cmd_target,
                        cmd_door,
                        cmd_dwell,
                        otherCarControl};
                this.Rows.Add(rowHExecRow);
                return rowHExecRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HExecDataTable cln = ((HExecDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HExecDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntime = base.Columns["time"];
                this.columnstate = base.Columns["state"];
                this.columnactual_pos = base.Columns["actual_pos"];
                this.columntarget_pos = base.Columns["target_pos"];
                this.columnNCF = base.Columns["NCF"];
                this.columnDoorState = base.Columns["DoorState"];
                this.columnMotionState = base.Columns["MotionState"];
                this.columnmov_dir = base.Columns["mov_dir"];
                this.columndecel = base.Columns["decel"];
                this.columncmd_target = base.Columns["cmd_target"];
                this.columncmd_door = base.Columns["cmd_door"];
                this.columncmd_dwell = base.Columns["cmd_dwell"];
                this.columnotherCarControl = base.Columns["otherCarControl"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntime = new System.Data.DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnstate = new System.Data.DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnactual_pos = new System.Data.DataColumn("actual_pos", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnactual_pos);
                this.columntarget_pos = new System.Data.DataColumn("target_pos", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntarget_pos);
                this.columnNCF = new System.Data.DataColumn("NCF", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNCF);
                this.columnDoorState = new System.Data.DataColumn("DoorState", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoorState);
                this.columnMotionState = new System.Data.DataColumn("MotionState", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotionState);
                this.columnmov_dir = new System.Data.DataColumn("mov_dir", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmov_dir);
                this.columndecel = new System.Data.DataColumn("decel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndecel);
                this.columncmd_target = new System.Data.DataColumn("cmd_target", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncmd_target);
                this.columncmd_door = new System.Data.DataColumn("cmd_door", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncmd_door);
                this.columncmd_dwell = new System.Data.DataColumn("cmd_dwell", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncmd_dwell);
                this.columnotherCarControl = new System.Data.DataColumn("otherCarControl", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnotherCarControl);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HExecRow NewHExecRow() {
                return ((HExecRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HExecRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HExecRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HExecRowChanged != null)) {
                    this.HExecRowChanged(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HExecRowChanging != null)) {
                    this.HExecRowChanging(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HExecRowDeleted != null)) {
                    this.HExecRowDeleted(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HExecRowDeleting != null)) {
                    this.HExecRowDeleting(this, new HExecRowChangeEvent(((HExecRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHExecRow(HExecRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HExecDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UpperPlanDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columninx;
            
            private System.Data.DataColumn columnplanInx;
            
            private System.Data.DataColumn columnfloor;
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn columnpreInx;
            
            private System.Data.DataColumn columnplanPreInx;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpperPlanDataTable() {
                this.TableName = "UpperPlan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UpperPlanDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UpperPlanDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn inxColumn {
                get {
                    return this.columninx;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn planInxColumn {
                get {
                    return this.columnplanInx;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn preInxColumn {
                get {
                    return this.columnpreInx;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn planPreInxColumn {
                get {
                    return this.columnplanPreInx;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpperPlanRow this[int index] {
                get {
                    return ((UpperPlanRow)(this.Rows[index]));
                }
            }
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowChanging;
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowChanged;
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowDeleting;
            
            public event UpperPlanRowChangeEventHandler UpperPlanRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUpperPlanRow(UpperPlanRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpperPlanRow AddUpperPlanRow(string inx, string planInx, string floor, string type, string preInx, string planPreInx) {
                UpperPlanRow rowUpperPlanRow = ((UpperPlanRow)(this.NewRow()));
                rowUpperPlanRow.ItemArray = new object[] {
                        inx,
                        planInx,
                        floor,
                        type,
                        preInx,
                        planPreInx};
                this.Rows.Add(rowUpperPlanRow);
                return rowUpperPlanRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UpperPlanDataTable cln = ((UpperPlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UpperPlanDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninx = base.Columns["inx"];
                this.columnplanInx = base.Columns["planInx"];
                this.columnfloor = base.Columns["floor"];
                this.columntype = base.Columns["type"];
                this.columnpreInx = base.Columns["preInx"];
                this.columnplanPreInx = base.Columns["planPreInx"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninx = new System.Data.DataColumn("inx", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columninx);
                this.columnplanInx = new System.Data.DataColumn("planInx", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnplanInx);
                this.columnfloor = new System.Data.DataColumn("floor", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnpreInx = new System.Data.DataColumn("preInx", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpreInx);
                this.columnplanPreInx = new System.Data.DataColumn("planPreInx", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnplanPreInx);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpperPlanRow NewUpperPlanRow() {
                return ((UpperPlanRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UpperPlanRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UpperPlanRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UpperPlanRowChanged != null)) {
                    this.UpperPlanRowChanged(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UpperPlanRowChanging != null)) {
                    this.UpperPlanRowChanging(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UpperPlanRowDeleted != null)) {
                    this.UpperPlanRowDeleted(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UpperPlanRowDeleting != null)) {
                    this.UpperPlanRowDeleting(this, new UpperPlanRowChangeEvent(((UpperPlanRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUpperPlanRow(UpperPlanRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UpperPlanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ncfDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntime;
            
            private System.Data.DataColumn columnCAR0;
            
            private System.Data.DataColumn columnCAR1;
            
            private System.Data.DataColumn columnCAR2;
            
            private System.Data.DataColumn columnCAR3;
            
            private System.Data.DataColumn columnCAR4;
            
            private System.Data.DataColumn columnCAR5;
            
            private System.Data.DataColumn columnCAR6;
            
            private System.Data.DataColumn columnCAR7;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ncfDataTable() {
                this.TableName = "ncf";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ncfDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ncfDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR0Column {
                get {
                    return this.columnCAR0;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR1Column {
                get {
                    return this.columnCAR1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR2Column {
                get {
                    return this.columnCAR2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR3Column {
                get {
                    return this.columnCAR3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR4Column {
                get {
                    return this.columnCAR4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR5Column {
                get {
                    return this.columnCAR5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR6Column {
                get {
                    return this.columnCAR6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAR7Column {
                get {
                    return this.columnCAR7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ncfRow this[int index] {
                get {
                    return ((ncfRow)(this.Rows[index]));
                }
            }
            
            public event ncfRowChangeEventHandler ncfRowChanging;
            
            public event ncfRowChangeEventHandler ncfRowChanged;
            
            public event ncfRowChangeEventHandler ncfRowDeleting;
            
            public event ncfRowChangeEventHandler ncfRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddncfRow(ncfRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ncfRow AddncfRow(string time, string CAR0, string CAR1, string CAR2, string CAR3, string CAR4, string CAR5, string CAR6, string CAR7) {
                ncfRow rowncfRow = ((ncfRow)(this.NewRow()));
                rowncfRow.ItemArray = new object[] {
                        time,
                        CAR0,
                        CAR1,
                        CAR2,
                        CAR3,
                        CAR4,
                        CAR5,
                        CAR6,
                        CAR7};
                this.Rows.Add(rowncfRow);
                return rowncfRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ncfDataTable cln = ((ncfDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ncfDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntime = base.Columns["time"];
                this.columnCAR0 = base.Columns["CAR0"];
                this.columnCAR1 = base.Columns["CAR1"];
                this.columnCAR2 = base.Columns["CAR2"];
                this.columnCAR3 = base.Columns["CAR3"];
                this.columnCAR4 = base.Columns["CAR4"];
                this.columnCAR5 = base.Columns["CAR5"];
                this.columnCAR6 = base.Columns["CAR6"];
                this.columnCAR7 = base.Columns["CAR7"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntime = new System.Data.DataColumn("time", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnCAR0 = new System.Data.DataColumn("CAR0", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR0);
                this.columnCAR1 = new System.Data.DataColumn("CAR1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR1);
                this.columnCAR2 = new System.Data.DataColumn("CAR2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR2);
                this.columnCAR3 = new System.Data.DataColumn("CAR3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR3);
                this.columnCAR4 = new System.Data.DataColumn("CAR4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR4);
                this.columnCAR5 = new System.Data.DataColumn("CAR5", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR5);
                this.columnCAR6 = new System.Data.DataColumn("CAR6", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR6);
                this.columnCAR7 = new System.Data.DataColumn("CAR7", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAR7);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ncfRow NewncfRow() {
                return ((ncfRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ncfRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ncfRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ncfRowChanged != null)) {
                    this.ncfRowChanged(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ncfRowChanging != null)) {
                    this.ncfRowChanging(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ncfRowDeleted != null)) {
                    this.ncfRowDeleted(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ncfRowDeleting != null)) {
                    this.ncfRowDeleting(this, new ncfRowChangeEvent(((ncfRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovencfRow(ncfRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDebug ds = new dsDebug();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ncfDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class valuesRow : System.Data.DataRow {
            
            private valuesDataTable tablevalues;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal valuesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevalues = ((valuesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tablevalues.VALUEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'VALUE\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.VALUEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR0Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR0\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR0Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR4\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR5\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR6\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablevalues.CAR7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'values\' 테이블의 \'CAR7\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablevalues.CAR7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVALUENull() {
                return this.IsNull(this.tablevalues.VALUEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVALUENull() {
                this[this.tablevalues.VALUEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR0Null() {
                return this.IsNull(this.tablevalues.CAR0Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR0Null() {
                this[this.tablevalues.CAR0Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR1Null() {
                return this.IsNull(this.tablevalues.CAR1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR1Null() {
                this[this.tablevalues.CAR1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR2Null() {
                return this.IsNull(this.tablevalues.CAR2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR2Null() {
                this[this.tablevalues.CAR2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR3Null() {
                return this.IsNull(this.tablevalues.CAR3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR3Null() {
                this[this.tablevalues.CAR3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR4Null() {
                return this.IsNull(this.tablevalues.CAR4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR4Null() {
                this[this.tablevalues.CAR4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR5Null() {
                return this.IsNull(this.tablevalues.CAR5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR5Null() {
                this[this.tablevalues.CAR5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR6Null() {
                return this.IsNull(this.tablevalues.CAR6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR6Null() {
                this[this.tablevalues.CAR6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR7Null() {
                return this.IsNull(this.tablevalues.CAR7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR7Null() {
                this[this.tablevalues.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class floorRow : System.Data.DataRow {
            
            private floorDataTable tablefloor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal floorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefloor = ((floorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tablefloor.VALUEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'VALUE\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.VALUEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR0Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR0\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR0Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR4\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR5\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR6\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablefloor.CAR7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'floor\' 테이블의 \'CAR7\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablefloor.CAR7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVALUENull() {
                return this.IsNull(this.tablefloor.VALUEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVALUENull() {
                this[this.tablefloor.VALUEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR0Null() {
                return this.IsNull(this.tablefloor.CAR0Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR0Null() {
                this[this.tablefloor.CAR0Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR1Null() {
                return this.IsNull(this.tablefloor.CAR1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR1Null() {
                this[this.tablefloor.CAR1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR2Null() {
                return this.IsNull(this.tablefloor.CAR2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR2Null() {
                this[this.tablefloor.CAR2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR3Null() {
                return this.IsNull(this.tablefloor.CAR3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR3Null() {
                this[this.tablefloor.CAR3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR4Null() {
                return this.IsNull(this.tablefloor.CAR4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR4Null() {
                this[this.tablefloor.CAR4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR5Null() {
                return this.IsNull(this.tablefloor.CAR5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR5Null() {
                this[this.tablefloor.CAR5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR6Null() {
                return this.IsNull(this.tablefloor.CAR6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR6Null() {
                this[this.tablefloor.CAR6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR7Null() {
                return this.IsNull(this.tablefloor.CAR7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR7Null() {
                this[this.tablefloor.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class posRow : System.Data.DataRow {
            
            private posDataTable tablepos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal posRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepos = ((posDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.tablepos.timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'time\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR0Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR0\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR0Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR4\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR5\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR6\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablepos.CAR7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'pos\' 테이블의 \'CAR7\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablepos.CAR7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.tablepos.timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.tablepos.timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR0Null() {
                return this.IsNull(this.tablepos.CAR0Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR0Null() {
                this[this.tablepos.CAR0Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR1Null() {
                return this.IsNull(this.tablepos.CAR1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR1Null() {
                this[this.tablepos.CAR1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR2Null() {
                return this.IsNull(this.tablepos.CAR2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR2Null() {
                this[this.tablepos.CAR2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR3Null() {
                return this.IsNull(this.tablepos.CAR3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR3Null() {
                this[this.tablepos.CAR3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR4Null() {
                return this.IsNull(this.tablepos.CAR4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR4Null() {
                this[this.tablepos.CAR4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR5Null() {
                return this.IsNull(this.tablepos.CAR5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR5Null() {
                this[this.tablepos.CAR5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR6Null() {
                return this.IsNull(this.tablepos.CAR6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR6Null() {
                this[this.tablepos.CAR6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR7Null() {
                return this.IsNull(this.tablepos.CAR7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR7Null() {
                this[this.tablepos.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CalcRow : System.Data.DataRow {
            
            private CalcDataTable tableCalc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalcRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalc = ((CalcDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeA {
                get {
                    try {
                        return ((double)(this[this.tableCalc.TimeAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'TimeA\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.TimeAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AccA {
                get {
                    try {
                        return ((double)(this[this.tableCalc.AccAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'AccA\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.AccAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VelocityA {
                get {
                    try {
                        return ((double)(this[this.tableCalc.VelocityAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'VelocityA\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.VelocityAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DistanceA {
                get {
                    try {
                        return ((double)(this[this.tableCalc.DistanceAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'DistanceA\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.DistanceAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UCarPos {
                get {
                    try {
                        return ((double)(this[this.tableCalc.UCarPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'UCarPos\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UCarFloor {
                get {
                    try {
                        return ((int)(this[this.tableCalc.UCarFloorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'UCarFloor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarFloorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UCarNCF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.UCarNCFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'UCarNCF\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarNCFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UCarNSP {
                get {
                    try {
                        return ((double)(this[this.tableCalc.UCarNSPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'UCarNSP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarNSPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UCarNSF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.UCarNSFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'UCarNSF\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.UCarNSFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeB {
                get {
                    try {
                        return ((double)(this[this.tableCalc.TimeBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'TimeB\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.TimeBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AccB {
                get {
                    try {
                        return ((double)(this[this.tableCalc.AccBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'AccB\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.AccBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VelocityB {
                get {
                    try {
                        return ((double)(this[this.tableCalc.VelocityBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'VelocityB\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.VelocityBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DistanceB {
                get {
                    try {
                        return ((double)(this[this.tableCalc.DistanceBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'DistanceB\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.DistanceBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LCarPos {
                get {
                    try {
                        return ((double)(this[this.tableCalc.LCarPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'LCarPos\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LCarFloor {
                get {
                    try {
                        return ((int)(this[this.tableCalc.LCarFloorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'LCarFloor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarFloorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LCarNCF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.LCarNCFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'LCarNCF\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarNCFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LCarNSP {
                get {
                    try {
                        return ((double)(this[this.tableCalc.LCarNSPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'LCarNSP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarNSPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LCarNSF {
                get {
                    try {
                        return ((int)(this[this.tableCalc.LCarNSFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'Calc\' 테이블의 \'LCarNSF\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCalc.LCarNSFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeANull() {
                return this.IsNull(this.tableCalc.TimeAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeANull() {
                this[this.tableCalc.TimeAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccANull() {
                return this.IsNull(this.tableCalc.AccAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccANull() {
                this[this.tableCalc.AccAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVelocityANull() {
                return this.IsNull(this.tableCalc.VelocityAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVelocityANull() {
                this[this.tableCalc.VelocityAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceANull() {
                return this.IsNull(this.tableCalc.DistanceAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceANull() {
                this[this.tableCalc.DistanceAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUCarPosNull() {
                return this.IsNull(this.tableCalc.UCarPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUCarPosNull() {
                this[this.tableCalc.UCarPosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUCarFloorNull() {
                return this.IsNull(this.tableCalc.UCarFloorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUCarFloorNull() {
                this[this.tableCalc.UCarFloorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUCarNCFNull() {
                return this.IsNull(this.tableCalc.UCarNCFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUCarNCFNull() {
                this[this.tableCalc.UCarNCFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUCarNSPNull() {
                return this.IsNull(this.tableCalc.UCarNSPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUCarNSPNull() {
                this[this.tableCalc.UCarNSPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUCarNSFNull() {
                return this.IsNull(this.tableCalc.UCarNSFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUCarNSFNull() {
                this[this.tableCalc.UCarNSFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeBNull() {
                return this.IsNull(this.tableCalc.TimeBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeBNull() {
                this[this.tableCalc.TimeBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccBNull() {
                return this.IsNull(this.tableCalc.AccBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccBNull() {
                this[this.tableCalc.AccBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVelocityBNull() {
                return this.IsNull(this.tableCalc.VelocityBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVelocityBNull() {
                this[this.tableCalc.VelocityBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceBNull() {
                return this.IsNull(this.tableCalc.DistanceBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceBNull() {
                this[this.tableCalc.DistanceBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCarPosNull() {
                return this.IsNull(this.tableCalc.LCarPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCarPosNull() {
                this[this.tableCalc.LCarPosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCarFloorNull() {
                return this.IsNull(this.tableCalc.LCarFloorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCarFloorNull() {
                this[this.tableCalc.LCarFloorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCarNCFNull() {
                return this.IsNull(this.tableCalc.LCarNCFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCarNCFNull() {
                this[this.tableCalc.LCarNCFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCarNSPNull() {
                return this.IsNull(this.tableCalc.LCarNSPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCarNSPNull() {
                this[this.tableCalc.LCarNSPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCarNSFNull() {
                return this.IsNull(this.tableCalc.LCarNSFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCarNSFNull() {
                this[this.tableCalc.LCarNSFColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HexecALLRow : System.Data.DataRow {
            
            private HexecALLDataTable tableHexecALL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HexecALLRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHexecALL = ((HexecALLDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string car {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.carColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'car\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.carColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'time\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.stateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.stateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string actual_pos {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.actual_posColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'actual_pos\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.actual_posColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string target_pos {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.target_posColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'target_pos\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.target_posColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NCF {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.NCFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'NCF\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.NCFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DoorState {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.DoorStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'DoorState\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.DoorStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotionState {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.MotionStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'MotionState\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.MotionStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mov_dir {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.mov_dirColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'mov_dir\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.mov_dirColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string decel {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.decelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'decel\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.decelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cmd_target {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.cmd_targetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'cmd_target\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.cmd_targetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cmd_door {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.cmd_doorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'cmd_door\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.cmd_doorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cmd_dwell {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.cmd_dwellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'cmd_dwell\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.cmd_dwellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string otherCarControl {
                get {
                    try {
                        return ((string)(this[this.tableHexecALL.otherCarControlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HexecALL\' 테이블의 \'otherCarControl\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHexecALL.otherCarControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscarNull() {
                return this.IsNull(this.tableHexecALL.carColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcarNull() {
                this[this.tableHexecALL.carColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.tableHexecALL.timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.tableHexecALL.timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstateNull() {
                return this.IsNull(this.tableHexecALL.stateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstateNull() {
                this[this.tableHexecALL.stateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isactual_posNull() {
                return this.IsNull(this.tableHexecALL.actual_posColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setactual_posNull() {
                this[this.tableHexecALL.actual_posColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istarget_posNull() {
                return this.IsNull(this.tableHexecALL.target_posColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settarget_posNull() {
                this[this.tableHexecALL.target_posColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNCFNull() {
                return this.IsNull(this.tableHexecALL.NCFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNCFNull() {
                this[this.tableHexecALL.NCFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoorStateNull() {
                return this.IsNull(this.tableHexecALL.DoorStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoorStateNull() {
                this[this.tableHexecALL.DoorStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotionStateNull() {
                return this.IsNull(this.tableHexecALL.MotionStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotionStateNull() {
                this[this.tableHexecALL.MotionStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismov_dirNull() {
                return this.IsNull(this.tableHexecALL.mov_dirColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmov_dirNull() {
                this[this.tableHexecALL.mov_dirColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdecelNull() {
                return this.IsNull(this.tableHexecALL.decelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdecelNull() {
                this[this.tableHexecALL.decelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscmd_targetNull() {
                return this.IsNull(this.tableHexecALL.cmd_targetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcmd_targetNull() {
                this[this.tableHexecALL.cmd_targetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscmd_doorNull() {
                return this.IsNull(this.tableHexecALL.cmd_doorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcmd_doorNull() {
                this[this.tableHexecALL.cmd_doorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscmd_dwellNull() {
                return this.IsNull(this.tableHexecALL.cmd_dwellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcmd_dwellNull() {
                this[this.tableHexecALL.cmd_dwellColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsotherCarControlNull() {
                return this.IsNull(this.tableHexecALL.otherCarControlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetotherCarControlNull() {
                this[this.tableHexecALL.otherCarControlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HExecRow : System.Data.DataRow {
            
            private HExecDataTable tableHExec;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HExecRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHExec = ((HExecDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.tableHExec.timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'time\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableHExec.stateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.stateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string actual_pos {
                get {
                    try {
                        return ((string)(this[this.tableHExec.actual_posColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'actual_pos\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.actual_posColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string target_pos {
                get {
                    try {
                        return ((string)(this[this.tableHExec.target_posColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'target_pos\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.target_posColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NCF {
                get {
                    try {
                        return ((string)(this[this.tableHExec.NCFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'NCF\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.NCFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DoorState {
                get {
                    try {
                        return ((string)(this[this.tableHExec.DoorStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'DoorState\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.DoorStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotionState {
                get {
                    try {
                        return ((string)(this[this.tableHExec.MotionStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'MotionState\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.MotionStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mov_dir {
                get {
                    try {
                        return ((string)(this[this.tableHExec.mov_dirColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'mov_dir\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.mov_dirColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string decel {
                get {
                    try {
                        return ((string)(this[this.tableHExec.decelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'decel\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.decelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cmd_target {
                get {
                    try {
                        return ((string)(this[this.tableHExec.cmd_targetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'cmd_target\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.cmd_targetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cmd_door {
                get {
                    try {
                        return ((string)(this[this.tableHExec.cmd_doorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'cmd_door\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.cmd_doorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cmd_dwell {
                get {
                    try {
                        return ((string)(this[this.tableHExec.cmd_dwellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'cmd_dwell\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.cmd_dwellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string otherCarControl {
                get {
                    try {
                        return ((string)(this[this.tableHExec.otherCarControlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'HExec\' 테이블의 \'otherCarControl\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHExec.otherCarControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.tableHExec.timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.tableHExec.timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstateNull() {
                return this.IsNull(this.tableHExec.stateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstateNull() {
                this[this.tableHExec.stateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isactual_posNull() {
                return this.IsNull(this.tableHExec.actual_posColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setactual_posNull() {
                this[this.tableHExec.actual_posColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istarget_posNull() {
                return this.IsNull(this.tableHExec.target_posColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settarget_posNull() {
                this[this.tableHExec.target_posColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNCFNull() {
                return this.IsNull(this.tableHExec.NCFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNCFNull() {
                this[this.tableHExec.NCFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoorStateNull() {
                return this.IsNull(this.tableHExec.DoorStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoorStateNull() {
                this[this.tableHExec.DoorStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotionStateNull() {
                return this.IsNull(this.tableHExec.MotionStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotionStateNull() {
                this[this.tableHExec.MotionStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismov_dirNull() {
                return this.IsNull(this.tableHExec.mov_dirColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmov_dirNull() {
                this[this.tableHExec.mov_dirColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdecelNull() {
                return this.IsNull(this.tableHExec.decelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdecelNull() {
                this[this.tableHExec.decelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscmd_targetNull() {
                return this.IsNull(this.tableHExec.cmd_targetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcmd_targetNull() {
                this[this.tableHExec.cmd_targetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscmd_doorNull() {
                return this.IsNull(this.tableHExec.cmd_doorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcmd_doorNull() {
                this[this.tableHExec.cmd_doorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscmd_dwellNull() {
                return this.IsNull(this.tableHExec.cmd_dwellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcmd_dwellNull() {
                this[this.tableHExec.cmd_dwellColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsotherCarControlNull() {
                return this.IsNull(this.tableHExec.otherCarControlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetotherCarControlNull() {
                this[this.tableHExec.otherCarControlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UpperPlanRow : System.Data.DataRow {
            
            private UpperPlanDataTable tableUpperPlan;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UpperPlanRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUpperPlan = ((UpperPlanDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.inxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'UpperPlan\' 테이블의 \'inx\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.inxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string planInx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.planInxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'UpperPlan\' 테이블의 \'planInx\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.planInxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.floorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'UpperPlan\' 테이블의 \'floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.floorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'UpperPlan\' 테이블의 \'type\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string preInx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.preInxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'UpperPlan\' 테이블의 \'preInx\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.preInxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string planPreInx {
                get {
                    try {
                        return ((string)(this[this.tableUpperPlan.planPreInxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'UpperPlan\' 테이블의 \'planPreInx\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUpperPlan.planPreInxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinxNull() {
                return this.IsNull(this.tableUpperPlan.inxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinxNull() {
                this[this.tableUpperPlan.inxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplanInxNull() {
                return this.IsNull(this.tableUpperPlan.planInxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplanInxNull() {
                this[this.tableUpperPlan.planInxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfloorNull() {
                return this.IsNull(this.tableUpperPlan.floorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfloorNull() {
                this[this.tableUpperPlan.floorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableUpperPlan.typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableUpperPlan.typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspreInxNull() {
                return this.IsNull(this.tableUpperPlan.preInxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpreInxNull() {
                this[this.tableUpperPlan.preInxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplanPreInxNull() {
                return this.IsNull(this.tableUpperPlan.planPreInxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplanPreInxNull() {
                this[this.tableUpperPlan.planPreInxColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ncfRow : System.Data.DataRow {
            
            private ncfDataTable tablencf;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ncfRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablencf = ((ncfDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.tablencf.timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'time\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR0 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR0Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR0\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR0Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR1 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR2 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR3 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR4 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR4\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR5 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR5\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR6 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR6\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAR7 {
                get {
                    try {
                        return ((string)(this[this.tablencf.CAR7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'ncf\' 테이블의 \'CAR7\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablencf.CAR7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.tablencf.timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.tablencf.timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR0Null() {
                return this.IsNull(this.tablencf.CAR0Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR0Null() {
                this[this.tablencf.CAR0Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR1Null() {
                return this.IsNull(this.tablencf.CAR1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR1Null() {
                this[this.tablencf.CAR1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR2Null() {
                return this.IsNull(this.tablencf.CAR2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR2Null() {
                this[this.tablencf.CAR2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR3Null() {
                return this.IsNull(this.tablencf.CAR3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR3Null() {
                this[this.tablencf.CAR3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR4Null() {
                return this.IsNull(this.tablencf.CAR4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR4Null() {
                this[this.tablencf.CAR4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR5Null() {
                return this.IsNull(this.tablencf.CAR5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR5Null() {
                this[this.tablencf.CAR5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR6Null() {
                return this.IsNull(this.tablencf.CAR6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR6Null() {
                this[this.tablencf.CAR6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAR7Null() {
                return this.IsNull(this.tablencf.CAR7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAR7Null() {
                this[this.tablencf.CAR7Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class valuesRowChangeEvent : System.EventArgs {
            
            private valuesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public valuesRowChangeEvent(valuesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public valuesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class floorRowChangeEvent : System.EventArgs {
            
            private floorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public floorRowChangeEvent(floorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public floorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class posRowChangeEvent : System.EventArgs {
            
            private posRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public posRowChangeEvent(posRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public posRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CalcRowChangeEvent : System.EventArgs {
            
            private CalcRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalcRowChangeEvent(CalcRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HexecALLRowChangeEvent : System.EventArgs {
            
            private HexecALLRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HexecALLRowChangeEvent(HexecALLRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HexecALLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HExecRowChangeEvent : System.EventArgs {
            
            private HExecRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HExecRowChangeEvent(HExecRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HExecRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UpperPlanRowChangeEvent : System.EventArgs {
            
            private UpperPlanRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpperPlanRowChangeEvent(UpperPlanRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpperPlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ncfRowChangeEvent : System.EventArgs {
            
            private ncfRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ncfRowChangeEvent(ncfRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ncfRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591